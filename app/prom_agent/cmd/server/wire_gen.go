// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"prometheus-manager/app/prom_agent/internal/biz"
	"prometheus-manager/app/prom_agent/internal/conf"
	"prometheus-manager/app/prom_agent/internal/data"
	"prometheus-manager/app/prom_agent/internal/data/repositiryimpl"
	"prometheus-manager/app/prom_agent/internal/server"
	"prometheus-manager/app/prom_agent/internal/service"
	"prometheus-manager/pkg/helper/plog"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(string2 *string) (*kratos.App, func(), error) {
	confBefore := before()
	bootstrap, err := conf.LoadConfig(string2, confBefore)
	if err != nil {
		return nil, nil, err
	}
	confServer := bootstrap.Server
	log := bootstrap.Log
	logger := plog.NewLogger(log)
	dataData, cleanup, err := data.NewData(bootstrap, logger)
	if err != nil {
		return nil, nil, err
	}
	pingRepo := data.NewPingRepo(dataData, logger)
	pingBiz := biz.NewPingBiz(pingRepo, logger)
	pingService := service.NewPingService(pingBiz, logger)
	grpcServer := server.NewGRPCServer(confServer, pingService, logger)
	hookService := service.NewHookService(logger)
	httpServer := server.NewHTTPServer(confServer, pingService, hookService, logger)
	watchProm := bootstrap.WatchProm
	mq := bootstrap.Mq
	kafka := mq.Kafka
	alarmRepo := repositiryimpl.NewAlarmRepo(dataData, kafka, logger)
	alarmBiz := biz.NewAlarmBiz(alarmRepo, logger)
	loadService := service.NewLoadService(alarmBiz, logger)
	watch := server.NewWatch(watchProm, loadService, logger)
	app := newApp(grpcServer, httpServer, watch, logger)
	return app, func() {
		cleanup()
	}, nil
}
