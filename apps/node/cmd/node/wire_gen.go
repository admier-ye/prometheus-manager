// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"prometheus-manager/apps/node/internal/biz"
	"prometheus-manager/apps/node/internal/conf"
	"prometheus-manager/apps/node/internal/data"
	"prometheus-manager/apps/node/internal/server"
	"prometheus-manager/apps/node/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	confServer := bootstrap.Server
	strategy := bootstrap.Strategy
	dataData, cleanup, err := data.NewData(strategy, logger)
	if err != nil {
		return nil, nil, err
	}
	pushRepo := data.NewPushRepo(dataData, logger)
	pushLogic := biz.NewPushLogic(pushRepo, logger)
	pushService := service.NewPushService(pushLogic, logger)
	loadRepo := data.NewLoadRepo(dataData, logger)
	loadLogic := biz.NewLoadLogic(loadRepo, logger)
	loadService := service.NewLoadService(loadLogic, logger)
	pullRepo := data.NewPullRepo(dataData, logger)
	pullLogic := biz.NewPullLogic(pullRepo, logger)
	pullService := service.NewPullService(pullLogic, logger)
	grpcServer := server.NewGRPCServer(confServer, pushService, loadService, pullService, logger)
	httpServer := server.NewHTTPServer(confServer, pushService, loadService, pullService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
