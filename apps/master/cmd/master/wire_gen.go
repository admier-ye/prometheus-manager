// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"prometheus-manager/apps/master/internal/biz"
	"prometheus-manager/apps/master/internal/conf"
	"prometheus-manager/apps/master/internal/data"
	"prometheus-manager/apps/master/internal/server"
	"prometheus-manager/apps/master/internal/service"
	"prometheus-manager/pkg/conn"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	env := bootstrap.Env
	registrar := bootstrap.Registrar
	registrar_Etcd := registrar.Etcd
	client := conn.NewETCDClient(registrar_Etcd)
	registry := conn.NewETCDRegistrar(client)
	confServer := bootstrap.Server
	trace := bootstrap.Trace
	tracerProvider := conn.NewTracerProvider(trace, env)
	confData := bootstrap.Data
	pushStrategy := bootstrap.PushStrategy
	dataData, cleanup, err := data.NewData(confData, pushStrategy, logger)
	if err != nil {
		return nil, nil, err
	}
	pingRepo := data.NewPingRepo(dataData, logger)
	pingLogic := biz.NewPingLogic(pingRepo, logger)
	pingService := service.NewPingService(pingLogic, logger)
	promV1Repo := data.NewPromV1Repo(dataData, logger)
	promLogic := biz.NewPromLogic(promV1Repo, logger)
	promV1Service := service.NewPromService(promLogic, logger)
	dictV1Repo := data.NewDictRepo(dataData, logger)
	dictLogic := biz.NewDictLogic(dictV1Repo, logger)
	dictV1Service := service.NewDictService(dictLogic, logger)
	alarmPageV1Repo := data.NewAlarmPageV1Repo(dataData, logger)
	alarmPageLogic := biz.NewAlarmPageLogic(alarmPageV1Repo, logger)
	alarmPageV1Service := service.NewAlarmPageService(alarmPageLogic, logger)
	grpcServer := server.NewGRPCServer(confServer, logger, tracerProvider, pingService, promV1Service, dictV1Service, alarmPageV1Service)
	httpServer := server.NewHTTPServer(confServer, logger, tracerProvider, pingService, promV1Service, dictV1Service, alarmPageV1Service)
	pushRepo := data.NewPushRepo(dataData, logger)
	pushLogic := biz.NewPushLogic(pushRepo, logger)
	pushService := service.NewPushService(pushLogic, logger)
	timer := server.NewTimer(pushStrategy, logger, pushService)
	app := newApp(env, logger, registry, grpcServer, httpServer, timer)
	return app, func() {
		cleanup()
	}, nil
}
