// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"prometheus-manager/pkg/dal/model"
)

func newPromAlarmPageHistory(db *gorm.DB, opts ...gen.DOOption) promAlarmPageHistory {
	_promAlarmPageHistory := promAlarmPageHistory{}

	_promAlarmPageHistory.promAlarmPageHistoryDo.UseDB(db, opts...)
	_promAlarmPageHistory.promAlarmPageHistoryDo.UseModel(&model.PromAlarmPageHistory{})

	tableName := _promAlarmPageHistory.promAlarmPageHistoryDo.TableName()
	_promAlarmPageHistory.ALL = field.NewAsterisk(tableName)
	_promAlarmPageHistory.AlarmPageID = field.NewInt32(tableName, "alarm_page_id")
	_promAlarmPageHistory.HistoryID = field.NewInt32(tableName, "history_id")

	_promAlarmPageHistory.fillFieldMap()

	return _promAlarmPageHistory
}

type promAlarmPageHistory struct {
	promAlarmPageHistoryDo

	ALL         field.Asterisk
	AlarmPageID field.Int32 // 报警页面ID
	HistoryID   field.Int32 // 历史ID

	fieldMap map[string]field.Expr
}

func (p promAlarmPageHistory) Table(newTableName string) *promAlarmPageHistory {
	p.promAlarmPageHistoryDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promAlarmPageHistory) As(alias string) *promAlarmPageHistory {
	p.promAlarmPageHistoryDo.DO = *(p.promAlarmPageHistoryDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promAlarmPageHistory) updateTableName(table string) *promAlarmPageHistory {
	p.ALL = field.NewAsterisk(table)
	p.AlarmPageID = field.NewInt32(table, "alarm_page_id")
	p.HistoryID = field.NewInt32(table, "history_id")

	p.fillFieldMap()

	return p
}

func (p *promAlarmPageHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promAlarmPageHistory) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 2)
	p.fieldMap["alarm_page_id"] = p.AlarmPageID
	p.fieldMap["history_id"] = p.HistoryID
}

func (p promAlarmPageHistory) clone(db *gorm.DB) promAlarmPageHistory {
	p.promAlarmPageHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promAlarmPageHistory) replaceDB(db *gorm.DB) promAlarmPageHistory {
	p.promAlarmPageHistoryDo.ReplaceDB(db)
	return p
}

type promAlarmPageHistoryDo struct{ gen.DO }

type IPromAlarmPageHistoryDo interface {
	gen.SubQuery
	Debug() IPromAlarmPageHistoryDo
	WithContext(ctx context.Context) IPromAlarmPageHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromAlarmPageHistoryDo
	WriteDB() IPromAlarmPageHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromAlarmPageHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromAlarmPageHistoryDo
	Not(conds ...gen.Condition) IPromAlarmPageHistoryDo
	Or(conds ...gen.Condition) IPromAlarmPageHistoryDo
	Select(conds ...field.Expr) IPromAlarmPageHistoryDo
	Where(conds ...gen.Condition) IPromAlarmPageHistoryDo
	Order(conds ...field.Expr) IPromAlarmPageHistoryDo
	Distinct(cols ...field.Expr) IPromAlarmPageHistoryDo
	Omit(cols ...field.Expr) IPromAlarmPageHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IPromAlarmPageHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromAlarmPageHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPromAlarmPageHistoryDo
	Group(cols ...field.Expr) IPromAlarmPageHistoryDo
	Having(conds ...gen.Condition) IPromAlarmPageHistoryDo
	Limit(limit int) IPromAlarmPageHistoryDo
	Offset(offset int) IPromAlarmPageHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromAlarmPageHistoryDo
	Unscoped() IPromAlarmPageHistoryDo
	Create(values ...*model.PromAlarmPageHistory) error
	CreateInBatches(values []*model.PromAlarmPageHistory, batchSize int) error
	Save(values ...*model.PromAlarmPageHistory) error
	First() (*model.PromAlarmPageHistory, error)
	Take() (*model.PromAlarmPageHistory, error)
	Last() (*model.PromAlarmPageHistory, error)
	Find() ([]*model.PromAlarmPageHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromAlarmPageHistory, err error)
	FindInBatches(result *[]*model.PromAlarmPageHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PromAlarmPageHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromAlarmPageHistoryDo
	Assign(attrs ...field.AssignExpr) IPromAlarmPageHistoryDo
	Joins(fields ...field.RelationField) IPromAlarmPageHistoryDo
	Preload(fields ...field.RelationField) IPromAlarmPageHistoryDo
	FirstOrInit() (*model.PromAlarmPageHistory, error)
	FirstOrCreate() (*model.PromAlarmPageHistory, error)
	FindByPage(offset int, limit int) (result []*model.PromAlarmPageHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromAlarmPageHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SaFindById(ctx context.Context, id int32) (result *model.PromAlarmPageHistory, err error)
}

// select * from @@table where id = @id
func (p promAlarmPageHistoryDo) SaFindById(ctx context.Context, id int32) (result *model.PromAlarmPageHistory, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("select * from prom_alarm_page_histories where id = ? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p promAlarmPageHistoryDo) Debug() IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Debug())
}

func (p promAlarmPageHistoryDo) WithContext(ctx context.Context) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promAlarmPageHistoryDo) ReadDB() IPromAlarmPageHistoryDo {
	return p.Clauses(dbresolver.Read)
}

func (p promAlarmPageHistoryDo) WriteDB() IPromAlarmPageHistoryDo {
	return p.Clauses(dbresolver.Write)
}

func (p promAlarmPageHistoryDo) Session(config *gorm.Session) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Session(config))
}

func (p promAlarmPageHistoryDo) Clauses(conds ...clause.Expression) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promAlarmPageHistoryDo) Returning(value interface{}, columns ...string) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promAlarmPageHistoryDo) Not(conds ...gen.Condition) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promAlarmPageHistoryDo) Or(conds ...gen.Condition) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promAlarmPageHistoryDo) Select(conds ...field.Expr) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promAlarmPageHistoryDo) Where(conds ...gen.Condition) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promAlarmPageHistoryDo) Order(conds ...field.Expr) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promAlarmPageHistoryDo) Distinct(cols ...field.Expr) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promAlarmPageHistoryDo) Omit(cols ...field.Expr) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promAlarmPageHistoryDo) Join(table schema.Tabler, on ...field.Expr) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promAlarmPageHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promAlarmPageHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promAlarmPageHistoryDo) Group(cols ...field.Expr) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promAlarmPageHistoryDo) Having(conds ...gen.Condition) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promAlarmPageHistoryDo) Limit(limit int) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promAlarmPageHistoryDo) Offset(offset int) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promAlarmPageHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promAlarmPageHistoryDo) Unscoped() IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promAlarmPageHistoryDo) Create(values ...*model.PromAlarmPageHistory) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promAlarmPageHistoryDo) CreateInBatches(values []*model.PromAlarmPageHistory, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promAlarmPageHistoryDo) Save(values ...*model.PromAlarmPageHistory) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promAlarmPageHistoryDo) First() (*model.PromAlarmPageHistory, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromAlarmPageHistory), nil
	}
}

func (p promAlarmPageHistoryDo) Take() (*model.PromAlarmPageHistory, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromAlarmPageHistory), nil
	}
}

func (p promAlarmPageHistoryDo) Last() (*model.PromAlarmPageHistory, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromAlarmPageHistory), nil
	}
}

func (p promAlarmPageHistoryDo) Find() ([]*model.PromAlarmPageHistory, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromAlarmPageHistory), err
}

func (p promAlarmPageHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromAlarmPageHistory, err error) {
	buf := make([]*model.PromAlarmPageHistory, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promAlarmPageHistoryDo) FindInBatches(result *[]*model.PromAlarmPageHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promAlarmPageHistoryDo) Attrs(attrs ...field.AssignExpr) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promAlarmPageHistoryDo) Assign(attrs ...field.AssignExpr) IPromAlarmPageHistoryDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promAlarmPageHistoryDo) Joins(fields ...field.RelationField) IPromAlarmPageHistoryDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promAlarmPageHistoryDo) Preload(fields ...field.RelationField) IPromAlarmPageHistoryDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promAlarmPageHistoryDo) FirstOrInit() (*model.PromAlarmPageHistory, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromAlarmPageHistory), nil
	}
}

func (p promAlarmPageHistoryDo) FirstOrCreate() (*model.PromAlarmPageHistory, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromAlarmPageHistory), nil
	}
}

func (p promAlarmPageHistoryDo) FindByPage(offset int, limit int) (result []*model.PromAlarmPageHistory, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promAlarmPageHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promAlarmPageHistoryDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promAlarmPageHistoryDo) Delete(models ...*model.PromAlarmPageHistory) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promAlarmPageHistoryDo) withDO(do gen.Dao) *promAlarmPageHistoryDo {
	p.DO = *do.(*gen.DO)
	return p
}
