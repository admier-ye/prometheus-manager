// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package perrors

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 未知错误
func IsUnknown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Err_UNKNOWN.String() && e.Code == 500
}

// 未知错误
func ErrorUnknown(format string, args ...interface{}) *errors.Error {
	return errors.New(500, Err_UNKNOWN.String(), fmt.Sprintf(format, args...))
}

// 参数错误
func IsInvalidParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Err_INVALID_PARAMS.String() && e.Code == 400
}

// 参数错误
func ErrorInvalidParams(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Err_INVALID_PARAMS.String(), fmt.Sprintf(format, args...))
}

// 资源不存在
func IsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Err_NOT_FOUND.String() && e.Code == 404
}

// 资源不存在
func ErrorNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, Err_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 数据已存在
func IsAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Err_ALREADY_EXISTS.String() && e.Code == 409
}

// 数据已存在
func ErrorAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, Err_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 权限不足
func IsPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Err_PERMISSION_DENIED.String() && e.Code == 403
}

// 权限不足
func ErrorPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(403, Err_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

// 未登录
func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Err_UNAUTHORIZED.String() && e.Code == 401
}

// 未登录
func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, Err_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}
