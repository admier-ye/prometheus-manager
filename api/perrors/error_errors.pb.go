// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package perrors

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 客户端未知错误
func IsClientUnknown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientReason_CLIENT_UNKNOWN.String() && e.Code == 401
}

// 客户端未知错误
func ErrorClientUnknown(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ClientReason_CLIENT_UNKNOWN.String(), fmt.Sprintf(format, args...))
}

// 客户端不存在
func IsClientNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientReason_CLIENT_NOT_FOUND.String() && e.Code == 402
}

// 客户端不存在
func ErrorClientNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(402, ClientReason_CLIENT_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 客户端已存在
func IsClientAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientReason_CLIENT_ALREADY_EXISTS.String() && e.Code == 403
}

// 客户端已存在
func ErrorClientAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ClientReason_CLIENT_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 服务端未知错误
func IsServerUnknown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ServerReason_SERVER_UNKNOWN.String() && e.Code == 501
}

// 服务端未知错误
func ErrorServerUnknown(format string, args ...interface{}) *errors.Error {
	return errors.New(501, ServerReason_SERVER_UNKNOWN.String(), fmt.Sprintf(format, args...))
}

// 数据不存在
func IsServerDataNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ServerReason_SERVER_DATA_NOT_FOUND.String() && e.Code == 502
}

// 数据不存在
func ErrorServerDataNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(502, ServerReason_SERVER_DATA_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 数据库错误
func IsServerDatabaseError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ServerReason_SERVER_DATABASE_ERROR.String() && e.Code == 503
}

// 数据库错误
func ErrorServerDatabaseError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ServerReason_SERVER_DATABASE_ERROR.String(), fmt.Sprintf(format, args...))
}

// GRPC错误
func IsServerGrpcError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ServerReason_SERVER_GRPC_ERROR.String() && e.Code == 504
}

// GRPC错误
func ErrorServerGrpcError(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ServerReason_SERVER_GRPC_ERROR.String(), fmt.Sprintf(format, args...))
}

// HTTP错误
func IsServerHttpError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ServerReason_SERVER_HTTP_ERROR.String() && e.Code == 505
}

// HTTP错误
func ErrorServerHttpError(format string, args ...interface{}) *errors.Error {
	return errors.New(505, ServerReason_SERVER_HTTP_ERROR.String(), fmt.Sprintf(format, args...))
}

// 逻辑未知错误
func IsLogicUnknown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_UNKNOWN.String() && e.Code == 200
}

// 逻辑未知错误
func ErrorLogicUnknown(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_UNKNOWN.String(), fmt.Sprintf(format, args...))
}

// 未配置strategyPath
func IsLogicStrategyPathNotConfigured(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_STRATEGY_PATH_NOT_CONFIGURED.String() && e.Code == 200
}

// 未配置strategyPath
func ErrorLogicStrategyPathNotConfigured(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_STRATEGY_PATH_NOT_CONFIGURED.String(), fmt.Sprintf(format, args...))
}

// 未授权路径
func IsLogicUnauthorizedPath(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_UNAUTHORIZED_PATH.String() && e.Code == 200
}

// 未授权路径
func ErrorLogicUnauthorizedPath(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_UNAUTHORIZED_PATH.String(), fmt.Sprintf(format, args...))
}

// 创建prometheus-group失败
func IsLogicCreatePrometheusGroupFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_CREATE_PROMETHEUS_GROUP_FAILED.String() && e.Code == 200
}

// 创建prometheus-group失败
func ErrorLogicCreatePrometheusGroupFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_CREATE_PROMETHEUS_GROUP_FAILED.String(), fmt.Sprintf(format, args...))
}

// 编辑prometheus-group失败
func IsLogicEditPrometheusGroupFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_EDIT_PROMETHEUS_GROUP_FAILED.String() && e.Code == 200
}

// 编辑prometheus-group失败
func ErrorLogicEditPrometheusGroupFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_EDIT_PROMETHEUS_GROUP_FAILED.String(), fmt.Sprintf(format, args...))
}

// 删除prometheus-group失败
func IsLogicDeletePrometheusGroupFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_DELETE_PROMETHEUS_GROUP_FAILED.String() && e.Code == 200
}

// 删除prometheus-group失败
func ErrorLogicDeletePrometheusGroupFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_DELETE_PROMETHEUS_GROUP_FAILED.String(), fmt.Sprintf(format, args...))
}

// 创建prometheus-strategy失败
func IsLogicCreatePrometheusStrategyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_CREATE_PROMETHEUS_STRATEGY_FAILED.String() && e.Code == 200
}

// 创建prometheus-strategy失败
func ErrorLogicCreatePrometheusStrategyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_CREATE_PROMETHEUS_STRATEGY_FAILED.String(), fmt.Sprintf(format, args...))
}

// 编辑prometheus-strategy失败
func IsLogicEditPrometheusStrategyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_EDIT_PROMETHEUS_STRATEGY_FAILED.String() && e.Code == 200
}

// 编辑prometheus-strategy失败
func ErrorLogicEditPrometheusStrategyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_EDIT_PROMETHEUS_STRATEGY_FAILED.String(), fmt.Sprintf(format, args...))
}

// 删除prometheus-strategy失败
func IsLogicDeletePrometheusStrategyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_DELETE_PROMETHEUS_STRATEGY_FAILED.String() && e.Code == 200
}

// 删除prometheus-strategy失败
func ErrorLogicDeletePrometheusStrategyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_DELETE_PROMETHEUS_STRATEGY_FAILED.String(), fmt.Sprintf(format, args...))
}

// 数据不存在
func IsLogicDataNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_DATA_NOT_FOUND.String() && e.Code == 200
}

// 数据不存在
func ErrorLogicDataNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_DATA_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 数据重复
func IsLogicDataDuplicate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_DATA_DUPLICATE.String() && e.Code == 200
}

// 数据重复
func ErrorLogicDataDuplicate(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_DATA_DUPLICATE.String(), fmt.Sprintf(format, args...))
}

// 创建alart-page失败
func IsLogicCreateAlertPageFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_CREATE_ALERT_PAGE_FAILED.String() && e.Code == 200
}

// 创建alart-page失败
func ErrorLogicCreateAlertPageFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_CREATE_ALERT_PAGE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 编辑alart-page失败
func IsLogicEditAlertPageFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_EDIT_ALERT_PAGE_FAILED.String() && e.Code == 200
}

// 编辑alart-page失败
func ErrorLogicEditAlertPageFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_EDIT_ALERT_PAGE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 删除alart-page失败
func IsLogicDeleteAlertPageFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_DELETE_ALERT_PAGE_FAILED.String() && e.Code == 200
}

// 删除alart-page失败
func ErrorLogicDeleteAlertPageFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_DELETE_ALERT_PAGE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 创建dict失败
func IsLogicCreateDictFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_CREATE_DICT_FAILED.String() && e.Code == 200
}

// 创建dict失败
func ErrorLogicCreateDictFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_CREATE_DICT_FAILED.String(), fmt.Sprintf(format, args...))
}

// 编辑dict失败
func IsLogicEditDictFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_EDIT_DICT_FAILED.String() && e.Code == 200
}

// 编辑dict失败
func ErrorLogicEditDictFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_EDIT_DICT_FAILED.String(), fmt.Sprintf(format, args...))
}

// 删除dict失败
func IsLogicDeleteDictFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_DELETE_DICT_FAILED.String() && e.Code == 200
}

// 删除dict失败
func ErrorLogicDeleteDictFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_DELETE_DICT_FAILED.String(), fmt.Sprintf(format, args...))
}

// 同步告警错误
func IsLogicSyncAlertError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == LogicReason_LOGIC_SYNC_ALERT_ERROR.String() && e.Code == 200
}

// 同步告警错误
func ErrorLogicSyncAlertError(format string, args ...interface{}) *errors.Error {
	return errors.New(200, LogicReason_LOGIC_SYNC_ALERT_ERROR.String(), fmt.Sprintf(format, args...))
}
