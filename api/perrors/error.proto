syntax = "proto3";

package api.perrors;

import "errors/errors.proto";

option go_package = "prometheus-manager/api/perrors;perrors";
option java_multiple_files = true;
option java_package = "api.perrors";

// 错误码 [4xx][] [模块编号][业务错误]

// 客户端错误
enum ClientReason {
  option (errors.default_code) = 400; // 默认错误码
  CLIENT_UNKNOWN = 0 [(errors.code) = 401]; // 客户端未知错误
  CLIENT_NOT_FOUND = 1 [(errors.code) = 402]; // 客户端不存在
  CLIENT_ALREADY_EXISTS = 2 [(errors.code) = 403]; // 客户端已存在
}

// 服务端错误
enum ServerReason {
  option (errors.default_code) = 500; // 默认错误码
  SERVER_UNKNOWN = 0 [(errors.code) = 501]; // 服务端未知错误
  SERVER_DATA_NOT_FOUND = 1 [(errors.code) = 502]; // 数据不存在
  SERVER_DATABASE_ERROR = 2 [(errors.code) = 503]; // 数据库错误
  // GRPC错误
  SERVER_GRPC_ERROR = 3 [(errors.code) = 504];
  // HTTP错误
  SERVER_HTTP_ERROR = 4 [(errors.code) = 505];
}

// 逻辑错误
enum LogicReason {
  option (errors.default_code) = 200; // 默认错误码
  LOGIC_UNKNOWN = 0 [(errors.code) = 200]; // 逻辑未知错误
  // 未配置strategyPath
  LOGIC_STRATEGY_PATH_NOT_CONFIGURED = 1 [(errors.code) = 200];
  // 未授权路径
  LOGIC_UNAUTHORIZED_PATH = 2 [(errors.code) = 200];
  // 创建prometheus-group失败
  LOGIC_CREATE_PROMETHEUS_GROUP_FAILED = 3 [(errors.code) = 200];
  // 编辑prometheus-group失败
  LOGIC_EDIT_PROMETHEUS_GROUP_FAILED = 4 [(errors.code) = 200];
  // 删除prometheus-group失败
  LOGIC_DELETE_PROMETHEUS_GROUP_FAILED = 5 [(errors.code) = 200];
  // 创建prometheus-strategy失败
  LOGIC_CREATE_PROMETHEUS_STRATEGY_FAILED = 6 [(errors.code) = 200];
  // 编辑prometheus-strategy失败
  LOGIC_EDIT_PROMETHEUS_STRATEGY_FAILED = 7 [(errors.code) = 200];
  // 删除prometheus-strategy失败
  LOGIC_DELETE_PROMETHEUS_STRATEGY_FAILED = 8 [(errors.code) = 200];
  // 数据不存在
  LOGIC_DATA_NOT_FOUND = 9 [(errors.code) = 200];
  // 数据重复
  LOGIC_DATA_DUPLICATE = 10 [(errors.code) = 200];
  // 创建alart-page失败
  LOGIC_CREATE_ALERT_PAGE_FAILED = 11 [(errors.code) = 200];
  // 编辑alart-page失败
  LOGIC_EDIT_ALERT_PAGE_FAILED = 12 [(errors.code) = 200];
  // 删除alart-page失败
  LOGIC_DELETE_ALERT_PAGE_FAILED = 13 [(errors.code) = 200];
  // 创建dict失败
  LOGIC_CREATE_DICT_FAILED = 14 [(errors.code) = 200];
  // 编辑dict失败
  LOGIC_EDIT_DICT_FAILED = 15 [(errors.code) = 200];
  // 删除dict失败
  LOGIC_DELETE_DICT_FAILED = 16 [(errors.code) = 200];
}
