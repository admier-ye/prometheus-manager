// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.4
// source: alarm/page/page.proto

package page

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAlarmPageBatchDeleteAlarmPage = "/api.alarm.page.AlarmPage/BatchDeleteAlarmPage"
const OperationAlarmPageBatchUpdateAlarmPageStatus = "/api.alarm.page.AlarmPage/BatchUpdateAlarmPageStatus"
const OperationAlarmPageCreateAlarmPage = "/api.alarm.page.AlarmPage/CreateAlarmPage"
const OperationAlarmPageDeleteAlarmPage = "/api.alarm.page.AlarmPage/DeleteAlarmPage"
const OperationAlarmPageGetAlarmPage = "/api.alarm.page.AlarmPage/GetAlarmPage"
const OperationAlarmPageListAlarmPage = "/api.alarm.page.AlarmPage/ListAlarmPage"
const OperationAlarmPageSelectAlarmPage = "/api.alarm.page.AlarmPage/SelectAlarmPage"
const OperationAlarmPageUpdateAlarmPage = "/api.alarm.page.AlarmPage/UpdateAlarmPage"

type AlarmPageHTTPServer interface {
	BatchDeleteAlarmPage(context.Context, *BatchDeleteAlarmPageRequest) (*BatchDeleteAlarmPageReply, error)
	BatchUpdateAlarmPageStatus(context.Context, *BatchUpdateAlarmPageStatusRequest) (*BatchUpdateAlarmPageStatusReply, error)
	CreateAlarmPage(context.Context, *CreateAlarmPageRequest) (*CreateAlarmPageReply, error)
	DeleteAlarmPage(context.Context, *DeleteAlarmPageRequest) (*DeleteAlarmPageReply, error)
	GetAlarmPage(context.Context, *GetAlarmPageRequest) (*GetAlarmPageReply, error)
	ListAlarmPage(context.Context, *ListAlarmPageRequest) (*ListAlarmPageReply, error)
	SelectAlarmPage(context.Context, *SelectAlarmPageRequest) (*SelectAlarmPageReply, error)
	UpdateAlarmPage(context.Context, *UpdateAlarmPageRequest) (*UpdateAlarmPageReply, error)
}

func RegisterAlarmPageHTTPServer(s *http.Server, srv AlarmPageHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/alarm_page/create", _AlarmPage_CreateAlarmPage0_HTTP_Handler(srv))
	r.POST("/api/v1/alarm_page/update", _AlarmPage_UpdateAlarmPage0_HTTP_Handler(srv))
	r.POST("/api/v1/alarm_page/status/batch/update", _AlarmPage_BatchUpdateAlarmPageStatus0_HTTP_Handler(srv))
	r.POST("/api/v1/alarm_page/delete", _AlarmPage_DeleteAlarmPage0_HTTP_Handler(srv))
	r.POST("/api/v1/alarm_page/batch/delete", _AlarmPage_BatchDeleteAlarmPage0_HTTP_Handler(srv))
	r.POST("/api/v1/alarm_page/get", _AlarmPage_GetAlarmPage0_HTTP_Handler(srv))
	r.POST("/api/v1/alarm_page/list", _AlarmPage_ListAlarmPage0_HTTP_Handler(srv))
	r.POST("/api/v1/alarm_page/select", _AlarmPage_SelectAlarmPage0_HTTP_Handler(srv))
}

func _AlarmPage_CreateAlarmPage0_HTTP_Handler(srv AlarmPageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAlarmPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlarmPageCreateAlarmPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAlarmPage(ctx, req.(*CreateAlarmPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAlarmPageReply)
		return ctx.Result(200, reply)
	}
}

func _AlarmPage_UpdateAlarmPage0_HTTP_Handler(srv AlarmPageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAlarmPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlarmPageUpdateAlarmPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAlarmPage(ctx, req.(*UpdateAlarmPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAlarmPageReply)
		return ctx.Result(200, reply)
	}
}

func _AlarmPage_BatchUpdateAlarmPageStatus0_HTTP_Handler(srv AlarmPageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchUpdateAlarmPageStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlarmPageBatchUpdateAlarmPageStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchUpdateAlarmPageStatus(ctx, req.(*BatchUpdateAlarmPageStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchUpdateAlarmPageStatusReply)
		return ctx.Result(200, reply)
	}
}

func _AlarmPage_DeleteAlarmPage0_HTTP_Handler(srv AlarmPageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAlarmPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlarmPageDeleteAlarmPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAlarmPage(ctx, req.(*DeleteAlarmPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAlarmPageReply)
		return ctx.Result(200, reply)
	}
}

func _AlarmPage_BatchDeleteAlarmPage0_HTTP_Handler(srv AlarmPageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchDeleteAlarmPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlarmPageBatchDeleteAlarmPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteAlarmPage(ctx, req.(*BatchDeleteAlarmPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchDeleteAlarmPageReply)
		return ctx.Result(200, reply)
	}
}

func _AlarmPage_GetAlarmPage0_HTTP_Handler(srv AlarmPageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAlarmPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlarmPageGetAlarmPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAlarmPage(ctx, req.(*GetAlarmPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAlarmPageReply)
		return ctx.Result(200, reply)
	}
}

func _AlarmPage_ListAlarmPage0_HTTP_Handler(srv AlarmPageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAlarmPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlarmPageListAlarmPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAlarmPage(ctx, req.(*ListAlarmPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAlarmPageReply)
		return ctx.Result(200, reply)
	}
}

func _AlarmPage_SelectAlarmPage0_HTTP_Handler(srv AlarmPageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SelectAlarmPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlarmPageSelectAlarmPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SelectAlarmPage(ctx, req.(*SelectAlarmPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SelectAlarmPageReply)
		return ctx.Result(200, reply)
	}
}

type AlarmPageHTTPClient interface {
	BatchDeleteAlarmPage(ctx context.Context, req *BatchDeleteAlarmPageRequest, opts ...http.CallOption) (rsp *BatchDeleteAlarmPageReply, err error)
	BatchUpdateAlarmPageStatus(ctx context.Context, req *BatchUpdateAlarmPageStatusRequest, opts ...http.CallOption) (rsp *BatchUpdateAlarmPageStatusReply, err error)
	CreateAlarmPage(ctx context.Context, req *CreateAlarmPageRequest, opts ...http.CallOption) (rsp *CreateAlarmPageReply, err error)
	DeleteAlarmPage(ctx context.Context, req *DeleteAlarmPageRequest, opts ...http.CallOption) (rsp *DeleteAlarmPageReply, err error)
	GetAlarmPage(ctx context.Context, req *GetAlarmPageRequest, opts ...http.CallOption) (rsp *GetAlarmPageReply, err error)
	ListAlarmPage(ctx context.Context, req *ListAlarmPageRequest, opts ...http.CallOption) (rsp *ListAlarmPageReply, err error)
	SelectAlarmPage(ctx context.Context, req *SelectAlarmPageRequest, opts ...http.CallOption) (rsp *SelectAlarmPageReply, err error)
	UpdateAlarmPage(ctx context.Context, req *UpdateAlarmPageRequest, opts ...http.CallOption) (rsp *UpdateAlarmPageReply, err error)
}

type AlarmPageHTTPClientImpl struct {
	cc *http.Client
}

func NewAlarmPageHTTPClient(client *http.Client) AlarmPageHTTPClient {
	return &AlarmPageHTTPClientImpl{client}
}

func (c *AlarmPageHTTPClientImpl) BatchDeleteAlarmPage(ctx context.Context, in *BatchDeleteAlarmPageRequest, opts ...http.CallOption) (*BatchDeleteAlarmPageReply, error) {
	var out BatchDeleteAlarmPageReply
	pattern := "/api/v1/alarm_page/batch/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlarmPageBatchDeleteAlarmPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlarmPageHTTPClientImpl) BatchUpdateAlarmPageStatus(ctx context.Context, in *BatchUpdateAlarmPageStatusRequest, opts ...http.CallOption) (*BatchUpdateAlarmPageStatusReply, error) {
	var out BatchUpdateAlarmPageStatusReply
	pattern := "/api/v1/alarm_page/status/batch/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlarmPageBatchUpdateAlarmPageStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlarmPageHTTPClientImpl) CreateAlarmPage(ctx context.Context, in *CreateAlarmPageRequest, opts ...http.CallOption) (*CreateAlarmPageReply, error) {
	var out CreateAlarmPageReply
	pattern := "/api/v1/alarm_page/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlarmPageCreateAlarmPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlarmPageHTTPClientImpl) DeleteAlarmPage(ctx context.Context, in *DeleteAlarmPageRequest, opts ...http.CallOption) (*DeleteAlarmPageReply, error) {
	var out DeleteAlarmPageReply
	pattern := "/api/v1/alarm_page/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlarmPageDeleteAlarmPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlarmPageHTTPClientImpl) GetAlarmPage(ctx context.Context, in *GetAlarmPageRequest, opts ...http.CallOption) (*GetAlarmPageReply, error) {
	var out GetAlarmPageReply
	pattern := "/api/v1/alarm_page/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlarmPageGetAlarmPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlarmPageHTTPClientImpl) ListAlarmPage(ctx context.Context, in *ListAlarmPageRequest, opts ...http.CallOption) (*ListAlarmPageReply, error) {
	var out ListAlarmPageReply
	pattern := "/api/v1/alarm_page/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlarmPageListAlarmPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlarmPageHTTPClientImpl) SelectAlarmPage(ctx context.Context, in *SelectAlarmPageRequest, opts ...http.CallOption) (*SelectAlarmPageReply, error) {
	var out SelectAlarmPageReply
	pattern := "/api/v1/alarm_page/select"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlarmPageSelectAlarmPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlarmPageHTTPClientImpl) UpdateAlarmPage(ctx context.Context, in *UpdateAlarmPageRequest, opts ...http.CallOption) (*UpdateAlarmPageReply, error) {
	var out UpdateAlarmPageReply
	pattern := "/api/v1/alarm_page/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAlarmPageUpdateAlarmPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
