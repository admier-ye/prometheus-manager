// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.4
// source: alarm/v1/alarm.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAlarmList = "/api.alarm.v1.Alarm/List"
const OperationAlarmStatistics = "/api.alarm.v1.Alarm/Statistics"

type AlarmHTTPServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	Statistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error)
}

func RegisterAlarmHTTPServer(s *http.Server, srv AlarmHTTPServer) {
	r := s.Route("/")
	r.GET("/alarm/v1/statistics", _Alarm_Statistics0_HTTP_Handler(srv))
	r.GET("/alarm/v1/list", _Alarm_List0_HTTP_Handler(srv))
}

func _Alarm_Statistics0_HTTP_Handler(srv AlarmHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StatisticsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlarmStatistics)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Statistics(ctx, req.(*StatisticsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StatisticsResponse)
		return ctx.Result(200, reply)
	}
}

func _Alarm_List0_HTTP_Handler(srv AlarmHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAlarmList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListResponse)
		return ctx.Result(200, reply)
	}
}

type AlarmHTTPClient interface {
	List(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *ListResponse, err error)
	Statistics(ctx context.Context, req *StatisticsRequest, opts ...http.CallOption) (rsp *StatisticsResponse, err error)
}

type AlarmHTTPClientImpl struct {
	cc *http.Client
}

func NewAlarmHTTPClient(client *http.Client) AlarmHTTPClient {
	return &AlarmHTTPClientImpl{client}
}

func (c *AlarmHTTPClientImpl) List(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*ListResponse, error) {
	var out ListResponse
	pattern := "/alarm/v1/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAlarmList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AlarmHTTPClientImpl) Statistics(ctx context.Context, in *StatisticsRequest, opts ...http.CallOption) (*StatisticsResponse, error) {
	var out StatisticsResponse
	pattern := "/alarm/v1/statistics"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAlarmStatistics))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
