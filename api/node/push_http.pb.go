// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.4
// source: node/push.proto

package node

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPushCall = "/api.node.Push/Call"

type PushHTTPServer interface {
	Call(context.Context, *CallRequest) (*CallResponse, error)
}

func RegisterPushHTTPServer(s *http.Server, srv PushHTTPServer) {
	r := s.Route("/")
	r.GET("/push/v1/node/{name}/strategies", _Push_Call0_HTTP_Handler(srv))
}

func _Push_Call0_HTTP_Handler(srv PushHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CallRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPushCall)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Call(ctx, req.(*CallRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CallResponse)
		return ctx.Result(200, reply)
	}
}

type PushHTTPClient interface {
	Call(ctx context.Context, req *CallRequest, opts ...http.CallOption) (rsp *CallResponse, err error)
}

type PushHTTPClientImpl struct {
	cc *http.Client
}

func NewPushHTTPClient(client *http.Client) PushHTTPClient {
	return &PushHTTPClientImpl{client}
}

func (c *PushHTTPClientImpl) Call(ctx context.Context, in *CallRequest, opts ...http.CallOption) (*CallResponse, error) {
	var out CallResponse
	pattern := "/push/v1/node/{name}/strategies"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPushCall))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
