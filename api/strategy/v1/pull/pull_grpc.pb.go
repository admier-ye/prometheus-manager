// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: strategy/v1/pull/pull.proto

package pull

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PullClient is the client API for Pull service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PullClient interface {
	Strategies(ctx context.Context, in *StrategiesRequest, opts ...grpc.CallOption) (*StrategiesReply, error)
	Datasources(ctx context.Context, in *DatasourcesRequest, opts ...grpc.CallOption) (*DatasourcesReply, error)
}

type pullClient struct {
	cc grpc.ClientConnInterface
}

func NewPullClient(cc grpc.ClientConnInterface) PullClient {
	return &pullClient{cc}
}

func (c *pullClient) Strategies(ctx context.Context, in *StrategiesRequest, opts ...grpc.CallOption) (*StrategiesReply, error) {
	out := new(StrategiesReply)
	err := c.cc.Invoke(ctx, "/api.strategy.v1.pull.Pull/Strategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pullClient) Datasources(ctx context.Context, in *DatasourcesRequest, opts ...grpc.CallOption) (*DatasourcesReply, error) {
	out := new(DatasourcesReply)
	err := c.cc.Invoke(ctx, "/api.strategy.v1.pull.Pull/Datasources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PullServer is the server API for Pull service.
// All implementations must embed UnimplementedPullServer
// for forward compatibility
type PullServer interface {
	Strategies(context.Context, *StrategiesRequest) (*StrategiesReply, error)
	Datasources(context.Context, *DatasourcesRequest) (*DatasourcesReply, error)
	mustEmbedUnimplementedPullServer()
}

// UnimplementedPullServer must be embedded to have forward compatible implementations.
type UnimplementedPullServer struct {
}

func (UnimplementedPullServer) Strategies(context.Context, *StrategiesRequest) (*StrategiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Strategies not implemented")
}
func (UnimplementedPullServer) Datasources(context.Context, *DatasourcesRequest) (*DatasourcesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Datasources not implemented")
}
func (UnimplementedPullServer) mustEmbedUnimplementedPullServer() {}

// UnsafePullServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PullServer will
// result in compilation errors.
type UnsafePullServer interface {
	mustEmbedUnimplementedPullServer()
}

func RegisterPullServer(s grpc.ServiceRegistrar, srv PullServer) {
	s.RegisterService(&Pull_ServiceDesc, srv)
}

func _Pull_Strategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PullServer).Strategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.strategy.v1.pull.Pull/Strategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PullServer).Strategies(ctx, req.(*StrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pull_Datasources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PullServer).Datasources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.strategy.v1.pull.Pull/Datasources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PullServer).Datasources(ctx, req.(*DatasourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pull_ServiceDesc is the grpc.ServiceDesc for Pull service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pull_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.strategy.v1.pull.Pull",
	HandlerType: (*PullServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Strategies",
			Handler:    _Pull_Strategies_Handler,
		},
		{
			MethodName: "Datasources",
			Handler:    _Pull_Datasources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strategy/v1/pull/pull.proto",
}
