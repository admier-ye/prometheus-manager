// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: strategy/v1/crud.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRuleRequestMultiError, or nil if none found.
func (m *CreateRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRuleRequestValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetGroupId() <= 0 {
		err := CreateRuleRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateRuleRequestMultiError(errors)
	}

	return nil
}

// CreateRuleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRuleRequestMultiError) AllErrors() []error { return m }

// CreateRuleRequestValidationError is the validation error returned by
// CreateRuleRequest.Validate if the designated constraints aren't met.
type CreateRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRuleRequestValidationError) ErrorName() string {
	return "CreateRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRuleRequestValidationError{}

// Validate checks the field values on CreateRuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRuleReplyMultiError, or nil if none found.
func (m *CreateRuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRuleReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRuleReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRuleReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRuleReplyMultiError(errors)
	}

	return nil
}

// CreateRuleReplyMultiError is an error wrapping multiple validation errors
// returned by CreateRuleReply.ValidateAll() if the designated constraints
// aren't met.
type CreateRuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRuleReplyMultiError) AllErrors() []error { return m }

// CreateRuleReplyValidationError is the validation error returned by
// CreateRuleReply.Validate if the designated constraints aren't met.
type CreateRuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRuleReplyValidationError) ErrorName() string { return "CreateRuleReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateRuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRuleReplyValidationError{}

// Validate checks the field values on UpdateRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRuleRequestMultiError, or nil if none found.
func (m *UpdateRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRuleRequestValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRuleRequestMultiError(errors)
	}

	return nil
}

// UpdateRuleRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRuleRequestMultiError) AllErrors() []error { return m }

// UpdateRuleRequestValidationError is the validation error returned by
// UpdateRuleRequest.Validate if the designated constraints aren't met.
type UpdateRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleRequestValidationError) ErrorName() string {
	return "UpdateRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleRequestValidationError{}

// Validate checks the field values on UpdateRuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRuleReplyMultiError, or nil if none found.
func (m *UpdateRuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRuleReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRuleReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRuleReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRuleReplyMultiError(errors)
	}

	return nil
}

// UpdateRuleReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateRuleReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateRuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRuleReplyMultiError) AllErrors() []error { return m }

// UpdateRuleReplyValidationError is the validation error returned by
// UpdateRuleReply.Validate if the designated constraints aren't met.
type UpdateRuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleReplyValidationError) ErrorName() string { return "UpdateRuleReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleReplyValidationError{}

// Validate checks the field values on DeleteRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRuleRequestMultiError, or nil if none found.
func (m *DeleteRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRuleRequestMultiError(errors)
	}

	return nil
}

// DeleteRuleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRuleRequestMultiError) AllErrors() []error { return m }

// DeleteRuleRequestValidationError is the validation error returned by
// DeleteRuleRequest.Validate if the designated constraints aren't met.
type DeleteRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRuleRequestValidationError) ErrorName() string {
	return "DeleteRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRuleRequestValidationError{}

// Validate checks the field values on DeleteRuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRuleReplyMultiError, or nil if none found.
func (m *DeleteRuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRuleReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRuleReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRuleReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteRuleReplyMultiError(errors)
	}

	return nil
}

// DeleteRuleReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteRuleReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteRuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRuleReplyMultiError) AllErrors() []error { return m }

// DeleteRuleReplyValidationError is the validation error returned by
// DeleteRuleReply.Validate if the designated constraints aren't met.
type DeleteRuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRuleReplyValidationError) ErrorName() string { return "DeleteRuleReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRuleReplyValidationError{}

// Validate checks the field values on GetRuleDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRuleDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRuleDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRuleDetailRequestMultiError, or nil if none found.
func (m *GetRuleDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRuleDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRuleDetailRequestMultiError(errors)
	}

	return nil
}

// GetRuleDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetRuleDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRuleDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRuleDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRuleDetailRequestMultiError) AllErrors() []error { return m }

// GetRuleDetailRequestValidationError is the validation error returned by
// GetRuleDetailRequest.Validate if the designated constraints aren't met.
type GetRuleDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRuleDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRuleDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRuleDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRuleDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRuleDetailRequestValidationError) ErrorName() string {
	return "GetRuleDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRuleDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRuleDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRuleDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRuleDetailRequestValidationError{}

// Validate checks the field values on GetRuleDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRuleDetailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRuleDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRuleDetailReplyMultiError, or nil if none found.
func (m *GetRuleDetailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRuleDetailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRuleDetailReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRuleDetailReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRuleDetailReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRuleDetailReplyValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRuleDetailReplyValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRuleDetailReplyValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRuleDetailReplyMultiError(errors)
	}

	return nil
}

// GetRuleDetailReplyMultiError is an error wrapping multiple validation errors
// returned by GetRuleDetailReply.ValidateAll() if the designated constraints
// aren't met.
type GetRuleDetailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRuleDetailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRuleDetailReplyMultiError) AllErrors() []error { return m }

// GetRuleDetailReplyValidationError is the validation error returned by
// GetRuleDetailReply.Validate if the designated constraints aren't met.
type GetRuleDetailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRuleDetailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRuleDetailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRuleDetailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRuleDetailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRuleDetailReplyValidationError) ErrorName() string {
	return "GetRuleDetailReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetRuleDetailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRuleDetailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRuleDetailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRuleDetailReplyValidationError{}

// Validate checks the field values on StrategiesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StrategiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategiesRequestMultiError, or nil if none found.
func (m *StrategiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNodeId()) < 1 {
		err := StrategiesRequestValidationError{
			field:  "NodeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StrategiesRequestMultiError(errors)
	}

	return nil
}

// StrategiesRequestMultiError is an error wrapping multiple validation errors
// returned by StrategiesRequest.ValidateAll() if the designated constraints
// aren't met.
type StrategiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategiesRequestMultiError) AllErrors() []error { return m }

// StrategiesRequestValidationError is the validation error returned by
// StrategiesRequest.Validate if the designated constraints aren't met.
type StrategiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategiesRequestValidationError) ErrorName() string {
	return "StrategiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StrategiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategiesRequestValidationError{}

// Validate checks the field values on StrategiesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StrategiesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategiesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategiesReplyMultiError, or nil if none found.
func (m *StrategiesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategiesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrategiesReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrategiesReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrategiesReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStrategyDir() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StrategiesReplyValidationError{
						field:  fmt.Sprintf("StrategyDir[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StrategiesReplyValidationError{
						field:  fmt.Sprintf("StrategyDir[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StrategiesReplyValidationError{
					field:  fmt.Sprintf("StrategyDir[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StrategiesReplyMultiError(errors)
	}

	return nil
}

// StrategiesReplyMultiError is an error wrapping multiple validation errors
// returned by StrategiesReply.ValidateAll() if the designated constraints
// aren't met.
type StrategiesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategiesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategiesReplyMultiError) AllErrors() []error { return m }

// StrategiesReplyValidationError is the validation error returned by
// StrategiesReply.Validate if the designated constraints aren't met.
type StrategiesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategiesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategiesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategiesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategiesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategiesReplyValidationError) ErrorName() string { return "StrategiesReplyValidationError" }

// Error satisfies the builtin error interface
func (e StrategiesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategiesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategiesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategiesReplyValidationError{}
