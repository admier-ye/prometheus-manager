// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: strategy/v1/crud.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCrudRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCrudRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCrudRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCrudRequestMultiError, or nil if none found.
func (m *CreateCrudRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCrudRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetNodes()); l < 1 || l > 10 {
		err := CreateCrudRequestValidationError{
			field:  "Nodes",
			reason: "value must contain between 1 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStrategyDir()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCrudRequestValidationError{
					field:  "StrategyDir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCrudRequestValidationError{
					field:  "StrategyDir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStrategyDir()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCrudRequestValidationError{
				field:  "StrategyDir",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCrudRequestMultiError(errors)
	}

	return nil
}

// CreateCrudRequestMultiError is an error wrapping multiple validation errors
// returned by CreateCrudRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateCrudRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCrudRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCrudRequestMultiError) AllErrors() []error { return m }

// CreateCrudRequestValidationError is the validation error returned by
// CreateCrudRequest.Validate if the designated constraints aren't met.
type CreateCrudRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCrudRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCrudRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCrudRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCrudRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCrudRequestValidationError) ErrorName() string {
	return "CreateCrudRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCrudRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCrudRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCrudRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCrudRequestValidationError{}

// Validate checks the field values on CreateCrudReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCrudReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCrudReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCrudReplyMultiError, or nil if none found.
func (m *CreateCrudReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCrudReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCrudReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCrudReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCrudReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCrudReplyMultiError(errors)
	}

	return nil
}

// CreateCrudReplyMultiError is an error wrapping multiple validation errors
// returned by CreateCrudReply.ValidateAll() if the designated constraints
// aren't met.
type CreateCrudReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCrudReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCrudReplyMultiError) AllErrors() []error { return m }

// CreateCrudReplyValidationError is the validation error returned by
// CreateCrudReply.Validate if the designated constraints aren't met.
type CreateCrudReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCrudReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCrudReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCrudReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCrudReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCrudReplyValidationError) ErrorName() string { return "CreateCrudReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateCrudReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCrudReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCrudReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCrudReplyValidationError{}

// Validate checks the field values on UpdateCrudRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCrudRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCrudRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCrudRequestMultiError, or nil if none found.
func (m *UpdateCrudRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCrudRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := len(m.GetNodes()); l < 1 || l > 10 {
		err := UpdateCrudRequestValidationError{
			field:  "Nodes",
			reason: "value must contain between 1 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStrategyDir()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCrudRequestValidationError{
					field:  "StrategyDir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCrudRequestValidationError{
					field:  "StrategyDir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStrategyDir()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCrudRequestValidationError{
				field:  "StrategyDir",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCrudRequestMultiError(errors)
	}

	return nil
}

// UpdateCrudRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateCrudRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateCrudRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCrudRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCrudRequestMultiError) AllErrors() []error { return m }

// UpdateCrudRequestValidationError is the validation error returned by
// UpdateCrudRequest.Validate if the designated constraints aren't met.
type UpdateCrudRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCrudRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCrudRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCrudRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCrudRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCrudRequestValidationError) ErrorName() string {
	return "UpdateCrudRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCrudRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCrudRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCrudRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCrudRequestValidationError{}

// Validate checks the field values on UpdateCrudReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCrudReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCrudReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCrudReplyMultiError, or nil if none found.
func (m *UpdateCrudReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCrudReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCrudReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCrudReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCrudReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCrudReplyMultiError(errors)
	}

	return nil
}

// UpdateCrudReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateCrudReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateCrudReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCrudReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCrudReplyMultiError) AllErrors() []error { return m }

// UpdateCrudReplyValidationError is the validation error returned by
// UpdateCrudReply.Validate if the designated constraints aren't met.
type UpdateCrudReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCrudReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCrudReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCrudReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCrudReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCrudReplyValidationError) ErrorName() string { return "UpdateCrudReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateCrudReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCrudReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCrudReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCrudReplyValidationError{}

// Validate checks the field values on DeleteCrudRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCrudRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCrudRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCrudRequestMultiError, or nil if none found.
func (m *DeleteCrudRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCrudRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCrudRequestMultiError(errors)
	}

	return nil
}

// DeleteCrudRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteCrudRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteCrudRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCrudRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCrudRequestMultiError) AllErrors() []error { return m }

// DeleteCrudRequestValidationError is the validation error returned by
// DeleteCrudRequest.Validate if the designated constraints aren't met.
type DeleteCrudRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCrudRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCrudRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCrudRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCrudRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCrudRequestValidationError) ErrorName() string {
	return "DeleteCrudRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCrudRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCrudRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCrudRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCrudRequestValidationError{}

// Validate checks the field values on DeleteCrudReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCrudReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCrudReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCrudReplyMultiError, or nil if none found.
func (m *DeleteCrudReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCrudReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCrudReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCrudReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCrudReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteCrudReplyMultiError(errors)
	}

	return nil
}

// DeleteCrudReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteCrudReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteCrudReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCrudReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCrudReplyMultiError) AllErrors() []error { return m }

// DeleteCrudReplyValidationError is the validation error returned by
// DeleteCrudReply.Validate if the designated constraints aren't met.
type DeleteCrudReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCrudReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCrudReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCrudReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCrudReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCrudReplyValidationError) ErrorName() string { return "DeleteCrudReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteCrudReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCrudReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCrudReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCrudReplyValidationError{}

// Validate checks the field values on GetCrudRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCrudRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCrudRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCrudRequestMultiError,
// or nil if none found.
func (m *GetCrudRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCrudRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCrudRequestMultiError(errors)
	}

	return nil
}

// GetCrudRequestMultiError is an error wrapping multiple validation errors
// returned by GetCrudRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCrudRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCrudRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCrudRequestMultiError) AllErrors() []error { return m }

// GetCrudRequestValidationError is the validation error returned by
// GetCrudRequest.Validate if the designated constraints aren't met.
type GetCrudRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCrudRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCrudRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCrudRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCrudRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCrudRequestValidationError) ErrorName() string { return "GetCrudRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCrudRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCrudRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCrudRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCrudRequestValidationError{}

// Validate checks the field values on GetCrudReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCrudReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCrudReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCrudReplyMultiError, or
// nil if none found.
func (m *GetCrudReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCrudReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCrudReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCrudReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCrudReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCrudReplyMultiError(errors)
	}

	return nil
}

// GetCrudReplyMultiError is an error wrapping multiple validation errors
// returned by GetCrudReply.ValidateAll() if the designated constraints aren't met.
type GetCrudReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCrudReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCrudReplyMultiError) AllErrors() []error { return m }

// GetCrudReplyValidationError is the validation error returned by
// GetCrudReply.Validate if the designated constraints aren't met.
type GetCrudReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCrudReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCrudReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCrudReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCrudReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCrudReplyValidationError) ErrorName() string { return "GetCrudReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCrudReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCrudReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCrudReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCrudReplyValidationError{}
