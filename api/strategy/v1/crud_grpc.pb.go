// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: strategy/v1/crud.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrudClient is the client API for Crud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrudClient interface {
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleReply, error)
	UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleReply, error)
	DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleReply, error)
	RuleDetail(ctx context.Context, in *GetRuleDetailRequest, opts ...grpc.CallOption) (*GetRuleDetailReply, error)
	Strategies(ctx context.Context, in *StrategiesRequest, opts ...grpc.CallOption) (*StrategiesReply, error)
}

type crudClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudClient(cc grpc.ClientConnInterface) CrudClient {
	return &crudClient{cc}
}

func (c *crudClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleReply, error) {
	out := new(CreateRuleReply)
	err := c.cc.Invoke(ctx, "/api.strategy.v1.Crud/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleReply, error) {
	out := new(UpdateRuleReply)
	err := c.cc.Invoke(ctx, "/api.strategy.v1.Crud/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleReply, error) {
	out := new(DeleteRuleReply)
	err := c.cc.Invoke(ctx, "/api.strategy.v1.Crud/DeleteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) RuleDetail(ctx context.Context, in *GetRuleDetailRequest, opts ...grpc.CallOption) (*GetRuleDetailReply, error) {
	out := new(GetRuleDetailReply)
	err := c.cc.Invoke(ctx, "/api.strategy.v1.Crud/RuleDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) Strategies(ctx context.Context, in *StrategiesRequest, opts ...grpc.CallOption) (*StrategiesReply, error) {
	out := new(StrategiesReply)
	err := c.cc.Invoke(ctx, "/api.strategy.v1.Crud/Strategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudServer is the server API for Crud service.
// All implementations must embed UnimplementedCrudServer
// for forward compatibility
type CrudServer interface {
	CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleReply, error)
	UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleReply, error)
	DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleReply, error)
	RuleDetail(context.Context, *GetRuleDetailRequest) (*GetRuleDetailReply, error)
	Strategies(context.Context, *StrategiesRequest) (*StrategiesReply, error)
	mustEmbedUnimplementedCrudServer()
}

// UnimplementedCrudServer must be embedded to have forward compatible implementations.
type UnimplementedCrudServer struct {
}

func (UnimplementedCrudServer) CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedCrudServer) UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedCrudServer) DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (UnimplementedCrudServer) RuleDetail(context.Context, *GetRuleDetailRequest) (*GetRuleDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuleDetail not implemented")
}
func (UnimplementedCrudServer) Strategies(context.Context, *StrategiesRequest) (*StrategiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Strategies not implemented")
}
func (UnimplementedCrudServer) mustEmbedUnimplementedCrudServer() {}

// UnsafeCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrudServer will
// result in compilation errors.
type UnsafeCrudServer interface {
	mustEmbedUnimplementedCrudServer()
}

func RegisterCrudServer(s grpc.ServiceRegistrar, srv CrudServer) {
	s.RegisterService(&Crud_ServiceDesc, srv)
}

func _Crud_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.strategy.v1.Crud/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).CreateRule(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.strategy.v1.Crud/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).UpdateRule(ctx, req.(*UpdateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.strategy.v1.Crud/DeleteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).DeleteRule(ctx, req.(*DeleteRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_RuleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).RuleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.strategy.v1.Crud/RuleDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).RuleDetail(ctx, req.(*GetRuleDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_Strategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).Strategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.strategy.v1.Crud/Strategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).Strategies(ctx, req.(*StrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Crud_ServiceDesc is the grpc.ServiceDesc for Crud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.strategy.v1.Crud",
	HandlerType: (*CrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRule",
			Handler:    _Crud_CreateRule_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _Crud_UpdateRule_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _Crud_DeleteRule_Handler,
		},
		{
			MethodName: "RuleDetail",
			Handler:    _Crud_RuleDetail_Handler,
		},
		{
			MethodName: "Strategies",
			Handler:    _Crud_Strategies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strategy/v1/crud.proto",
}
