// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: strategy/v1/crud.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrudClient is the client API for Crud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrudClient interface {
	CreateCrud(ctx context.Context, in *CreateCrudRequest, opts ...grpc.CallOption) (*CreateCrudReply, error)
	UpdateCrud(ctx context.Context, in *UpdateCrudRequest, opts ...grpc.CallOption) (*UpdateCrudReply, error)
	DeleteCrud(ctx context.Context, in *DeleteCrudRequest, opts ...grpc.CallOption) (*DeleteCrudReply, error)
	GetCrud(ctx context.Context, in *GetCrudRequest, opts ...grpc.CallOption) (*GetCrudReply, error)
}

type crudClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudClient(cc grpc.ClientConnInterface) CrudClient {
	return &crudClient{cc}
}

func (c *crudClient) CreateCrud(ctx context.Context, in *CreateCrudRequest, opts ...grpc.CallOption) (*CreateCrudReply, error) {
	out := new(CreateCrudReply)
	err := c.cc.Invoke(ctx, "/api.strategy.v1.Crud/CreateCrud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) UpdateCrud(ctx context.Context, in *UpdateCrudRequest, opts ...grpc.CallOption) (*UpdateCrudReply, error) {
	out := new(UpdateCrudReply)
	err := c.cc.Invoke(ctx, "/api.strategy.v1.Crud/UpdateCrud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) DeleteCrud(ctx context.Context, in *DeleteCrudRequest, opts ...grpc.CallOption) (*DeleteCrudReply, error) {
	out := new(DeleteCrudReply)
	err := c.cc.Invoke(ctx, "/api.strategy.v1.Crud/DeleteCrud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) GetCrud(ctx context.Context, in *GetCrudRequest, opts ...grpc.CallOption) (*GetCrudReply, error) {
	out := new(GetCrudReply)
	err := c.cc.Invoke(ctx, "/api.strategy.v1.Crud/GetCrud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudServer is the server API for Crud service.
// All implementations must embed UnimplementedCrudServer
// for forward compatibility
type CrudServer interface {
	CreateCrud(context.Context, *CreateCrudRequest) (*CreateCrudReply, error)
	UpdateCrud(context.Context, *UpdateCrudRequest) (*UpdateCrudReply, error)
	DeleteCrud(context.Context, *DeleteCrudRequest) (*DeleteCrudReply, error)
	GetCrud(context.Context, *GetCrudRequest) (*GetCrudReply, error)
	mustEmbedUnimplementedCrudServer()
}

// UnimplementedCrudServer must be embedded to have forward compatible implementations.
type UnimplementedCrudServer struct {
}

func (UnimplementedCrudServer) CreateCrud(context.Context, *CreateCrudRequest) (*CreateCrudReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrud not implemented")
}
func (UnimplementedCrudServer) UpdateCrud(context.Context, *UpdateCrudRequest) (*UpdateCrudReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrud not implemented")
}
func (UnimplementedCrudServer) DeleteCrud(context.Context, *DeleteCrudRequest) (*DeleteCrudReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrud not implemented")
}
func (UnimplementedCrudServer) GetCrud(context.Context, *GetCrudRequest) (*GetCrudReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrud not implemented")
}
func (UnimplementedCrudServer) mustEmbedUnimplementedCrudServer() {}

// UnsafeCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrudServer will
// result in compilation errors.
type UnsafeCrudServer interface {
	mustEmbedUnimplementedCrudServer()
}

func RegisterCrudServer(s grpc.ServiceRegistrar, srv CrudServer) {
	s.RegisterService(&Crud_ServiceDesc, srv)
}

func _Crud_CreateCrud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCrudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).CreateCrud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.strategy.v1.Crud/CreateCrud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).CreateCrud(ctx, req.(*CreateCrudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_UpdateCrud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCrudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).UpdateCrud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.strategy.v1.Crud/UpdateCrud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).UpdateCrud(ctx, req.(*UpdateCrudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_DeleteCrud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCrudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).DeleteCrud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.strategy.v1.Crud/DeleteCrud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).DeleteCrud(ctx, req.(*DeleteCrudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_GetCrud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).GetCrud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.strategy.v1.Crud/GetCrud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).GetCrud(ctx, req.(*GetCrudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Crud_ServiceDesc is the grpc.ServiceDesc for Crud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.strategy.v1.Crud",
	HandlerType: (*CrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCrud",
			Handler:    _Crud_CreateCrud_Handler,
		},
		{
			MethodName: "UpdateCrud",
			Handler:    _Crud_UpdateCrud_Handler,
		},
		{
			MethodName: "DeleteCrud",
			Handler:    _Crud_DeleteCrud_Handler,
		},
		{
			MethodName: "GetCrud",
			Handler:    _Crud_GetCrud_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strategy/v1/crud.proto",
}
