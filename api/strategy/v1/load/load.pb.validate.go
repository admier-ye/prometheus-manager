// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: strategy/v1/load/load.proto

package load

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReloadRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReloadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReloadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReloadRequestMultiError, or
// nil if none found.
func (m *ReloadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReloadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := ReloadRequestValidationError{
				field:  fmt.Sprintf("Nodes[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ReloadRequest_Nodes_Pattern.MatchString(item) {
			err := ReloadRequestValidationError{
				field:  fmt.Sprintf("Nodes[%v]", idx),
				reason: "value does not match regex pattern \"[a-zA-Z0-9-]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ReloadRequestMultiError(errors)
	}

	return nil
}

// ReloadRequestMultiError is an error wrapping multiple validation errors
// returned by ReloadRequest.ValidateAll() if the designated constraints
// aren't met.
type ReloadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReloadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReloadRequestMultiError) AllErrors() []error { return m }

// ReloadRequestValidationError is the validation error returned by
// ReloadRequest.Validate if the designated constraints aren't met.
type ReloadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReloadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReloadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReloadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReloadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReloadRequestValidationError) ErrorName() string { return "ReloadRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReloadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReloadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReloadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReloadRequestValidationError{}

var _ReloadRequest_Nodes_Pattern = regexp.MustCompile("[a-zA-Z0-9-]+$")

// Validate checks the field values on ReloadReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReloadReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReloadReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReloadReplyMultiError, or
// nil if none found.
func (m *ReloadReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReloadReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReloadReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReloadReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReloadReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return ReloadReplyMultiError(errors)
	}

	return nil
}

// ReloadReplyMultiError is an error wrapping multiple validation errors
// returned by ReloadReply.ValidateAll() if the designated constraints aren't met.
type ReloadReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReloadReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReloadReplyMultiError) AllErrors() []error { return m }

// ReloadReplyValidationError is the validation error returned by
// ReloadReply.Validate if the designated constraints aren't met.
type ReloadReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReloadReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReloadReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReloadReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReloadReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReloadReplyValidationError) ErrorName() string { return "ReloadReplyValidationError" }

// Error satisfies the builtin error interface
func (e ReloadReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReloadReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReloadReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReloadReplyValidationError{}
