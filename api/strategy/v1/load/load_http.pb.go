// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.4
// source: strategy/v1/load/load.proto

package load

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLoadReload = "/api.strategy.v1.load.Load/Reload"

type LoadHTTPServer interface {
	Reload(context.Context, *ReloadRequest) (*ReloadReply, error)
}

func RegisterLoadHTTPServer(s *http.Server, srv LoadHTTPServer) {
	r := s.Route("/")
	r.POST("/load/v1/reload", _Load_Reload0_HTTP_Handler(srv))
}

func _Load_Reload0_HTTP_Handler(srv LoadHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReloadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoadReload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Reload(ctx, req.(*ReloadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReloadReply)
		return ctx.Result(200, reply)
	}
}

type LoadHTTPClient interface {
	Reload(ctx context.Context, req *ReloadRequest, opts ...http.CallOption) (rsp *ReloadReply, err error)
}

type LoadHTTPClientImpl struct {
	cc *http.Client
}

func NewLoadHTTPClient(client *http.Client) LoadHTTPClient {
	return &LoadHTTPClientImpl{client}
}

func (c *LoadHTTPClientImpl) Reload(ctx context.Context, in *ReloadRequest, opts ...http.CallOption) (*ReloadReply, error) {
	var out ReloadReply
	pattern := "/load/v1/reload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLoadReload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
