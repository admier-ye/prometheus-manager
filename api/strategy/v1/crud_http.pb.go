// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.4
// source: strategy/v1/crud.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCrudCreateRule = "/api.strategy.v1.Crud/CreateRule"
const OperationCrudDeleteRule = "/api.strategy.v1.Crud/DeleteRule"
const OperationCrudRuleDetail = "/api.strategy.v1.Crud/RuleDetail"
const OperationCrudStrategies = "/api.strategy.v1.Crud/Strategies"
const OperationCrudUpdateRule = "/api.strategy.v1.Crud/UpdateRule"

type CrudHTTPServer interface {
	CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleReply, error)
	DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleReply, error)
	RuleDetail(context.Context, *GetRuleDetailRequest) (*GetRuleDetailReply, error)
	Strategies(context.Context, *StrategiesRequest) (*StrategiesReply, error)
	UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleReply, error)
}

func RegisterCrudHTTPServer(s *http.Server, srv CrudHTTPServer) {
	r := s.Route("/")
	r.POST("/rule/v1/add", _Crud_CreateRule0_HTTP_Handler(srv))
	r.PUT("/rule/v1/edit/{id}", _Crud_UpdateRule0_HTTP_Handler(srv))
	r.DELETE("/rule/v1/delete/{id}", _Crud_DeleteRule0_HTTP_Handler(srv))
	r.GET("/rule/v1/detail/{id}", _Crud_RuleDetail0_HTTP_Handler(srv))
	r.GET("/strategies/v1/{node_id}", _Crud_Strategies2_HTTP_Handler(srv))
}

func _Crud_CreateRule0_HTTP_Handler(srv CrudHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRuleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCrudCreateRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRule(ctx, req.(*CreateRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRuleReply)
		return ctx.Result(200, reply)
	}
}

func _Crud_UpdateRule0_HTTP_Handler(srv CrudHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRuleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCrudUpdateRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRule(ctx, req.(*UpdateRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRuleReply)
		return ctx.Result(200, reply)
	}
}

func _Crud_DeleteRule0_HTTP_Handler(srv CrudHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRuleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCrudDeleteRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRule(ctx, req.(*DeleteRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRuleReply)
		return ctx.Result(200, reply)
	}
}

func _Crud_RuleDetail0_HTTP_Handler(srv CrudHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRuleDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCrudRuleDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RuleDetail(ctx, req.(*GetRuleDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRuleDetailReply)
		return ctx.Result(200, reply)
	}
}

func _Crud_Strategies2_HTTP_Handler(srv CrudHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StrategiesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCrudStrategies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Strategies(ctx, req.(*StrategiesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StrategiesReply)
		return ctx.Result(200, reply)
	}
}

type CrudHTTPClient interface {
	CreateRule(ctx context.Context, req *CreateRuleRequest, opts ...http.CallOption) (rsp *CreateRuleReply, err error)
	DeleteRule(ctx context.Context, req *DeleteRuleRequest, opts ...http.CallOption) (rsp *DeleteRuleReply, err error)
	RuleDetail(ctx context.Context, req *GetRuleDetailRequest, opts ...http.CallOption) (rsp *GetRuleDetailReply, err error)
	Strategies(ctx context.Context, req *StrategiesRequest, opts ...http.CallOption) (rsp *StrategiesReply, err error)
	UpdateRule(ctx context.Context, req *UpdateRuleRequest, opts ...http.CallOption) (rsp *UpdateRuleReply, err error)
}

type CrudHTTPClientImpl struct {
	cc *http.Client
}

func NewCrudHTTPClient(client *http.Client) CrudHTTPClient {
	return &CrudHTTPClientImpl{client}
}

func (c *CrudHTTPClientImpl) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...http.CallOption) (*CreateRuleReply, error) {
	var out CreateRuleReply
	pattern := "/rule/v1/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCrudCreateRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CrudHTTPClientImpl) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...http.CallOption) (*DeleteRuleReply, error) {
	var out DeleteRuleReply
	pattern := "/rule/v1/delete/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCrudDeleteRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CrudHTTPClientImpl) RuleDetail(ctx context.Context, in *GetRuleDetailRequest, opts ...http.CallOption) (*GetRuleDetailReply, error) {
	var out GetRuleDetailReply
	pattern := "/rule/v1/detail/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCrudRuleDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CrudHTTPClientImpl) Strategies(ctx context.Context, in *StrategiesRequest, opts ...http.CallOption) (*StrategiesReply, error) {
	var out StrategiesReply
	pattern := "/strategies/v1/{node_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCrudStrategies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CrudHTTPClientImpl) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...http.CallOption) (*UpdateRuleReply, error) {
	var out UpdateRuleReply
	pattern := "/rule/v1/edit/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCrudUpdateRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
