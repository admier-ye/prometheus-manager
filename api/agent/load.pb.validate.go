// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: agent/load.proto

package agent

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StrategyGroupAllRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrategyGroupAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategyGroupAllRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategyGroupAllRequestMultiError, or nil if none found.
func (m *StrategyGroupAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategyGroupAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StrategyGroupAllRequestMultiError(errors)
	}

	return nil
}

// StrategyGroupAllRequestMultiError is an error wrapping multiple validation
// errors returned by StrategyGroupAllRequest.ValidateAll() if the designated
// constraints aren't met.
type StrategyGroupAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategyGroupAllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategyGroupAllRequestMultiError) AllErrors() []error { return m }

// StrategyGroupAllRequestValidationError is the validation error returned by
// StrategyGroupAllRequest.Validate if the designated constraints aren't met.
type StrategyGroupAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategyGroupAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategyGroupAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategyGroupAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategyGroupAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategyGroupAllRequestValidationError) ErrorName() string {
	return "StrategyGroupAllRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StrategyGroupAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategyGroupAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategyGroupAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategyGroupAllRequestValidationError{}

// Validate checks the field values on StrategyGroupAllReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrategyGroupAllReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategyGroupAllReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategyGroupAllReplyMultiError, or nil if none found.
func (m *StrategyGroupAllReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategyGroupAllReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroupList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StrategyGroupAllReplyValidationError{
						field:  fmt.Sprintf("GroupList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StrategyGroupAllReplyValidationError{
						field:  fmt.Sprintf("GroupList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StrategyGroupAllReplyValidationError{
					field:  fmt.Sprintf("GroupList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StrategyGroupAllReplyMultiError(errors)
	}

	return nil
}

// StrategyGroupAllReplyMultiError is an error wrapping multiple validation
// errors returned by StrategyGroupAllReply.ValidateAll() if the designated
// constraints aren't met.
type StrategyGroupAllReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategyGroupAllReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategyGroupAllReplyMultiError) AllErrors() []error { return m }

// StrategyGroupAllReplyValidationError is the validation error returned by
// StrategyGroupAllReply.Validate if the designated constraints aren't met.
type StrategyGroupAllReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategyGroupAllReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategyGroupAllReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategyGroupAllReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategyGroupAllReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategyGroupAllReplyValidationError) ErrorName() string {
	return "StrategyGroupAllReplyValidationError"
}

// Error satisfies the builtin error interface
func (e StrategyGroupAllReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategyGroupAllReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategyGroupAllReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategyGroupAllReplyValidationError{}

// Validate checks the field values on GroupSimple with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupSimple) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupSimple with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupSimpleMultiError, or
// nil if none found.
func (m *GroupSimple) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupSimple) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	for idx, item := range m.GetStrategies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupSimpleValidationError{
						field:  fmt.Sprintf("Strategies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupSimpleValidationError{
						field:  fmt.Sprintf("Strategies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupSimpleValidationError{
					field:  fmt.Sprintf("Strategies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupSimpleMultiError(errors)
	}

	return nil
}

// GroupSimpleMultiError is an error wrapping multiple validation errors
// returned by GroupSimple.ValidateAll() if the designated constraints aren't met.
type GroupSimpleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupSimpleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupSimpleMultiError) AllErrors() []error { return m }

// GroupSimpleValidationError is the validation error returned by
// GroupSimple.Validate if the designated constraints aren't met.
type GroupSimpleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupSimpleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupSimpleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupSimpleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupSimpleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupSimpleValidationError) ErrorName() string { return "GroupSimpleValidationError" }

// Error satisfies the builtin error interface
func (e GroupSimpleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupSimple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupSimpleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupSimpleValidationError{}

// Validate checks the field values on StrategySimple with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StrategySimple) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategySimple with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StrategySimpleMultiError,
// or nil if none found.
func (m *StrategySimple) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategySimple) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Alert

	// no validation rules for Expr

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrategySimpleValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrategySimpleValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrategySimpleValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for GroupId

	// no validation rules for AlarmLevelId

	if len(errors) > 0 {
		return StrategySimpleMultiError(errors)
	}

	return nil
}

// StrategySimpleMultiError is an error wrapping multiple validation errors
// returned by StrategySimple.ValidateAll() if the designated constraints
// aren't met.
type StrategySimpleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategySimpleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategySimpleMultiError) AllErrors() []error { return m }

// StrategySimpleValidationError is the validation error returned by
// StrategySimple.Validate if the designated constraints aren't met.
type StrategySimpleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategySimpleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategySimpleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategySimpleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategySimpleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategySimpleValidationError) ErrorName() string { return "StrategySimpleValidationError" }

// Error satisfies the builtin error interface
func (e StrategySimpleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategySimple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategySimpleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategySimpleValidationError{}

// Validate checks the field values on StrategyGroupDiffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrategyGroupDiffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategyGroupDiffRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategyGroupDiffRequestMultiError, or nil if none found.
func (m *StrategyGroupDiffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategyGroupDiffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StrategyGroupDiffRequestMultiError(errors)
	}

	return nil
}

// StrategyGroupDiffRequestMultiError is an error wrapping multiple validation
// errors returned by StrategyGroupDiffRequest.ValidateAll() if the designated
// constraints aren't met.
type StrategyGroupDiffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategyGroupDiffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategyGroupDiffRequestMultiError) AllErrors() []error { return m }

// StrategyGroupDiffRequestValidationError is the validation error returned by
// StrategyGroupDiffRequest.Validate if the designated constraints aren't met.
type StrategyGroupDiffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategyGroupDiffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategyGroupDiffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategyGroupDiffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategyGroupDiffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategyGroupDiffRequestValidationError) ErrorName() string {
	return "StrategyGroupDiffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StrategyGroupDiffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategyGroupDiffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategyGroupDiffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategyGroupDiffRequestValidationError{}

// Validate checks the field values on StrategyGroupDiffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrategyGroupDiffReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategyGroupDiffReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategyGroupDiffReplyMultiError, or nil if none found.
func (m *StrategyGroupDiffReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategyGroupDiffReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAppendItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StrategyGroupDiffReplyValidationError{
						field:  fmt.Sprintf("AppendItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StrategyGroupDiffReplyValidationError{
						field:  fmt.Sprintf("AppendItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StrategyGroupDiffReplyValidationError{
					field:  fmt.Sprintf("AppendItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDeleteItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StrategyGroupDiffReplyValidationError{
						field:  fmt.Sprintf("DeleteItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StrategyGroupDiffReplyValidationError{
						field:  fmt.Sprintf("DeleteItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StrategyGroupDiffReplyValidationError{
					field:  fmt.Sprintf("DeleteItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUpdateItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StrategyGroupDiffReplyValidationError{
						field:  fmt.Sprintf("UpdateItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StrategyGroupDiffReplyValidationError{
						field:  fmt.Sprintf("UpdateItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StrategyGroupDiffReplyValidationError{
					field:  fmt.Sprintf("UpdateItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StrategyGroupDiffReplyMultiError(errors)
	}

	return nil
}

// StrategyGroupDiffReplyMultiError is an error wrapping multiple validation
// errors returned by StrategyGroupDiffReply.ValidateAll() if the designated
// constraints aren't met.
type StrategyGroupDiffReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategyGroupDiffReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategyGroupDiffReplyMultiError) AllErrors() []error { return m }

// StrategyGroupDiffReplyValidationError is the validation error returned by
// StrategyGroupDiffReply.Validate if the designated constraints aren't met.
type StrategyGroupDiffReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategyGroupDiffReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategyGroupDiffReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategyGroupDiffReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategyGroupDiffReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategyGroupDiffReplyValidationError) ErrorName() string {
	return "StrategyGroupDiffReplyValidationError"
}

// Error satisfies the builtin error interface
func (e StrategyGroupDiffReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategyGroupDiffReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategyGroupDiffReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategyGroupDiffReplyValidationError{}

// Validate checks the field values on EvaluateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EvaluateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvaluateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EvaluateRequestMultiError, or nil if none found.
func (m *EvaluateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EvaluateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EvaluateRequestValidationError{
					field:  "GroupList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EvaluateRequestValidationError{
					field:  "GroupList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EvaluateRequestValidationError{
				field:  "GroupList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EvaluateRequestMultiError(errors)
	}

	return nil
}

// EvaluateRequestMultiError is an error wrapping multiple validation errors
// returned by EvaluateRequest.ValidateAll() if the designated constraints
// aren't met.
type EvaluateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvaluateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvaluateRequestMultiError) AllErrors() []error { return m }

// EvaluateRequestValidationError is the validation error returned by
// EvaluateRequest.Validate if the designated constraints aren't met.
type EvaluateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvaluateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvaluateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvaluateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvaluateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvaluateRequestValidationError) ErrorName() string { return "EvaluateRequestValidationError" }

// Error satisfies the builtin error interface
func (e EvaluateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvaluateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvaluateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvaluateRequestValidationError{}

// Validate checks the field values on EvaluateReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EvaluateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvaluateReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EvaluateReplyMultiError, or
// nil if none found.
func (m *EvaluateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EvaluateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EvaluateReplyMultiError(errors)
	}

	return nil
}

// EvaluateReplyMultiError is an error wrapping multiple validation errors
// returned by EvaluateReply.ValidateAll() if the designated constraints
// aren't met.
type EvaluateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvaluateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvaluateReplyMultiError) AllErrors() []error { return m }

// EvaluateReplyValidationError is the validation error returned by
// EvaluateReply.Validate if the designated constraints aren't met.
type EvaluateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvaluateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvaluateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvaluateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvaluateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvaluateReplyValidationError) ErrorName() string { return "EvaluateReplyValidationError" }

// Error satisfies the builtin error interface
func (e EvaluateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvaluateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvaluateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvaluateReplyValidationError{}
