// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: agent/alarm.proto

package agent

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PushRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushRequestMultiError, or
// nil if none found.
func (m *PushRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroup() == nil {
		err := PushRequestValidationError{
			field:  "Group",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushRequestValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushRequestValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushRequestValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushRequestMultiError(errors)
	}

	return nil
}

// PushRequestMultiError is an error wrapping multiple validation errors
// returned by PushRequest.ValidateAll() if the designated constraints aren't met.
type PushRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushRequestMultiError) AllErrors() []error { return m }

// PushRequestValidationError is the validation error returned by
// PushRequest.Validate if the designated constraints aren't met.
type PushRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushRequestValidationError) ErrorName() string { return "PushRequestValidationError" }

// Error satisfies the builtin error interface
func (e PushRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushRequestValidationError{}

// Validate checks the field values on PushReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushReplyMultiError, or nil
// if none found.
func (m *PushReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PushReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushReplyMultiError(errors)
	}

	return nil
}

// PushReplyMultiError is an error wrapping multiple validation errors returned
// by PushReply.ValidateAll() if the designated constraints aren't met.
type PushReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushReplyMultiError) AllErrors() []error { return m }

// PushReplyValidationError is the validation error returned by
// PushReply.Validate if the designated constraints aren't met.
type PushReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushReplyValidationError) ErrorName() string { return "PushReplyValidationError" }

// Error satisfies the builtin error interface
func (e PushReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushReplyValidationError{}

// Validate checks the field values on AlarmGroup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlarmGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlarmGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlarmGroupMultiError, or
// nil if none found.
func (m *AlarmGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *AlarmGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStrategyGroupId() <= 0 {
		err := AlarmGroupValidationError{
			field:  "StrategyGroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAlarms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlarmGroupValidationError{
						field:  fmt.Sprintf("Alarms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlarmGroupValidationError{
						field:  fmt.Sprintf("Alarms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlarmGroupValidationError{
					field:  fmt.Sprintf("Alarms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AlarmGroupMultiError(errors)
	}

	return nil
}

// AlarmGroupMultiError is an error wrapping multiple validation errors
// returned by AlarmGroup.ValidateAll() if the designated constraints aren't met.
type AlarmGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlarmGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlarmGroupMultiError) AllErrors() []error { return m }

// AlarmGroupValidationError is the validation error returned by
// AlarmGroup.Validate if the designated constraints aren't met.
type AlarmGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlarmGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlarmGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlarmGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlarmGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlarmGroupValidationError) ErrorName() string { return "AlarmGroupValidationError" }

// Error satisfies the builtin error interface
func (e AlarmGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlarmGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlarmGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlarmGroupValidationError{}

// Validate checks the field values on AlarmInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlarmInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlarmInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlarmInfoMultiError, or nil
// if none found.
func (m *AlarmInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AlarmInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Metric

	if len(m.GetValue()) != 2 {
		err := AlarmInfoValidationError{
			field:  "Value",
			reason: "value must contain exactly 2 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStrategyId() <= 0 {
		err := AlarmInfoValidationError{
			field:  "StrategyId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Expr

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlarmInfoValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlarmInfoValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlarmInfoValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AlarmInfoMultiError(errors)
	}

	return nil
}

// AlarmInfoMultiError is an error wrapping multiple validation errors returned
// by AlarmInfo.ValidateAll() if the designated constraints aren't met.
type AlarmInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlarmInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlarmInfoMultiError) AllErrors() []error { return m }

// AlarmInfoValidationError is the validation error returned by
// AlarmInfo.Validate if the designated constraints aren't met.
type AlarmInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlarmInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlarmInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlarmInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlarmInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlarmInfoValidationError) ErrorName() string { return "AlarmInfoValidationError" }

// Error satisfies the builtin error interface
func (e AlarmInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlarmInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlarmInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlarmInfoValidationError{}
