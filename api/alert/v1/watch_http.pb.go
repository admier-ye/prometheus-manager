// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.4
// source: alert/v1/watch.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWatchWatchAlert = "/api.alert.v1.Watch/WatchAlert"

type WatchHTTPServer interface {
	WatchAlert(context.Context, *WatchRequest) (*WatchReply, error)
}

func RegisterWatchHTTPServer(s *http.Server, srv WatchHTTPServer) {
	r := s.Route("/")
	r.POST("/alert/v1/watch", _Watch_WatchAlert0_HTTP_Handler(srv))
}

func _Watch_WatchAlert0_HTTP_Handler(srv WatchHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WatchRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWatchWatchAlert)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WatchAlert(ctx, req.(*WatchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WatchReply)
		return ctx.Result(200, reply)
	}
}

type WatchHTTPClient interface {
	WatchAlert(ctx context.Context, req *WatchRequest, opts ...http.CallOption) (rsp *WatchReply, err error)
}

type WatchHTTPClientImpl struct {
	cc *http.Client
}

func NewWatchHTTPClient(client *http.Client) WatchHTTPClient {
	return &WatchHTTPClientImpl{client}
}

func (c *WatchHTTPClientImpl) WatchAlert(ctx context.Context, in *WatchRequest, opts ...http.CallOption) (*WatchReply, error) {
	var out WatchReply
	pattern := "/alert/v1/watch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWatchWatchAlert))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
