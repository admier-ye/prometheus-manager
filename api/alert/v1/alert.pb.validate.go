// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: alert/v1/alert.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WebhookRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WebhookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebhookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WebhookRequestMultiError,
// or nil if none found.
func (m *WebhookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WebhookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Receiver

	// no validation rules for Status

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebhookRequestValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebhookRequestValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebhookRequestValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GroupLabels

	// no validation rules for CommonLabels

	// no validation rules for CommonAnnotations

	// no validation rules for ExternalURL

	// no validation rules for Version

	// no validation rules for GroupKey

	// no validation rules for TruncatedAlerts

	if len(errors) > 0 {
		return WebhookRequestMultiError(errors)
	}

	return nil
}

// WebhookRequestMultiError is an error wrapping multiple validation errors
// returned by WebhookRequest.ValidateAll() if the designated constraints
// aren't met.
type WebhookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebhookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebhookRequestMultiError) AllErrors() []error { return m }

// WebhookRequestValidationError is the validation error returned by
// WebhookRequest.Validate if the designated constraints aren't met.
type WebhookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebhookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebhookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebhookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebhookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebhookRequestValidationError) ErrorName() string { return "WebhookRequestValidationError" }

// Error satisfies the builtin error interface
func (e WebhookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebhookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebhookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebhookRequestValidationError{}

// Validate checks the field values on WebhookReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WebhookReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebhookReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WebhookReplyMultiError, or
// nil if none found.
func (m *WebhookReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WebhookReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebhookReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebhookReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebhookReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WebhookReplyMultiError(errors)
	}

	return nil
}

// WebhookReplyMultiError is an error wrapping multiple validation errors
// returned by WebhookReply.ValidateAll() if the designated constraints aren't met.
type WebhookReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebhookReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebhookReplyMultiError) AllErrors() []error { return m }

// WebhookReplyValidationError is the validation error returned by
// WebhookReply.Validate if the designated constraints aren't met.
type WebhookReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebhookReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebhookReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebhookReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebhookReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebhookReplyValidationError) ErrorName() string { return "WebhookReplyValidationError" }

// Error satisfies the builtin error interface
func (e WebhookReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebhookReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebhookReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebhookReplyValidationError{}

// Validate checks the field values on WebhookRequest_AlertInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WebhookRequest_AlertInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebhookRequest_AlertInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebhookRequest_AlertInfoMultiError, or nil if none found.
func (m *WebhookRequest_AlertInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *WebhookRequest_AlertInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for StartsAt

	// no validation rules for EndsAt

	// no validation rules for GeneratorURL

	// no validation rules for Fingerprint

	if len(errors) > 0 {
		return WebhookRequest_AlertInfoMultiError(errors)
	}

	return nil
}

// WebhookRequest_AlertInfoMultiError is an error wrapping multiple validation
// errors returned by WebhookRequest_AlertInfo.ValidateAll() if the designated
// constraints aren't met.
type WebhookRequest_AlertInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebhookRequest_AlertInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebhookRequest_AlertInfoMultiError) AllErrors() []error { return m }

// WebhookRequest_AlertInfoValidationError is the validation error returned by
// WebhookRequest_AlertInfo.Validate if the designated constraints aren't met.
type WebhookRequest_AlertInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebhookRequest_AlertInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebhookRequest_AlertInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebhookRequest_AlertInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebhookRequest_AlertInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebhookRequest_AlertInfoValidationError) ErrorName() string {
	return "WebhookRequest_AlertInfoValidationError"
}

// Error satisfies the builtin error interface
func (e WebhookRequest_AlertInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebhookRequest_AlertInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebhookRequest_AlertInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebhookRequest_AlertInfoValidationError{}
