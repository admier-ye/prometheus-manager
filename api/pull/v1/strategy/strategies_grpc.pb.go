// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pull/v1/strategy/strategies.proto

package strategy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StrategiesClient is the client API for Strategies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrategiesClient interface {
	CreateStrategies(ctx context.Context, in *CreateStrategiesRequest, opts ...grpc.CallOption) (*CreateStrategiesReply, error)
	UpdateStrategies(ctx context.Context, in *UpdateStrategiesRequest, opts ...grpc.CallOption) (*UpdateStrategiesReply, error)
	DeleteStrategies(ctx context.Context, in *DeleteStrategiesRequest, opts ...grpc.CallOption) (*DeleteStrategiesReply, error)
	GetStrategies(ctx context.Context, in *GetStrategiesRequest, opts ...grpc.CallOption) (*GetStrategiesReply, error)
	ListStrategies(ctx context.Context, in *ListStrategiesRequest, opts ...grpc.CallOption) (*ListStrategiesReply, error)
}

type strategiesClient struct {
	cc grpc.ClientConnInterface
}

func NewStrategiesClient(cc grpc.ClientConnInterface) StrategiesClient {
	return &strategiesClient{cc}
}

func (c *strategiesClient) CreateStrategies(ctx context.Context, in *CreateStrategiesRequest, opts ...grpc.CallOption) (*CreateStrategiesReply, error) {
	out := new(CreateStrategiesReply)
	err := c.cc.Invoke(ctx, "/api.pull.v1.strategy.Strategies/CreateStrategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategiesClient) UpdateStrategies(ctx context.Context, in *UpdateStrategiesRequest, opts ...grpc.CallOption) (*UpdateStrategiesReply, error) {
	out := new(UpdateStrategiesReply)
	err := c.cc.Invoke(ctx, "/api.pull.v1.strategy.Strategies/UpdateStrategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategiesClient) DeleteStrategies(ctx context.Context, in *DeleteStrategiesRequest, opts ...grpc.CallOption) (*DeleteStrategiesReply, error) {
	out := new(DeleteStrategiesReply)
	err := c.cc.Invoke(ctx, "/api.pull.v1.strategy.Strategies/DeleteStrategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategiesClient) GetStrategies(ctx context.Context, in *GetStrategiesRequest, opts ...grpc.CallOption) (*GetStrategiesReply, error) {
	out := new(GetStrategiesReply)
	err := c.cc.Invoke(ctx, "/api.pull.v1.strategy.Strategies/GetStrategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategiesClient) ListStrategies(ctx context.Context, in *ListStrategiesRequest, opts ...grpc.CallOption) (*ListStrategiesReply, error) {
	out := new(ListStrategiesReply)
	err := c.cc.Invoke(ctx, "/api.pull.v1.strategy.Strategies/ListStrategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrategiesServer is the server API for Strategies service.
// All implementations must embed UnimplementedStrategiesServer
// for forward compatibility
type StrategiesServer interface {
	CreateStrategies(context.Context, *CreateStrategiesRequest) (*CreateStrategiesReply, error)
	UpdateStrategies(context.Context, *UpdateStrategiesRequest) (*UpdateStrategiesReply, error)
	DeleteStrategies(context.Context, *DeleteStrategiesRequest) (*DeleteStrategiesReply, error)
	GetStrategies(context.Context, *GetStrategiesRequest) (*GetStrategiesReply, error)
	ListStrategies(context.Context, *ListStrategiesRequest) (*ListStrategiesReply, error)
	mustEmbedUnimplementedStrategiesServer()
}

// UnimplementedStrategiesServer must be embedded to have forward compatible implementations.
type UnimplementedStrategiesServer struct {
}

func (UnimplementedStrategiesServer) CreateStrategies(context.Context, *CreateStrategiesRequest) (*CreateStrategiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStrategies not implemented")
}
func (UnimplementedStrategiesServer) UpdateStrategies(context.Context, *UpdateStrategiesRequest) (*UpdateStrategiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStrategies not implemented")
}
func (UnimplementedStrategiesServer) DeleteStrategies(context.Context, *DeleteStrategiesRequest) (*DeleteStrategiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStrategies not implemented")
}
func (UnimplementedStrategiesServer) GetStrategies(context.Context, *GetStrategiesRequest) (*GetStrategiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategies not implemented")
}
func (UnimplementedStrategiesServer) ListStrategies(context.Context, *ListStrategiesRequest) (*ListStrategiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStrategies not implemented")
}
func (UnimplementedStrategiesServer) mustEmbedUnimplementedStrategiesServer() {}

// UnsafeStrategiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrategiesServer will
// result in compilation errors.
type UnsafeStrategiesServer interface {
	mustEmbedUnimplementedStrategiesServer()
}

func RegisterStrategiesServer(s grpc.ServiceRegistrar, srv StrategiesServer) {
	s.RegisterService(&Strategies_ServiceDesc, srv)
}

func _Strategies_CreateStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategiesServer).CreateStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pull.v1.strategy.Strategies/CreateStrategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategiesServer).CreateStrategies(ctx, req.(*CreateStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategies_UpdateStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategiesServer).UpdateStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pull.v1.strategy.Strategies/UpdateStrategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategiesServer).UpdateStrategies(ctx, req.(*UpdateStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategies_DeleteStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategiesServer).DeleteStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pull.v1.strategy.Strategies/DeleteStrategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategiesServer).DeleteStrategies(ctx, req.(*DeleteStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategies_GetStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategiesServer).GetStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pull.v1.strategy.Strategies/GetStrategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategiesServer).GetStrategies(ctx, req.(*GetStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategies_ListStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategiesServer).ListStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pull.v1.strategy.Strategies/ListStrategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategiesServer).ListStrategies(ctx, req.(*ListStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Strategies_ServiceDesc is the grpc.ServiceDesc for Strategies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Strategies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.pull.v1.strategy.Strategies",
	HandlerType: (*StrategiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStrategies",
			Handler:    _Strategies_CreateStrategies_Handler,
		},
		{
			MethodName: "UpdateStrategies",
			Handler:    _Strategies_UpdateStrategies_Handler,
		},
		{
			MethodName: "DeleteStrategies",
			Handler:    _Strategies_DeleteStrategies_Handler,
		},
		{
			MethodName: "GetStrategies",
			Handler:    _Strategies_GetStrategies_Handler,
		},
		{
			MethodName: "ListStrategies",
			Handler:    _Strategies_ListStrategies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pull/v1/strategy/strategies.proto",
}
