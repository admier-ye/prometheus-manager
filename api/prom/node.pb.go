// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: prom/node.proto

package prom

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Category int32

const (
	// 未知
	Category_CATEGORY_NONE Category = 0
	// 规则组类型
	Category_CATEGORY_GROUP Category = 1
	// 套餐类型
	Category_CATEGORY_COMBO Category = 2
	// 规则类型
	Category_CATEGORY_STRATEGY Category = 3
	// 告警等级
	Category_CATEGORY_ALERT_LEVEL Category = 4
	// 告警通知方式
	Category_CATEGORY_ALERT_NOTIFY Category = 5
)

// Enum value maps for Category.
var (
	Category_name = map[int32]string{
		0: "CATEGORY_NONE",
		1: "CATEGORY_GROUP",
		2: "CATEGORY_COMBO",
		3: "CATEGORY_STRATEGY",
		4: "CATEGORY_ALERT_LEVEL",
		5: "CATEGORY_ALERT_NOTIFY",
	}
	Category_value = map[string]int32{
		"CATEGORY_NONE":         0,
		"CATEGORY_GROUP":        1,
		"CATEGORY_COMBO":        2,
		"CATEGORY_STRATEGY":     3,
		"CATEGORY_ALERT_LEVEL":  4,
		"CATEGORY_ALERT_NOTIFY": 5,
	}
)

func (x Category) Enum() *Category {
	p := new(Category)
	*p = x
	return p
}

func (x Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category) Descriptor() protoreflect.EnumDescriptor {
	return file_prom_node_proto_enumTypes[0].Descriptor()
}

func (Category) Type() protoreflect.EnumType {
	return &file_prom_node_proto_enumTypes[0]
}

func (x Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category.Descriptor instead.
func (Category) EnumDescriptor() ([]byte, []int) {
	return file_prom_node_proto_rawDescGZIP(), []int{0}
}

type Status int32

const (
	// 未知
	Status_Status_NONE Status = 0
	// 启用
	Status_Status_ENABLE Status = 1
	// 禁用
	Status_Status_DISABLE Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "Status_NONE",
		1: "Status_ENABLE",
		2: "Status_DISABLE",
	}
	Status_value = map[string]int32{
		"Status_NONE":    0,
		"Status_ENABLE":  1,
		"Status_DISABLE": 2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_prom_node_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_prom_node_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_prom_node_proto_rawDescGZIP(), []int{1}
}

type DictItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Remark    string   `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`
	CreatedAt int64    `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64    `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Category  Category `protobuf:"varint,7,opt,name=category,proto3,enum=api.prom.Category" json:"category,omitempty"`
	Color     string   `protobuf:"bytes,8,opt,name=color,proto3" json:"color,omitempty"`
	Status    Status   `protobuf:"varint,9,opt,name=status,proto3,enum=api.prom.Status" json:"status,omitempty"`
	Id        int32    `protobuf:"varint,99,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DictItem) Reset() {
	*x = DictItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prom_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictItem) ProtoMessage() {}

func (x *DictItem) ProtoReflect() protoreflect.Message {
	mi := &file_prom_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictItem.ProtoReflect.Descriptor instead.
func (*DictItem) Descriptor() ([]byte, []int) {
	return file_prom_node_proto_rawDescGZIP(), []int{0}
}

func (x *DictItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DictItem) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *DictItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DictItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *DictItem) GetCategory() Category {
	if x != nil {
		return x.Category
	}
	return Category_CATEGORY_NONE
}

func (x *DictItem) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *DictItem) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_Status_NONE
}

func (x *DictItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AlarmPageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Remark    string `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`
	Icon      string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Color     string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	CreatedAt int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status    Status `protobuf:"varint,7,opt,name=status,proto3,enum=api.prom.Status" json:"status,omitempty"`
	Id        int32  `protobuf:"varint,99,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AlarmPageItem) Reset() {
	*x = AlarmPageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prom_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmPageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmPageItem) ProtoMessage() {}

func (x *AlarmPageItem) ProtoReflect() protoreflect.Message {
	mi := &file_prom_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmPageItem.ProtoReflect.Descriptor instead.
func (*AlarmPageItem) Descriptor() ([]byte, []int) {
	return file_prom_node_proto_rawDescGZIP(), []int{1}
}

func (x *AlarmPageItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlarmPageItem) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AlarmPageItem) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AlarmPageItem) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *AlarmPageItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AlarmPageItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AlarmPageItem) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_Status_NONE
}

func (x *AlarmPageItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GroupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Remark         string          `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`
	CreatedAt      int64           `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      int64           `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	PromStrategies []*StrategyItem `protobuf:"bytes,7,rep,name=prom_strategies,json=promStrategies,proto3" json:"prom_strategies,omitempty"`
	Categories     []*DictItem     `protobuf:"bytes,8,rep,name=categories,proto3" json:"categories,omitempty"`
	StrategyCount  int64           `protobuf:"varint,9,opt,name=strategy_count,json=strategyCount,proto3" json:"strategy_count,omitempty"`
	// 规则组类型
	CategoriesIds []int32 `protobuf:"varint,10,rep,packed,name=categories_ids,json=categoriesIds,proto3" json:"categories_ids,omitempty"`
	// 状态
	Status Status `protobuf:"varint,11,opt,name=status,proto3,enum=api.prom.Status" json:"status,omitempty"`
	Id     int32  `protobuf:"varint,99,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GroupItem) Reset() {
	*x = GroupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prom_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupItem) ProtoMessage() {}

func (x *GroupItem) ProtoReflect() protoreflect.Message {
	mi := &file_prom_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupItem.ProtoReflect.Descriptor instead.
func (*GroupItem) Descriptor() ([]byte, []int) {
	return file_prom_node_proto_rawDescGZIP(), []int{2}
}

func (x *GroupItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupItem) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *GroupItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GroupItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *GroupItem) GetPromStrategies() []*StrategyItem {
	if x != nil {
		return x.PromStrategies
	}
	return nil
}

func (x *GroupItem) GetCategories() []*DictItem {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *GroupItem) GetStrategyCount() int64 {
	if x != nil {
		return x.StrategyCount
	}
	return 0
}

func (x *GroupItem) GetCategoriesIds() []int32 {
	if x != nil {
		return x.CategoriesIds
	}
	return nil
}

func (x *GroupItem) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_Status_NONE
}

func (x *GroupItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GroupSimpleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GroupSimpleItem) Reset() {
	*x = GroupSimpleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prom_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupSimpleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSimpleItem) ProtoMessage() {}

func (x *GroupSimpleItem) ProtoReflect() protoreflect.Message {
	mi := &file_prom_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSimpleItem.ProtoReflect.Descriptor instead.
func (*GroupSimpleItem) Descriptor() ([]byte, []int) {
	return file_prom_node_proto_rawDescGZIP(), []int{3}
}

func (x *GroupSimpleItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupSimpleItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StrategyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId     int32             `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Alert       string            `protobuf:"bytes,2,opt,name=alert,proto3" json:"alert,omitempty"`
	Expr        string            `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
	For         string            `protobuf:"bytes,4,opt,name=for,proto3" json:"for,omitempty"`
	Labels      map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedAt   int64             `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   int64             `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// 规则类型
	Categories []*DictItem `protobuf:"bytes,9,rep,name=categories,proto3" json:"categories,omitempty"`
	// 默认要具备告警等级
	AlertLevelId int32     `protobuf:"varint,11,opt,name=alert_level_id,json=alertLevelId,proto3" json:"alert_level_id,omitempty"`
	AlertLevel   *DictItem `protobuf:"bytes,12,opt,name=alert_level,json=alertLevel,proto3" json:"alert_level,omitempty"`
	// 规则报警页面(告警信息出现的大盘页面)
	AlarmPageIds []int32          `protobuf:"varint,13,rep,packed,name=alarm_page_ids,json=alarmPageIds,proto3" json:"alarm_page_ids,omitempty"`
	AlarmPages   []*AlarmPageItem `protobuf:"bytes,14,rep,name=alarm_pages,json=alarmPages,proto3" json:"alarm_pages,omitempty"`
	// 状态
	Status       Status           `protobuf:"varint,15,opt,name=status,proto3,enum=api.prom.Status" json:"status,omitempty"`
	CategorieIds []int32          `protobuf:"varint,16,rep,packed,name=categorie_ids,json=categorieIds,proto3" json:"categorie_ids,omitempty"`
	Group        *GroupSimpleItem `protobuf:"bytes,17,opt,name=group,proto3" json:"group,omitempty"`
	Id           int32            `protobuf:"varint,99,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StrategyItem) Reset() {
	*x = StrategyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prom_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyItem) ProtoMessage() {}

func (x *StrategyItem) ProtoReflect() protoreflect.Message {
	mi := &file_prom_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyItem.ProtoReflect.Descriptor instead.
func (*StrategyItem) Descriptor() ([]byte, []int) {
	return file_prom_node_proto_rawDescGZIP(), []int{4}
}

func (x *StrategyItem) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *StrategyItem) GetAlert() string {
	if x != nil {
		return x.Alert
	}
	return ""
}

func (x *StrategyItem) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *StrategyItem) GetFor() string {
	if x != nil {
		return x.For
	}
	return ""
}

func (x *StrategyItem) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *StrategyItem) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *StrategyItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *StrategyItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *StrategyItem) GetCategories() []*DictItem {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *StrategyItem) GetAlertLevelId() int32 {
	if x != nil {
		return x.AlertLevelId
	}
	return 0
}

func (x *StrategyItem) GetAlertLevel() *DictItem {
	if x != nil {
		return x.AlertLevel
	}
	return nil
}

func (x *StrategyItem) GetAlarmPageIds() []int32 {
	if x != nil {
		return x.AlarmPageIds
	}
	return nil
}

func (x *StrategyItem) GetAlarmPages() []*AlarmPageItem {
	if x != nil {
		return x.AlarmPages
	}
	return nil
}

func (x *StrategyItem) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_Status_NONE
}

func (x *StrategyItem) GetCategorieIds() []int32 {
	if x != nil {
		return x.CategorieIds
	}
	return nil
}

func (x *StrategyItem) GetGroup() *GroupSimpleItem {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *StrategyItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ComboRuleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alert       string            `protobuf:"bytes,2,opt,name=alert,proto3" json:"alert,omitempty"`
	Expr        string            `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
	For         string            `protobuf:"bytes,4,opt,name=for,proto3" json:"for,omitempty"`
	Labels      map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedAt   int64             `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   int64             `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Id          int32             `protobuf:"varint,99,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ComboRuleItem) Reset() {
	*x = ComboRuleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prom_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComboRuleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComboRuleItem) ProtoMessage() {}

func (x *ComboRuleItem) ProtoReflect() protoreflect.Message {
	mi := &file_prom_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComboRuleItem.ProtoReflect.Descriptor instead.
func (*ComboRuleItem) Descriptor() ([]byte, []int) {
	return file_prom_node_proto_rawDescGZIP(), []int{5}
}

func (x *ComboRuleItem) GetAlert() string {
	if x != nil {
		return x.Alert
	}
	return ""
}

func (x *ComboRuleItem) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *ComboRuleItem) GetFor() string {
	if x != nil {
		return x.For
	}
	return ""
}

func (x *ComboRuleItem) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ComboRuleItem) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ComboRuleItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ComboRuleItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ComboRuleItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ComboItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Remark    string           `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`
	CreatedAt int64            `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64            `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Rules     []*ComboRuleItem `protobuf:"bytes,7,rep,name=rules,proto3" json:"rules,omitempty"`
	Id        int32            `protobuf:"varint,99,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ComboItem) Reset() {
	*x = ComboItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prom_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComboItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComboItem) ProtoMessage() {}

func (x *ComboItem) ProtoReflect() protoreflect.Message {
	mi := &file_prom_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComboItem.ProtoReflect.Descriptor instead.
func (*ComboItem) Descriptor() ([]byte, []int) {
	return file_prom_node_proto_rawDescGZIP(), []int{6}
}

func (x *ComboItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComboItem) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ComboItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ComboItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ComboItem) GetRules() []*ComboRuleItem {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *ComboItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_prom_node_proto protoreflect.FileDescriptor

var file_prom_node_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x02, 0x0a, 0x08, 0x44, 0x69, 0x63, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xfa, 0x42, 0x09, 0x72, 0x07, 0x10, 0x01, 0x18, 0x40, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0xff, 0x01, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x8a, 0x02, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xfa, 0x42, 0x09, 0x72, 0x07, 0x10, 0x01, 0x18, 0x40, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0xff, 0x01, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8f, 0x03, 0x0a,
	0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x72, 0x07, 0x10,
	0x01, 0x18, 0x40, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42,
	0x0a, 0x72, 0x08, 0x10, 0x00, 0x18, 0xff, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x6d, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x35,
	0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x07, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x20,
	0x00, 0x40, 0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x05,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xfa, 0x42, 0x09,
	0x72, 0x07, 0x10, 0x01, 0x18, 0x40, 0xd0, 0x01, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x21, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x01, 0x18, 0x80, 0x20, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x12, 0x2c, 0x0a, 0x03, 0x66, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x01, 0x18, 0x40, 0x32, 0x0c, 0x5e, 0x5c, 0x64,
	0x2b, 0x28, 0x73, 0x7c, 0x6d, 0x7c, 0x68, 0x29, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x03, 0x66, 0x6f,
	0x72, 0x12, 0x54, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x9a, 0x01, 0x12, 0x22, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x40, 0x2a, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x30, 0x01, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x63, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x9a, 0x01, 0x12, 0x22, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x40, 0x2a, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x30, 0x01, 0x52,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x20, 0x00, 0x40,
	0x01, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e,
	0x44, 0x69, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x50, 0x61, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x2f, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfd, 0x03, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a,
	0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x20, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x29,
	0x0a, 0x03, 0x66, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14,
	0x72, 0x12, 0x10, 0x01, 0x18, 0x40, 0x32, 0x0c, 0x5e, 0x5c, 0x64, 0x2b, 0x28, 0x73, 0x7c, 0x6d,
	0x7c, 0x68, 0x29, 0x24, 0x52, 0x03, 0x66, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x16,
	0xfa, 0x42, 0x13, 0x9a, 0x01, 0x10, 0x22, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x2a, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x62,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x43,
	0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x16, 0xfa,
	0x42, 0x13, 0x9a, 0x01, 0x10, 0x22, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x2a, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x01, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01,
	0x18, 0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x00, 0x18, 0x80, 0x10, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x2a, 0x91, 0x01, 0x0a, 0x08, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x4f, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x05, 0x2a, 0x40, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x42,
	0x2e, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x50, 0x01, 0x5a, 0x20, 0x70,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x3b, 0x70, 0x72, 0x6f, 0x6d, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prom_node_proto_rawDescOnce sync.Once
	file_prom_node_proto_rawDescData = file_prom_node_proto_rawDesc
)

func file_prom_node_proto_rawDescGZIP() []byte {
	file_prom_node_proto_rawDescOnce.Do(func() {
		file_prom_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_prom_node_proto_rawDescData)
	})
	return file_prom_node_proto_rawDescData
}

var file_prom_node_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_prom_node_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_prom_node_proto_goTypes = []interface{}{
	(Category)(0),           // 0: api.prom.Category
	(Status)(0),             // 1: api.prom.Status
	(*DictItem)(nil),        // 2: api.prom.DictItem
	(*AlarmPageItem)(nil),   // 3: api.prom.AlarmPageItem
	(*GroupItem)(nil),       // 4: api.prom.GroupItem
	(*GroupSimpleItem)(nil), // 5: api.prom.GroupSimpleItem
	(*StrategyItem)(nil),    // 6: api.prom.StrategyItem
	(*ComboRuleItem)(nil),   // 7: api.prom.ComboRuleItem
	(*ComboItem)(nil),       // 8: api.prom.ComboItem
	nil,                     // 9: api.prom.StrategyItem.LabelsEntry
	nil,                     // 10: api.prom.StrategyItem.AnnotationsEntry
	nil,                     // 11: api.prom.ComboRuleItem.LabelsEntry
	nil,                     // 12: api.prom.ComboRuleItem.AnnotationsEntry
}
var file_prom_node_proto_depIdxs = []int32{
	0,  // 0: api.prom.DictItem.category:type_name -> api.prom.Category
	1,  // 1: api.prom.DictItem.status:type_name -> api.prom.Status
	1,  // 2: api.prom.AlarmPageItem.status:type_name -> api.prom.Status
	6,  // 3: api.prom.GroupItem.prom_strategies:type_name -> api.prom.StrategyItem
	2,  // 4: api.prom.GroupItem.categories:type_name -> api.prom.DictItem
	1,  // 5: api.prom.GroupItem.status:type_name -> api.prom.Status
	9,  // 6: api.prom.StrategyItem.labels:type_name -> api.prom.StrategyItem.LabelsEntry
	10, // 7: api.prom.StrategyItem.annotations:type_name -> api.prom.StrategyItem.AnnotationsEntry
	2,  // 8: api.prom.StrategyItem.categories:type_name -> api.prom.DictItem
	2,  // 9: api.prom.StrategyItem.alert_level:type_name -> api.prom.DictItem
	3,  // 10: api.prom.StrategyItem.alarm_pages:type_name -> api.prom.AlarmPageItem
	1,  // 11: api.prom.StrategyItem.status:type_name -> api.prom.Status
	5,  // 12: api.prom.StrategyItem.group:type_name -> api.prom.GroupSimpleItem
	11, // 13: api.prom.ComboRuleItem.labels:type_name -> api.prom.ComboRuleItem.LabelsEntry
	12, // 14: api.prom.ComboRuleItem.annotations:type_name -> api.prom.ComboRuleItem.AnnotationsEntry
	7,  // 15: api.prom.ComboItem.rules:type_name -> api.prom.ComboRuleItem
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_prom_node_proto_init() }
func file_prom_node_proto_init() {
	if File_prom_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prom_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prom_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmPageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prom_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prom_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupSimpleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prom_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prom_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComboRuleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prom_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComboItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prom_node_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prom_node_proto_goTypes,
		DependencyIndexes: file_prom_node_proto_depIdxs,
		EnumInfos:         file_prom_node_proto_enumTypes,
		MessageInfos:      file_prom_node_proto_msgTypes,
	}.Build()
	File_prom_node_proto = out.File
	file_prom_node_proto_rawDesc = nil
	file_prom_node_proto_goTypes = nil
	file_prom_node_proto_depIdxs = nil
}
