syntax = "proto3";

package api.prom.strategy;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "base.proto";
import "model.proto";

option go_package = "prometheus-manager/api/prom/strategy;strategy";
option java_multiple_files = true;
option java_package = "api.prom.strategy";

// Strategy 策略管理模块
service Strategy {
  // CreateStrategy 创建策略
  rpc CreateStrategy (CreateStrategyRequest) returns (CreateStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/create"
      body: "*"
    };
  }

  // UpdateStrategy 更新策略
  rpc UpdateStrategy (UpdateStrategyRequest) returns (UpdateStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/update/{id}"
      body: "*"
    };
  }

  // BatchUpdateStrategyStatus 批量更新策略状态
  rpc BatchUpdateStrategyStatus (BatchUpdateStrategyStatusRequest) returns (BatchUpdateStrategyStatusReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/status/batch/update"
      body: "*"
    };
  }

  // DeleteStrategy 删除策略
  rpc DeleteStrategy (DeleteStrategyRequest) returns (DeleteStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/delete/{id}"
      body: "*"
    };
  }

  // BatchDeleteStrategy 批量删除策略
  rpc BatchDeleteStrategy (BatchDeleteStrategyRequest) returns (BatchDeleteStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/batch/delete"
      body: "*"
    };
  }

  // GetStrategy 获取策略
  rpc GetStrategy (GetStrategyRequest) returns (GetStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/get/{id}"
      body: "*"
    };
  }

  // ListStrategy 获取策略列表
  rpc ListStrategy (ListStrategyRequest) returns (ListStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/list"
      body: "*"
    };
  }

  // SelectStrategy 获取策略列表
  rpc SelectStrategy (SelectStrategyRequest) returns (SelectStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/select"
      body: "*"
    };
  }

  // ExportStrategy 导出策略
  rpc  ExportStrategy (ExportStrategyRequest) returns (ExportStrategyReply) {
    option (google.api.http) = {
      get: "/api/v1/strategy/export"
    };
  }
}

// CreateStrategyRequest 创建策略请求
message CreateStrategyRequest {
  // groupId 策略组ID
  uint32 groupId = 1 [(validate.rules).uint32.gt = 0];
  // alert 告警名称
  string alert = 2 [(validate.rules).string = {min_len: 1 max_len: 255, pattern: "^[a-zA-Z0-9_]+$"}];
  // expr 表达式
  string expr = 3 [(validate.rules).string.min_len = 1];
  // duration 持续时间,(1s,1m,1h,1d)
  string duration = 4 [(validate.rules).string = {min_len: 1 max_len: 10, pattern: "^[1-9][0-9]*[smhd]$"}];
  // labels 标签
  map<string, string> labels = 5 [(validate.rules).map = {
    min_pairs: 1
    max_pairs: 100
    keys: {
      string: {pattern: "^[a-zA-Z0-9_]+$", min_len: 1, max_len: 32}
    }
    //    values: {
    //      string: {pattern: "^[a-zA-Z0-9_]+$", min_len: 1, max_len: 32}
    //    }
  }];
  // annotations 注解
  map<string, string> annotations = 6 [(validate.rules).map = {
    min_pairs: 1
    max_pairs: 100
    keys: {
      string: {pattern: "^[a-zA-Z0-9_]+$", min_len: 1, max_len: 32}
    }
    //    values: {
    //      string: {pattern: "^[a-zA-Z0-9_]+$", min_len: 1, max_len: 32}
    //    }
  }];
  // alarmPageIds 告警页面ID列表
  repeated uint32 alarmPageIds = 7 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {
      uint32: {gt: 0}
    }
  }];
  // categoryIds 分类ID列表
  repeated uint32 categoryIds = 8 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {
      uint32: {gt: 0}
    }
  }];
  // alarmLevelId 告警级别ID
  uint32 alarmLevelId = 9 [(validate.rules).uint32.gt = 0];
  // remark 备注
  string remark = 10 [(validate.rules).string.max_len = 255];
}
// CreateStrategyReply 创建策略响应
message CreateStrategyReply {
  // id 策略ID
  uint32 id = 1;
}

// UpdateStrategyRequest 更新策略请求
message UpdateStrategyRequest {
  // id 策略ID
  uint32 id = 1 [(validate.rules).uint32.gt = 0];
  // groupId 策略组ID
  uint32 groupId = 2 [(validate.rules).uint32.gt = 0];
  // alert 告警名称
  string alert = 3 [(validate.rules).string = {min_len: 1 max_len: 255, pattern: "^[a-zA-Z0-9_]+$"}];
  // expr 表达式
  string expr = 4 [(validate.rules).string.min_len = 1];
  // duration 持续时间,(1s,1m,1h,1d)
  string duration = 5 [(validate.rules).string = {min_len: 1 max_len: 10, pattern: "^[1-9][0-9]*[smhd]$"}];
  // labels 标签
  map<string, string> labels = 6 [(validate.rules).map = {
    min_pairs: 1
    max_pairs: 100
    keys: {
      string: {pattern: "^[a-zA-Z0-9_]+$", min_len: 1, max_len: 32}
    }
    //    values: {
    //      string: {pattern: "^[a-zA-Z0-9_]+$", min_len: 1, max_len: 32}
    //    }
  }];
  // annotations 注解
  map<string, string> annotations = 7 [(validate.rules).map = {
    min_pairs: 1
    max_pairs: 100
    keys: {
      string: {pattern: "^[a-zA-Z0-9_]+$", min_len: 1, max_len: 32}
    }
    //    values: {
    //      string: {pattern: "^[a-zA-Z0-9_]+$", min_len: 1, max_len: 32}
    //    }
  }];
  // alarmPageIds 告警页面ID列表
  repeated uint32 alarmPageIds = 8 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {uint32: {gt: 0}}
  }];
  // categoryIds 分类ID列表
  repeated uint32 categoryIds = 9 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {uint32: {gt: 0}}
  }];
  // alarmLevelId 告警级别ID
  uint32 alarmLevelId = 10 [(validate.rules).uint32.gt = 0];
  // remark 备注
  string remark = 11 [(validate.rules).string.max_len = 255];
}
// UpdateStrategyReply 更新策略响应
message UpdateStrategyReply {
  // id 策略ID
  uint32 id = 1;
}

// BatchUpdateStrategyStatusRequest 批量更新策略状态请求
message BatchUpdateStrategyStatusRequest {
  // ids 策略ID列表
  repeated uint32 ids = 1 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {uint32: {gt: 0}}
  }];
  // status 策略状态
  Status status = 2 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
}
// BatchUpdateStrategyStatusReply 批量更新策略状态响应
message BatchUpdateStrategyStatusReply {
  // ids 策略ID列表
  repeated uint32 ids = 1;
}

// DeleteStrategy 删除策略
message DeleteStrategyRequest {
  // id 策略ID
  uint32 id = 1 [(validate.rules).uint32.gt = 0];
}
// DeleteStrategyReply 删除策略响应
message DeleteStrategyReply {
  // id 策略ID
  uint32 id = 1;
}

// BatchDeleteStrategy 批量删除策略
message BatchDeleteStrategyRequest {
  // ids 策略ID列表
  repeated uint32 ids = 1 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {uint32: {gt: 0}}
  }];
}
// BatchDeleteStrategyReply 批量删除策略响应
message BatchDeleteStrategyReply {
  // ids 策略ID列表
  repeated uint32 ids = 1;
}

// GetStrategy 获取策略
message GetStrategyRequest {
  // id 策略ID
  uint32 id = 1 [(validate.rules).uint32.gt = 0];
}
// GetStrategyReply 获取策略响应
message GetStrategyReply {
  // promStrategy 策略信息
  PromStrategyV1 detail = 1;
}

// ListStrategy 获取策略列表
message ListStrategyRequest {
  // page 分页参数
  PageRequest page = 1 [(validate.rules).message.required = true];
  // keyword 关键字
  string keyword = 2 [(validate.rules).string = {max_len: 255}];
  // groupId 策略组ID
  uint32 groupId = 3 [(validate.rules).uint32.gt = 0];
  // categoryIds 分类ID列表
  repeated uint32 categoryIds = 4 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {uint32: {gt: 0}}
  }];
  // alarmLevelId 告警级别ID
  uint32 alarmLevelId = 5 [(validate.rules).uint32.gt = 0];
  // status 策略状态
  Status status = 6 [(validate.rules).enum = {defined_only: true}];
  // isDeleted 是否获取已删除的策略
  bool isDeleted = 7;
}
// ListStrategyReply 获取策略列表响应
message ListStrategyReply {
  // page 分页参数
  PageReply page = 1;
  // list 策略列表
  repeated PromStrategyV1 list = 2;
}

// SelectStrategy 获取策略列表
message SelectStrategyRequest {
  // page 分页参数
  PageRequest page = 1 [(validate.rules).message.required = true];
  string keyword = 2 [(validate.rules).string = {max_len: 255}];
}
// SelectStrategyReply 获取策略列表响应
message SelectStrategyReply {
  // page 分页参数
  PageReply page = 1;
  // list 策略列表
  repeated PromStrategySelectV1 list = 2;
}

// ExportStrategyRequest 导出策略请求
message ExportStrategyRequest {
  // ids 策略ID列表
  repeated uint32 ids = 1 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {uint32: {gt: 0}}
  }];
}
// ExportStrategyReply 导出策略响应
message ExportStrategyReply {
  // file 策略文件
  bytes file = 1;
  // fileName 策略文件名
  string fileName = 2;
}