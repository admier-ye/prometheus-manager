syntax = "proto3";

package api.prom.strategy.group;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "base.proto";
import "model.proto";

option go_package = "prometheus-manager/api/prom/strategy/group;group";
option java_multiple_files = true;
option java_package = "api.prom.strategy.group";

// 策略组管理模块相关接口
service Group {
  // 创建策略组
  rpc CreateGroup (CreateGroupRequest) returns (CreateGroupReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/group/create"
      body: "*"
    };
  }

  // 更新策略组
  rpc UpdateGroup (UpdateGroupRequest) returns (UpdateGroupReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/group/update/{id}"
      body: "*"
    };
  }

  // 批量更新策略组状态
  rpc BatchUpdateGroupStatus (BatchUpdateGroupStatusRequest) returns (BatchUpdateGroupStatusReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/group/status/batch/update"
      body: "*"
    };
  }

  // 删除策略组
  rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/group/delete/{id}"
      body: "*"
    };
  }

  // 批量删除策略组
  rpc BatchDeleteGroup (BatchDeleteGroupRequest) returns (BatchDeleteGroupReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/group/batch/delete"
      body: "*"
    };
  }

  // GetGroup 获取策略组
  rpc GetGroup (GetGroupRequest) returns (GetGroupReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/group/get/{id}"
      body: "*"
    };
  }

  // 获取策略组列表
  rpc ListGroup (ListGroupRequest) returns (ListGroupReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/group/list"
      body: "*"
    };
  }

  // 获取策略组下拉列表
  rpc SelectGroup (SelectGroupRequest) returns (SelectGroupReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/group/select"
      body: "*"
    };
  }

  // 导入策略组
  rpc ImportGroup (ImportGroupRequest) returns (ImportGroupReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/group/import"
      body: "*"
    };
  }

  // 导出策略组
  rpc ExportGroup (ExportGroupRequest) returns (ExportGroupReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/group/export"
      body: "*"
    };
  }
}

// 创建策略组请求参数
message CreateGroupRequest {
  // 策略组名称, 长度1-32, 字母数字下划线(^[a-zA-Z0-9_]+$)
  string name = 1 [(validate.rules).string = {
    min_len: 1,
    max_len: 32,
    pattern: "^[a-zA-Z0-9_]+$"
  }];
  // 策略组分类的ID, 对应字典表ID, 不允许为0
  repeated uint32 categoryIds = 2 [(validate.rules).repeated.items = {
    uint32: {gt: 0},
  }];
  // 策略组备注, 长度0-255
  string remark = 3 [(validate.rules).string.max_len = 255];
}
// 创建策略组响应参数
message CreateGroupReply {
  // 策略组ID, 创建成功后返回
  uint32 id = 1;
}

// 更新策略组请求
message UpdateGroupRequest {
  // 策略组ID
  uint32 id = 1 [(validate.rules).uint32.gt = 0];
  // 策略组名称, 长度1-32, 字母数字下划线(^[a-zA-Z0-9_]+$)
  string name = 2 [(validate.rules).string = {
    min_len: 1,
    max_len: 32,
    pattern: "^[a-zA-Z0-9_]+$"
  }];
  // 策略组分类, 对应字典表ID, 不允许为0
  repeated uint32 categoryIds = 3 [(validate.rules).repeated.items = {
    uint32: {gt: 0},
  }];
  // 策略组备注, 长度0-255
  string remark = 4 [(validate.rules).string.max_len = 255];
}
// 更新策略组响应参数
message UpdateGroupReply {
  // 策略组ID, 更新成功后返回
  uint32 id = 1;
}

// 批量更新策略组状态请求
message BatchUpdateGroupStatusRequest {
  // 策略组ID列表, 最少1个, 最多100个, 不允许为0, 不允许重复
  repeated uint32 ids = 1 [(validate.rules).repeated = {
    min_items: 1,
    max_items: 100,
    unique: true,
    items: {
      uint32: {gt: 0}
    }
  }];
  // 策略组状态
  Status status = 2 [(validate.rules).enum = {defined_only: true}];
}
// BatchUpdateGroupStatusReply 批量更新策略组状态回复
message BatchUpdateGroupStatusReply {
  // 策略组ID列表, 更新成功后返回
  repeated uint32 ids = 1;
}

// 删除策略组请求参数
message DeleteGroupRequest {
  // 策略组ID, 不允许为0
  uint32 id = 1 [(validate.rules).uint32.gt = 0];
}
// 删除策略组响应参数
message DeleteGroupReply {
  // 策略组ID, 删除成功后返回
  uint32 id = 1;
}

// 批量删除策略组请求参数
message BatchDeleteGroupRequest {
  // 策略组ID列表, 最少1个, 最多100个, 不允许为0, 不允许重复
  repeated uint32 ids = 1 [(validate.rules).repeated = {
    min_items: 1,
    max_items: 100,
    unique: true,
    items: {
      uint32: {gt: 0}
    }
  }];
}
// 批量删除策略组响应参数
message BatchDeleteGroupReply {
  // 策略组ID列表, 删除成功后返回
  repeated uint32 ids = 1;
}

// 获取策略组请求参数
message GetGroupRequest {
  // 策略组ID, 不允许为0, 路径参数
  uint32 id = 1 [(validate.rules).uint32.gt = 0];
}
// 获取策略组响应参数
message GetGroupReply {
  // 策略组信息
  PromGroup detail = 1;
}

// 获取策略组列表请求参数
message ListGroupRequest {
  // 分页参数, 必填
  PageRequest page = 1 [(validate.rules).message.required = true];
  // 关键字, 长度0-32
  string keyword = 2 [(validate.rules).string.max_len = 32];
  // 分类ID列表, 不允许为0, 不允许重复, 非必填, 取自字典表ID
  repeated uint32 categoryIds = 3 [(validate.rules) = {
    repeated: {
      unique: true,
      items: {
        uint32: {gt: 0}
      }
    }
  }];
  // 策略组状态
  Status status = 4 [(validate.rules).enum.defined_only = true];
  // 开始时间,unix时间戳
  uint64 startAt = 5;
  // 结束时间,unix时间戳
  uint64 endAt = 6;
}
// 获取策略组列表响应参数
message ListGroupReply {
  // 分页参数
  PageReply page = 1;
  // 策略组列表
  repeated PromGroup list = 2;
}

// 获取策略组下拉列表请求参数
message SelectGroupRequest {
  // 分页参数, 必填
  PageRequest page = 1 [(validate.rules).message.required = true];
  // 关键字, 长度0-32
  string keyword = 2 [(validate.rules).string.max_len = 32];
}
// 获取策略组下拉列表响应列表
message SelectGroupReply {
  // 分页参数
  PageReply page = 1;
  // 策略组列表
  repeated PromGroupSelectV1 list = 2;
}

// 导入策略组请求参数
message ImportGroupRequest {
  // 策略文件byte, 最少1个, 最多100个, 不允许重复
  repeated bytes files = 1 [(validate.rules).repeated = {
    min_items: 1,
    max_items: 100,
    unique: true,
  }];
  // 策略组ID, 必填
  uint32 groupId = 2 [(validate.rules).uint32.gt = 0];
}
// 导入策略组响应参数
message ImportGroupReply {
  // 导入成功的策略组ID列表
  repeated uint32 ids = 1;
}

// 导出策略组请求参数
message ExportGroupRequest {
  // 策略组ID列表, 最少1个, 最多100个, 不允许为0, 不允许重复
  repeated uint32 ids = 1 [(validate.rules).repeated = {
    min_items: 1,
    max_items: 100,
    unique: true,
    items: {
      uint32: {gt: 0}
    }
  }];
}
// 导出策略组响应参数
message ExportGroupReply {
  // 策略文件bytes
  bytes file = 1;
}