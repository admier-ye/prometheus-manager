// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prom/v1/prom.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	prom "prometheus-manager/api/prom"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = prom.Status(0)
)

// Validate checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupRequestMultiError, or nil if none found.
func (m *CreateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroup() == nil {
		err := CreateGroupRequestValidationError{
			field:  "Group",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupRequestValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupRequestValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupRequestValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGroupRequestMultiError(errors)
	}

	return nil
}

// CreateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupRequestMultiError) AllErrors() []error { return m }

// CreateGroupRequestValidationError is the validation error returned by
// CreateGroupRequest.Validate if the designated constraints aren't met.
type CreateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupRequestValidationError) ErrorName() string {
	return "CreateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupRequestValidationError{}

// Validate checks the field values on CreateGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupReplyMultiError, or nil if none found.
func (m *CreateGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGroupReplyMultiError(errors)
	}

	return nil
}

// CreateGroupReplyMultiError is an error wrapping multiple validation errors
// returned by CreateGroupReply.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupReplyMultiError) AllErrors() []error { return m }

// CreateGroupReplyValidationError is the validation error returned by
// CreateGroupReply.Validate if the designated constraints aren't met.
type CreateGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupReplyValidationError) ErrorName() string { return "CreateGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupReplyValidationError{}

// Validate checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupRequestMultiError, or nil if none found.
func (m *UpdateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroup() == nil {
		err := UpdateGroupRequestValidationError{
			field:  "Group",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupRequestValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupRequestValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupRequestValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetId() <= 0 {
		err := UpdateGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupRequestMultiError) AllErrors() []error { return m }

// UpdateGroupRequestValidationError is the validation error returned by
// UpdateGroupRequest.Validate if the designated constraints aren't met.
type UpdateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupRequestValidationError) ErrorName() string {
	return "UpdateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupRequestValidationError{}

// Validate checks the field values on UpdateGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupReplyMultiError, or nil if none found.
func (m *UpdateGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGroupReplyMultiError(errors)
	}

	return nil
}

// UpdateGroupReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateGroupReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupReplyMultiError) AllErrors() []error { return m }

// UpdateGroupReplyValidationError is the validation error returned by
// UpdateGroupReply.Validate if the designated constraints aren't met.
type UpdateGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupReplyValidationError) ErrorName() string { return "UpdateGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupReplyValidationError{}

// Validate checks the field values on UpdateGroupsStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupsStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupsStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupsStatusRequestMultiError, or nil if none found.
func (m *UpdateGroupsStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupsStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := prom.Status_name[int32(m.GetStatus())]; !ok {
		err := UpdateGroupsStatusRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetIds()) < 1 {
		err := UpdateGroupsStatusRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if item <= 0 {
			err := UpdateGroupsStatusRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateGroupsStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateGroupsStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateGroupsStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateGroupsStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupsStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupsStatusRequestMultiError) AllErrors() []error { return m }

// UpdateGroupsStatusRequestValidationError is the validation error returned by
// UpdateGroupsStatusRequest.Validate if the designated constraints aren't met.
type UpdateGroupsStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupsStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupsStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupsStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupsStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupsStatusRequestValidationError) ErrorName() string {
	return "UpdateGroupsStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupsStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupsStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupsStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupsStatusRequestValidationError{}

// Validate checks the field values on UpdateGroupsStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupsStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupsStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupsStatusReplyMultiError, or nil if none found.
func (m *UpdateGroupsStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupsStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupsStatusReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupsStatusReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupsStatusReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGroupsStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateGroupsStatusReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateGroupsStatusReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateGroupsStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupsStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupsStatusReplyMultiError) AllErrors() []error { return m }

// UpdateGroupsStatusReplyValidationError is the validation error returned by
// UpdateGroupsStatusReply.Validate if the designated constraints aren't met.
type UpdateGroupsStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupsStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupsStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupsStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupsStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupsStatusReplyValidationError) ErrorName() string {
	return "UpdateGroupsStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupsStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupsStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupsStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupsStatusReplyValidationError{}

// Validate checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupRequestMultiError, or nil if none found.
func (m *DeleteGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteGroupRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupRequestMultiError) AllErrors() []error { return m }

// DeleteGroupRequestValidationError is the validation error returned by
// DeleteGroupRequest.Validate if the designated constraints aren't met.
type DeleteGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupRequestValidationError) ErrorName() string {
	return "DeleteGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupRequestValidationError{}

// Validate checks the field values on DeleteGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupReplyMultiError, or nil if none found.
func (m *DeleteGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteGroupReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteGroupReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteGroupReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteGroupReplyMultiError(errors)
	}

	return nil
}

// DeleteGroupReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteGroupReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupReplyMultiError) AllErrors() []error { return m }

// DeleteGroupReplyValidationError is the validation error returned by
// DeleteGroupReply.Validate if the designated constraints aren't met.
type DeleteGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupReplyValidationError) ErrorName() string { return "DeleteGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupReplyValidationError{}

// Validate checks the field values on GetGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestMultiError, or nil if none found.
func (m *GetGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetGroupRequestMultiError(errors)
	}

	return nil
}

// GetGroupRequestMultiError is an error wrapping multiple validation errors
// returned by GetGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestMultiError) AllErrors() []error { return m }

// GetGroupRequestValidationError is the validation error returned by
// GetGroupRequest.Validate if the designated constraints aren't met.
type GetGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestValidationError) ErrorName() string { return "GetGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestValidationError{}

// Validate checks the field values on GetGroupReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGroupReplyMultiError, or
// nil if none found.
func (m *GetGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupReplyValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupReplyValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupReplyValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupReplyMultiError(errors)
	}

	return nil
}

// GetGroupReplyMultiError is an error wrapping multiple validation errors
// returned by GetGroupReply.ValidateAll() if the designated constraints
// aren't met.
type GetGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupReplyMultiError) AllErrors() []error { return m }

// GetGroupReplyValidationError is the validation error returned by
// GetGroupReply.Validate if the designated constraints aren't met.
type GetGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupReplyValidationError) ErrorName() string { return "GetGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupReplyValidationError{}

// Validate checks the field values on ListGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupRequestMultiError, or nil if none found.
func (m *ListGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetQuery() == nil {
		err := ListGroupRequestValidationError{
			field:  "Query",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGroupRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGroupRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGroupRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGroupRequestValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGroupRequestValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGroupRequestValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListGroupRequestMultiError(errors)
	}

	return nil
}

// ListGroupRequestMultiError is an error wrapping multiple validation errors
// returned by ListGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupRequestMultiError) AllErrors() []error { return m }

// ListGroupRequestValidationError is the validation error returned by
// ListGroupRequest.Validate if the designated constraints aren't met.
type ListGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupRequestValidationError) ErrorName() string { return "ListGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupRequestValidationError{}

// Validate checks the field values on ListGroupReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListGroupReplyMultiError,
// or nil if none found.
func (m *ListGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGroupReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGroupReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGroupReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGroupReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGroupReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGroupReplyValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGroupReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGroupReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupReplyValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGroupReplyMultiError(errors)
	}

	return nil
}

// ListGroupReplyMultiError is an error wrapping multiple validation errors
// returned by ListGroupReply.ValidateAll() if the designated constraints
// aren't met.
type ListGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupReplyMultiError) AllErrors() []error { return m }

// ListGroupReplyValidationError is the validation error returned by
// ListGroupReply.Validate if the designated constraints aren't met.
type ListGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupReplyValidationError) ErrorName() string { return "ListGroupReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupReplyValidationError{}

// Validate checks the field values on CreateStrategyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStrategyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStrategyRequestMultiError, or nil if none found.
func (m *CreateStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStrategy() == nil {
		err := CreateStrategyRequestValidationError{
			field:  "Strategy",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStrategyRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStrategyRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStrategyRequestValidationError{
				field:  "Strategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStrategyRequestMultiError(errors)
	}

	return nil
}

// CreateStrategyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateStrategyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStrategyRequestMultiError) AllErrors() []error { return m }

// CreateStrategyRequestValidationError is the validation error returned by
// CreateStrategyRequest.Validate if the designated constraints aren't met.
type CreateStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStrategyRequestValidationError) ErrorName() string {
	return "CreateStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStrategyRequestValidationError{}

// Validate checks the field values on CreateStrategyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStrategyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStrategyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStrategyReplyMultiError, or nil if none found.
func (m *CreateStrategyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStrategyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStrategyReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStrategyReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStrategyReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStrategyReplyMultiError(errors)
	}

	return nil
}

// CreateStrategyReplyMultiError is an error wrapping multiple validation
// errors returned by CreateStrategyReply.ValidateAll() if the designated
// constraints aren't met.
type CreateStrategyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStrategyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStrategyReplyMultiError) AllErrors() []error { return m }

// CreateStrategyReplyValidationError is the validation error returned by
// CreateStrategyReply.Validate if the designated constraints aren't met.
type CreateStrategyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStrategyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStrategyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStrategyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStrategyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStrategyReplyValidationError) ErrorName() string {
	return "CreateStrategyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStrategyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStrategyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStrategyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStrategyReplyValidationError{}

// Validate checks the field values on UpdateStrategyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStrategyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStrategyRequestMultiError, or nil if none found.
func (m *UpdateStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStrategy() == nil {
		err := UpdateStrategyRequestValidationError{
			field:  "Strategy",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStrategyRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStrategyRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStrategyRequestValidationError{
				field:  "Strategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetId() <= 0 {
		err := UpdateStrategyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateStrategyRequestMultiError(errors)
	}

	return nil
}

// UpdateStrategyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateStrategyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStrategyRequestMultiError) AllErrors() []error { return m }

// UpdateStrategyRequestValidationError is the validation error returned by
// UpdateStrategyRequest.Validate if the designated constraints aren't met.
type UpdateStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStrategyRequestValidationError) ErrorName() string {
	return "UpdateStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStrategyRequestValidationError{}

// Validate checks the field values on UpdateStrategyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStrategyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStrategyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStrategyReplyMultiError, or nil if none found.
func (m *UpdateStrategyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStrategyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStrategyReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStrategyReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStrategyReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStrategyReplyMultiError(errors)
	}

	return nil
}

// UpdateStrategyReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateStrategyReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateStrategyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStrategyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStrategyReplyMultiError) AllErrors() []error { return m }

// UpdateStrategyReplyValidationError is the validation error returned by
// UpdateStrategyReply.Validate if the designated constraints aren't met.
type UpdateStrategyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStrategyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStrategyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStrategyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStrategyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStrategyReplyValidationError) ErrorName() string {
	return "UpdateStrategyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStrategyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStrategyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStrategyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStrategyReplyValidationError{}

// Validate checks the field values on UpdateStrategiesStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStrategiesStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStrategiesStatusRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateStrategiesStatusRequestMultiError, or nil if none found.
func (m *UpdateStrategiesStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStrategiesStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := prom.Status_name[int32(m.GetStatus())]; !ok {
		err := UpdateStrategiesStatusRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetIds()) < 1 {
		err := UpdateStrategiesStatusRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if item <= 0 {
			err := UpdateStrategiesStatusRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateStrategiesStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateStrategiesStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateStrategiesStatusRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateStrategiesStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStrategiesStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStrategiesStatusRequestMultiError) AllErrors() []error { return m }

// UpdateStrategiesStatusRequestValidationError is the validation error
// returned by UpdateStrategiesStatusRequest.Validate if the designated
// constraints aren't met.
type UpdateStrategiesStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStrategiesStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStrategiesStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStrategiesStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStrategiesStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStrategiesStatusRequestValidationError) ErrorName() string {
	return "UpdateStrategiesStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStrategiesStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStrategiesStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStrategiesStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStrategiesStatusRequestValidationError{}

// Validate checks the field values on UpdateStrategiesStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStrategiesStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStrategiesStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStrategiesStatusReplyMultiError, or nil if none found.
func (m *UpdateStrategiesStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStrategiesStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStrategiesStatusReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStrategiesStatusReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStrategiesStatusReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStrategiesStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateStrategiesStatusReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateStrategiesStatusReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateStrategiesStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStrategiesStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStrategiesStatusReplyMultiError) AllErrors() []error { return m }

// UpdateStrategiesStatusReplyValidationError is the validation error returned
// by UpdateStrategiesStatusReply.Validate if the designated constraints
// aren't met.
type UpdateStrategiesStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStrategiesStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStrategiesStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStrategiesStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStrategiesStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStrategiesStatusReplyValidationError) ErrorName() string {
	return "UpdateStrategiesStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStrategiesStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStrategiesStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStrategiesStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStrategiesStatusReplyValidationError{}

// Validate checks the field values on DeleteStrategyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStrategyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStrategyRequestMultiError, or nil if none found.
func (m *DeleteStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteStrategyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteStrategyRequestMultiError(errors)
	}

	return nil
}

// DeleteStrategyRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteStrategyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStrategyRequestMultiError) AllErrors() []error { return m }

// DeleteStrategyRequestValidationError is the validation error returned by
// DeleteStrategyRequest.Validate if the designated constraints aren't met.
type DeleteStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStrategyRequestValidationError) ErrorName() string {
	return "DeleteStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStrategyRequestValidationError{}

// Validate checks the field values on DeleteStrategyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStrategyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStrategyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStrategyReplyMultiError, or nil if none found.
func (m *DeleteStrategyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStrategyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteStrategyReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteStrategyReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteStrategyReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteStrategyReplyMultiError(errors)
	}

	return nil
}

// DeleteStrategyReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteStrategyReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteStrategyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStrategyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStrategyReplyMultiError) AllErrors() []error { return m }

// DeleteStrategyReplyValidationError is the validation error returned by
// DeleteStrategyReply.Validate if the designated constraints aren't met.
type DeleteStrategyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStrategyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStrategyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStrategyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStrategyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStrategyReplyValidationError) ErrorName() string {
	return "DeleteStrategyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStrategyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStrategyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStrategyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStrategyReplyValidationError{}

// Validate checks the field values on GetStrategyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStrategyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStrategyRequestMultiError, or nil if none found.
func (m *GetStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetStrategyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetStrategyRequestMultiError(errors)
	}

	return nil
}

// GetStrategyRequestMultiError is an error wrapping multiple validation errors
// returned by GetStrategyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStrategyRequestMultiError) AllErrors() []error { return m }

// GetStrategyRequestValidationError is the validation error returned by
// GetStrategyRequest.Validate if the designated constraints aren't met.
type GetStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStrategyRequestValidationError) ErrorName() string {
	return "GetStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStrategyRequestValidationError{}

// Validate checks the field values on GetStrategyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStrategyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStrategyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStrategyReplyMultiError, or nil if none found.
func (m *GetStrategyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStrategyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStrategyReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStrategyReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStrategyReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStrategyReplyValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStrategyReplyValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStrategyReplyValidationError{
				field:  "Strategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStrategyReplyMultiError(errors)
	}

	return nil
}

// GetStrategyReplyMultiError is an error wrapping multiple validation errors
// returned by GetStrategyReply.ValidateAll() if the designated constraints
// aren't met.
type GetStrategyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStrategyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStrategyReplyMultiError) AllErrors() []error { return m }

// GetStrategyReplyValidationError is the validation error returned by
// GetStrategyReply.Validate if the designated constraints aren't met.
type GetStrategyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStrategyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStrategyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStrategyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStrategyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStrategyReplyValidationError) ErrorName() string { return "GetStrategyReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetStrategyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStrategyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStrategyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStrategyReplyValidationError{}

// Validate checks the field values on ListStrategyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStrategyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStrategyRequestMultiError, or nil if none found.
func (m *ListStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetQuery() == nil {
		err := ListStrategyRequestValidationError{
			field:  "Query",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStrategyRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStrategyRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStrategyRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStrategyRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStrategyRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStrategyRequestValidationError{
				field:  "Strategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListStrategyRequestMultiError(errors)
	}

	return nil
}

// ListStrategyRequestMultiError is an error wrapping multiple validation
// errors returned by ListStrategyRequest.ValidateAll() if the designated
// constraints aren't met.
type ListStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStrategyRequestMultiError) AllErrors() []error { return m }

// ListStrategyRequestValidationError is the validation error returned by
// ListStrategyRequest.Validate if the designated constraints aren't met.
type ListStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStrategyRequestValidationError) ErrorName() string {
	return "ListStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStrategyRequestValidationError{}

// Validate checks the field values on ListStrategyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListStrategyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStrategyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStrategyReplyMultiError, or nil if none found.
func (m *ListStrategyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStrategyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStrategyReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStrategyReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStrategyReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStrategyReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStrategyReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStrategyReplyValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStrategies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStrategyReplyValidationError{
						field:  fmt.Sprintf("Strategies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStrategyReplyValidationError{
						field:  fmt.Sprintf("Strategies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStrategyReplyValidationError{
					field:  fmt.Sprintf("Strategies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStrategyReplyMultiError(errors)
	}

	return nil
}

// ListStrategyReplyMultiError is an error wrapping multiple validation errors
// returned by ListStrategyReply.ValidateAll() if the designated constraints
// aren't met.
type ListStrategyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStrategyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStrategyReplyMultiError) AllErrors() []error { return m }

// ListStrategyReplyValidationError is the validation error returned by
// ListStrategyReply.Validate if the designated constraints aren't met.
type ListStrategyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStrategyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStrategyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStrategyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStrategyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStrategyReplyValidationError) ErrorName() string {
	return "ListStrategyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListStrategyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStrategyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStrategyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStrategyReplyValidationError{}
