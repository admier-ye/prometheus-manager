syntax = "proto3";

package api.prom.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "base.proto";
import "prom/node.proto";

option go_package = "prometheus-manager/api/prom/v1;v1";
option java_multiple_files = true;
option java_package = "api.prom.v1";

service Dict {
  // CreateDict creates a new dict.
  rpc CreateDict (CreateDictRequest) returns (CreateDictReply) {
    option (google.api.http) = {
      post: "/prom/v1/dict"
      body: "*"
    };
  }
  // UpdateDict updates a dict by id.
  rpc UpdateDict (UpdateDictRequest) returns (UpdateDictReply) {
    option (google.api.http) = {
      put: "/prom/v1/dict/{id}"
      body: "*"
    };
  }
  // UpdateDictsStatus updates dicts status by ids.
  rpc UpdateDictsStatus (UpdateDictsStatusRequest) returns (UpdateDictsStatusReply) {
    option (google.api.http) = {
      put: "/prom/v1/dicts/status"
      body: "*"
    };
  }
  // DeleteDict deletes a dict by id.
  rpc DeleteDict (DeleteDictRequest) returns (DeleteDictReply) {
    option (google.api.http) = {
      delete: "/prom/v1/dict/{id}"
    };
  }
  // GetDict gets a dict by id.
  rpc GetDict (GetDictRequest) returns (GetDictReply) {
    option (google.api.http) = {
      get: "/prom/v1/dict/{id}"
    };
  }
  // ListDict lists dicts.
  rpc ListDict (ListDictRequest) returns (ListDictReply) {
    option (google.api.http) = {
      post: "/prom/v1/dicts"
      body: "*"
    };
  }

  // Datasources returns all datasources.
  rpc Datasources (DatasourcesRequest) returns (DatasourcesReply) {
    option (google.api.http) = {
      get: "/prom/v1/datasources"
    };
  }
}

message CreateDictRequest {
  DictItem dict = 1 [(validate.rules).message.required = true];
}
message CreateDictReply {
  Response response = 1;
}

message UpdateDictRequest {
  DictItem dict = 1 [(validate.rules).message.required = true];
  int32 id = 2 [(validate.rules).int32 = {gt: 0}];
}
message UpdateDictReply {
  Response response = 1;
}

message UpdateDictsStatusRequest {
  repeated int32 ids = 1 [(validate.rules).repeated = {
    min_items: 1
    items: {
      int32: {
        gt: 0
      }
    }
  }];
  Status status = 2 [(validate.rules).enum = {defined_only: true}];
}
message UpdateDictsStatusReply {
  Response response = 1;
}

message DeleteDictRequest {
  int32 id = 1 [(validate.rules).int32 = {gt: 0}];
}
message DeleteDictReply {
  Response response = 1;
}

message GetDictRequest {
  int32 id = 1 [(validate.rules).int32 = {gt: 0}];
}
message GetDictReply {
  DictItem dict = 1;
  Response response = 2;
}

message ListDictRequest {
  ListQuery query = 1 [(validate.rules).message.required = true];
  DictItem dict = 2;
}
message ListDictReply {
  ListQueryResult result = 1;
  Response response = 2;
  repeated DictItem dicts = 3;
}

message DatasourcesRequest {
}

message DatasourcesReply {
  Response response = 1;
  repeated Datasource datasources = 3;
}