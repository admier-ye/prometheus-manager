// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.4
// source: prom/v1/prom.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPromCreateGroup = "/api.prom.v1.Prom/CreateGroup"
const OperationPromCreateStrategy = "/api.prom.v1.Prom/CreateStrategy"
const OperationPromDeleteGroup = "/api.prom.v1.Prom/DeleteGroup"
const OperationPromDeleteStrategy = "/api.prom.v1.Prom/DeleteStrategy"
const OperationPromGetGroup = "/api.prom.v1.Prom/GetGroup"
const OperationPromGetStrategy = "/api.prom.v1.Prom/GetStrategy"
const OperationPromListGroup = "/api.prom.v1.Prom/ListGroup"
const OperationPromListStrategy = "/api.prom.v1.Prom/ListStrategy"
const OperationPromUpdateGroup = "/api.prom.v1.Prom/UpdateGroup"
const OperationPromUpdateGroupsStatus = "/api.prom.v1.Prom/UpdateGroupsStatus"
const OperationPromUpdateStrategiesStatus = "/api.prom.v1.Prom/UpdateStrategiesStatus"
const OperationPromUpdateStrategy = "/api.prom.v1.Prom/UpdateStrategy"

type PromHTTPServer interface {
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupReply, error)
	CreateStrategy(context.Context, *CreateStrategyRequest) (*CreateStrategyReply, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupReply, error)
	DeleteStrategy(context.Context, *DeleteStrategyRequest) (*DeleteStrategyReply, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error)
	GetStrategy(context.Context, *GetStrategyRequest) (*GetStrategyReply, error)
	ListGroup(context.Context, *ListGroupRequest) (*ListGroupReply, error)
	ListStrategy(context.Context, *ListStrategyRequest) (*ListStrategyReply, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupReply, error)
	UpdateGroupsStatus(context.Context, *UpdateGroupsStatusRequest) (*UpdateGroupsStatusReply, error)
	UpdateStrategiesStatus(context.Context, *UpdateStrategiesStatusRequest) (*UpdateStrategiesStatusReply, error)
	UpdateStrategy(context.Context, *UpdateStrategyRequest) (*UpdateStrategyReply, error)
}

func RegisterPromHTTPServer(s *http.Server, srv PromHTTPServer) {
	r := s.Route("/")
	r.POST("/prom/v1/group", _Prom_CreateGroup0_HTTP_Handler(srv))
	r.PUT("/prom/v1/group/{id}", _Prom_UpdateGroup0_HTTP_Handler(srv))
	r.PUT("/prom/v1/groups/status", _Prom_UpdateGroupsStatus0_HTTP_Handler(srv))
	r.DELETE("/prom/v1/group/{id}", _Prom_DeleteGroup0_HTTP_Handler(srv))
	r.GET("/prom/v1/group/{id}", _Prom_GetGroup0_HTTP_Handler(srv))
	r.POST("/prom/v1/groups", _Prom_ListGroup0_HTTP_Handler(srv))
	r.POST("/prom/v1/strategy", _Prom_CreateStrategy0_HTTP_Handler(srv))
	r.PUT("/prom/v1/strategy/{id}", _Prom_UpdateStrategy0_HTTP_Handler(srv))
	r.PUT("/prom/v1/strategies/status", _Prom_UpdateStrategiesStatus0_HTTP_Handler(srv))
	r.DELETE("/prom/v1/strategy/{id}", _Prom_DeleteStrategy0_HTTP_Handler(srv))
	r.GET("/prom/v1/strategy/{id}", _Prom_GetStrategy0_HTTP_Handler(srv))
	r.POST("/prom/v1/strategies", _Prom_ListStrategy0_HTTP_Handler(srv))
}

func _Prom_CreateGroup0_HTTP_Handler(srv PromHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPromCreateGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGroup(ctx, req.(*CreateGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Prom_UpdateGroup0_HTTP_Handler(srv PromHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPromUpdateGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGroup(ctx, req.(*UpdateGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Prom_UpdateGroupsStatus0_HTTP_Handler(srv PromHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGroupsStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPromUpdateGroupsStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGroupsStatus(ctx, req.(*UpdateGroupsStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateGroupsStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Prom_DeleteGroup0_HTTP_Handler(srv PromHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPromDeleteGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGroup(ctx, req.(*DeleteGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Prom_GetGroup0_HTTP_Handler(srv PromHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPromGetGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGroup(ctx, req.(*GetGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Prom_ListGroup0_HTTP_Handler(srv PromHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPromListGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGroup(ctx, req.(*ListGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Prom_CreateStrategy0_HTTP_Handler(srv PromHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPromCreateStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStrategy(ctx, req.(*CreateStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Prom_UpdateStrategy0_HTTP_Handler(srv PromHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPromUpdateStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStrategy(ctx, req.(*UpdateStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Prom_UpdateStrategiesStatus0_HTTP_Handler(srv PromHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStrategiesStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPromUpdateStrategiesStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStrategiesStatus(ctx, req.(*UpdateStrategiesStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateStrategiesStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Prom_DeleteStrategy0_HTTP_Handler(srv PromHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteStrategyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPromDeleteStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteStrategy(ctx, req.(*DeleteStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Prom_GetStrategy0_HTTP_Handler(srv PromHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStrategyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPromGetStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStrategy(ctx, req.(*GetStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Prom_ListStrategy0_HTTP_Handler(srv PromHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPromListStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStrategy(ctx, req.(*ListStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStrategyReply)
		return ctx.Result(200, reply)
	}
}

type PromHTTPClient interface {
	CreateGroup(ctx context.Context, req *CreateGroupRequest, opts ...http.CallOption) (rsp *CreateGroupReply, err error)
	CreateStrategy(ctx context.Context, req *CreateStrategyRequest, opts ...http.CallOption) (rsp *CreateStrategyReply, err error)
	DeleteGroup(ctx context.Context, req *DeleteGroupRequest, opts ...http.CallOption) (rsp *DeleteGroupReply, err error)
	DeleteStrategy(ctx context.Context, req *DeleteStrategyRequest, opts ...http.CallOption) (rsp *DeleteStrategyReply, err error)
	GetGroup(ctx context.Context, req *GetGroupRequest, opts ...http.CallOption) (rsp *GetGroupReply, err error)
	GetStrategy(ctx context.Context, req *GetStrategyRequest, opts ...http.CallOption) (rsp *GetStrategyReply, err error)
	ListGroup(ctx context.Context, req *ListGroupRequest, opts ...http.CallOption) (rsp *ListGroupReply, err error)
	ListStrategy(ctx context.Context, req *ListStrategyRequest, opts ...http.CallOption) (rsp *ListStrategyReply, err error)
	UpdateGroup(ctx context.Context, req *UpdateGroupRequest, opts ...http.CallOption) (rsp *UpdateGroupReply, err error)
	UpdateGroupsStatus(ctx context.Context, req *UpdateGroupsStatusRequest, opts ...http.CallOption) (rsp *UpdateGroupsStatusReply, err error)
	UpdateStrategiesStatus(ctx context.Context, req *UpdateStrategiesStatusRequest, opts ...http.CallOption) (rsp *UpdateStrategiesStatusReply, err error)
	UpdateStrategy(ctx context.Context, req *UpdateStrategyRequest, opts ...http.CallOption) (rsp *UpdateStrategyReply, err error)
}

type PromHTTPClientImpl struct {
	cc *http.Client
}

func NewPromHTTPClient(client *http.Client) PromHTTPClient {
	return &PromHTTPClientImpl{client}
}

func (c *PromHTTPClientImpl) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...http.CallOption) (*CreateGroupReply, error) {
	var out CreateGroupReply
	pattern := "/prom/v1/group"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPromCreateGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PromHTTPClientImpl) CreateStrategy(ctx context.Context, in *CreateStrategyRequest, opts ...http.CallOption) (*CreateStrategyReply, error) {
	var out CreateStrategyReply
	pattern := "/prom/v1/strategy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPromCreateStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PromHTTPClientImpl) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...http.CallOption) (*DeleteGroupReply, error) {
	var out DeleteGroupReply
	pattern := "/prom/v1/group/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPromDeleteGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PromHTTPClientImpl) DeleteStrategy(ctx context.Context, in *DeleteStrategyRequest, opts ...http.CallOption) (*DeleteStrategyReply, error) {
	var out DeleteStrategyReply
	pattern := "/prom/v1/strategy/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPromDeleteStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PromHTTPClientImpl) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...http.CallOption) (*GetGroupReply, error) {
	var out GetGroupReply
	pattern := "/prom/v1/group/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPromGetGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PromHTTPClientImpl) GetStrategy(ctx context.Context, in *GetStrategyRequest, opts ...http.CallOption) (*GetStrategyReply, error) {
	var out GetStrategyReply
	pattern := "/prom/v1/strategy/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPromGetStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PromHTTPClientImpl) ListGroup(ctx context.Context, in *ListGroupRequest, opts ...http.CallOption) (*ListGroupReply, error) {
	var out ListGroupReply
	pattern := "/prom/v1/groups"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPromListGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PromHTTPClientImpl) ListStrategy(ctx context.Context, in *ListStrategyRequest, opts ...http.CallOption) (*ListStrategyReply, error) {
	var out ListStrategyReply
	pattern := "/prom/v1/strategies"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPromListStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PromHTTPClientImpl) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...http.CallOption) (*UpdateGroupReply, error) {
	var out UpdateGroupReply
	pattern := "/prom/v1/group/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPromUpdateGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PromHTTPClientImpl) UpdateGroupsStatus(ctx context.Context, in *UpdateGroupsStatusRequest, opts ...http.CallOption) (*UpdateGroupsStatusReply, error) {
	var out UpdateGroupsStatusReply
	pattern := "/prom/v1/groups/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPromUpdateGroupsStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PromHTTPClientImpl) UpdateStrategiesStatus(ctx context.Context, in *UpdateStrategiesStatusRequest, opts ...http.CallOption) (*UpdateStrategiesStatusReply, error) {
	var out UpdateStrategiesStatusReply
	pattern := "/prom/v1/strategies/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPromUpdateStrategiesStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PromHTTPClientImpl) UpdateStrategy(ctx context.Context, in *UpdateStrategyRequest, opts ...http.CallOption) (*UpdateStrategyReply, error) {
	var out UpdateStrategyReply
	pattern := "/prom/v1/strategy/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPromUpdateStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
