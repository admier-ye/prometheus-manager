// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: prom/v1/dir.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirClient is the client API for Dir service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirClient interface {
	CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*CreateDirReply, error)
	UpdateDir(ctx context.Context, in *UpdateDirRequest, opts ...grpc.CallOption) (*UpdateDirReply, error)
	DeleteDir(ctx context.Context, in *DeleteDirRequest, opts ...grpc.CallOption) (*DeleteDirReply, error)
	GetDir(ctx context.Context, in *GetDirRequest, opts ...grpc.CallOption) (*GetDirReply, error)
	ListDir(ctx context.Context, in *ListDirRequest, opts ...grpc.CallOption) (*ListDirReply, error)
}

type dirClient struct {
	cc grpc.ClientConnInterface
}

func NewDirClient(cc grpc.ClientConnInterface) DirClient {
	return &dirClient{cc}
}

func (c *dirClient) CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*CreateDirReply, error) {
	out := new(CreateDirReply)
	err := c.cc.Invoke(ctx, "/api.prom.Dir/CreateDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirClient) UpdateDir(ctx context.Context, in *UpdateDirRequest, opts ...grpc.CallOption) (*UpdateDirReply, error) {
	out := new(UpdateDirReply)
	err := c.cc.Invoke(ctx, "/api.prom.Dir/UpdateDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirClient) DeleteDir(ctx context.Context, in *DeleteDirRequest, opts ...grpc.CallOption) (*DeleteDirReply, error) {
	out := new(DeleteDirReply)
	err := c.cc.Invoke(ctx, "/api.prom.Dir/DeleteDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirClient) GetDir(ctx context.Context, in *GetDirRequest, opts ...grpc.CallOption) (*GetDirReply, error) {
	out := new(GetDirReply)
	err := c.cc.Invoke(ctx, "/api.prom.Dir/GetDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirClient) ListDir(ctx context.Context, in *ListDirRequest, opts ...grpc.CallOption) (*ListDirReply, error) {
	out := new(ListDirReply)
	err := c.cc.Invoke(ctx, "/api.prom.Dir/ListDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirServer is the server API for Dir service.
// All implementations must embed UnimplementedDirServer
// for forward compatibility
type DirServer interface {
	CreateDir(context.Context, *CreateDirRequest) (*CreateDirReply, error)
	UpdateDir(context.Context, *UpdateDirRequest) (*UpdateDirReply, error)
	DeleteDir(context.Context, *DeleteDirRequest) (*DeleteDirReply, error)
	GetDir(context.Context, *GetDirRequest) (*GetDirReply, error)
	ListDir(context.Context, *ListDirRequest) (*ListDirReply, error)
	mustEmbedUnimplementedDirServer()
}

// UnimplementedDirServer must be embedded to have forward compatible implementations.
type UnimplementedDirServer struct {
}

func (UnimplementedDirServer) CreateDir(context.Context, *CreateDirRequest) (*CreateDirReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDir not implemented")
}
func (UnimplementedDirServer) UpdateDir(context.Context, *UpdateDirRequest) (*UpdateDirReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDir not implemented")
}
func (UnimplementedDirServer) DeleteDir(context.Context, *DeleteDirRequest) (*DeleteDirReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDir not implemented")
}
func (UnimplementedDirServer) GetDir(context.Context, *GetDirRequest) (*GetDirReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDir not implemented")
}
func (UnimplementedDirServer) ListDir(context.Context, *ListDirRequest) (*ListDirReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDir not implemented")
}
func (UnimplementedDirServer) mustEmbedUnimplementedDirServer() {}

// UnsafeDirServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirServer will
// result in compilation errors.
type UnsafeDirServer interface {
	mustEmbedUnimplementedDirServer()
}

func RegisterDirServer(s grpc.ServiceRegistrar, srv DirServer) {
	s.RegisterService(&Dir_ServiceDesc, srv)
}

func _Dir_CreateDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirServer).CreateDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.Dir/CreateDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirServer).CreateDir(ctx, req.(*CreateDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dir_UpdateDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirServer).UpdateDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.Dir/UpdateDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirServer).UpdateDir(ctx, req.(*UpdateDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dir_DeleteDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirServer).DeleteDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.Dir/DeleteDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirServer).DeleteDir(ctx, req.(*DeleteDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dir_GetDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirServer).GetDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.Dir/GetDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirServer).GetDir(ctx, req.(*GetDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dir_ListDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirServer).ListDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.Dir/ListDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirServer).ListDir(ctx, req.(*ListDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dir_ServiceDesc is the grpc.ServiceDesc for Dir service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dir_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.prom.Dir",
	HandlerType: (*DirServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDir",
			Handler:    _Dir_CreateDir_Handler,
		},
		{
			MethodName: "UpdateDir",
			Handler:    _Dir_UpdateDir_Handler,
		},
		{
			MethodName: "DeleteDir",
			Handler:    _Dir_DeleteDir_Handler,
		},
		{
			MethodName: "GetDir",
			Handler:    _Dir_GetDir_Handler,
		},
		{
			MethodName: "ListDir",
			Handler:    _Dir_ListDir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prom/v1/dir.proto",
}
