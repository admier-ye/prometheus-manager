// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.4
// source: prom/v1/rule.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRuleCreateRule = "/api.prom.Rule/CreateRule"
const OperationRuleDeleteRule = "/api.prom.Rule/DeleteRule"
const OperationRuleGetRule = "/api.prom.Rule/GetRule"
const OperationRuleListRule = "/api.prom.Rule/ListRule"
const OperationRuleUpdateRule = "/api.prom.Rule/UpdateRule"

type RuleHTTPServer interface {
	CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleReply, error)
	DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleReply, error)
	GetRule(context.Context, *GetRuleRequest) (*GetRuleReply, error)
	ListRule(context.Context, *ListRuleRequest) (*ListRuleReply, error)
	UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleReply, error)
}

func RegisterRuleHTTPServer(s *http.Server, srv RuleHTTPServer) {
	r := s.Route("/")
	r.POST("/prom/v1/rule/add", _Rule_CreateRule0_HTTP_Handler(srv))
	r.PUT("/prom/v1/rule/edit/{id}", _Rule_UpdateRule0_HTTP_Handler(srv))
	r.DELETE("/prom/v1/rule/delete/{id}", _Rule_DeleteRule0_HTTP_Handler(srv))
	r.GET("/prom/v1/rule/detail/{id}", _Rule_GetRule0_HTTP_Handler(srv))
	r.POST("/prom/v1/rule/list", _Rule_ListRule0_HTTP_Handler(srv))
}

func _Rule_CreateRule0_HTTP_Handler(srv RuleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRuleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRuleCreateRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRule(ctx, req.(*CreateRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRuleReply)
		return ctx.Result(200, reply)
	}
}

func _Rule_UpdateRule0_HTTP_Handler(srv RuleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRuleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRuleUpdateRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRule(ctx, req.(*UpdateRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRuleReply)
		return ctx.Result(200, reply)
	}
}

func _Rule_DeleteRule0_HTTP_Handler(srv RuleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRuleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRuleDeleteRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRule(ctx, req.(*DeleteRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRuleReply)
		return ctx.Result(200, reply)
	}
}

func _Rule_GetRule0_HTTP_Handler(srv RuleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRuleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRuleGetRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRule(ctx, req.(*GetRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRuleReply)
		return ctx.Result(200, reply)
	}
}

func _Rule_ListRule0_HTTP_Handler(srv RuleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRuleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRuleListRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRule(ctx, req.(*ListRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRuleReply)
		return ctx.Result(200, reply)
	}
}

type RuleHTTPClient interface {
	CreateRule(ctx context.Context, req *CreateRuleRequest, opts ...http.CallOption) (rsp *CreateRuleReply, err error)
	DeleteRule(ctx context.Context, req *DeleteRuleRequest, opts ...http.CallOption) (rsp *DeleteRuleReply, err error)
	GetRule(ctx context.Context, req *GetRuleRequest, opts ...http.CallOption) (rsp *GetRuleReply, err error)
	ListRule(ctx context.Context, req *ListRuleRequest, opts ...http.CallOption) (rsp *ListRuleReply, err error)
	UpdateRule(ctx context.Context, req *UpdateRuleRequest, opts ...http.CallOption) (rsp *UpdateRuleReply, err error)
}

type RuleHTTPClientImpl struct {
	cc *http.Client
}

func NewRuleHTTPClient(client *http.Client) RuleHTTPClient {
	return &RuleHTTPClientImpl{client}
}

func (c *RuleHTTPClientImpl) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...http.CallOption) (*CreateRuleReply, error) {
	var out CreateRuleReply
	pattern := "/prom/v1/rule/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRuleCreateRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RuleHTTPClientImpl) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...http.CallOption) (*DeleteRuleReply, error) {
	var out DeleteRuleReply
	pattern := "/prom/v1/rule/delete/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRuleDeleteRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RuleHTTPClientImpl) GetRule(ctx context.Context, in *GetRuleRequest, opts ...http.CallOption) (*GetRuleReply, error) {
	var out GetRuleReply
	pattern := "/prom/v1/rule/detail/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRuleGetRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RuleHTTPClientImpl) ListRule(ctx context.Context, in *ListRuleRequest, opts ...http.CallOption) (*ListRuleReply, error) {
	var out ListRuleReply
	pattern := "/prom/v1/rule/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRuleListRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RuleHTTPClientImpl) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...http.CallOption) (*UpdateRuleReply, error) {
	var out UpdateRuleReply
	pattern := "/prom/v1/rule/edit/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRuleUpdateRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
