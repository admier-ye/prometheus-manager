// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prom/v1/dir.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDirRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDirRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDirRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDirRequestMultiError, or nil if none found.
func (m *CreateDirRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDirRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDir() == nil {
		err := CreateDirRequestValidationError{
			field:  "Dir",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDir()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDirRequestValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDirRequestValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDir()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDirRequestValidationError{
				field:  "Dir",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDirRequestMultiError(errors)
	}

	return nil
}

// CreateDirRequestMultiError is an error wrapping multiple validation errors
// returned by CreateDirRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateDirRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDirRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDirRequestMultiError) AllErrors() []error { return m }

// CreateDirRequestValidationError is the validation error returned by
// CreateDirRequest.Validate if the designated constraints aren't met.
type CreateDirRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDirRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDirRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDirRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDirRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDirRequestValidationError) ErrorName() string { return "CreateDirRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateDirRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDirRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDirRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDirRequestValidationError{}

// Validate checks the field values on CreateDirReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDirReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDirReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateDirReplyMultiError,
// or nil if none found.
func (m *CreateDirReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDirReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDirReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDirReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDirReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDirReplyMultiError(errors)
	}

	return nil
}

// CreateDirReplyMultiError is an error wrapping multiple validation errors
// returned by CreateDirReply.ValidateAll() if the designated constraints
// aren't met.
type CreateDirReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDirReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDirReplyMultiError) AllErrors() []error { return m }

// CreateDirReplyValidationError is the validation error returned by
// CreateDirReply.Validate if the designated constraints aren't met.
type CreateDirReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDirReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDirReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDirReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDirReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDirReplyValidationError) ErrorName() string { return "CreateDirReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateDirReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDirReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDirReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDirReplyValidationError{}

// Validate checks the field values on UpdateDirRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDirRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDirRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDirRequestMultiError, or nil if none found.
func (m *UpdateDirRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDirRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDir() == nil {
		err := UpdateDirRequestValidationError{
			field:  "Dir",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDir()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDirRequestValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDirRequestValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDir()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDirRequestValidationError{
				field:  "Dir",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetId() <= 0 {
		err := UpdateDirRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDirRequestMultiError(errors)
	}

	return nil
}

// UpdateDirRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateDirRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateDirRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDirRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDirRequestMultiError) AllErrors() []error { return m }

// UpdateDirRequestValidationError is the validation error returned by
// UpdateDirRequest.Validate if the designated constraints aren't met.
type UpdateDirRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDirRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDirRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDirRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDirRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDirRequestValidationError) ErrorName() string { return "UpdateDirRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDirRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDirRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDirRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDirRequestValidationError{}

// Validate checks the field values on UpdateDirReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateDirReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDirReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateDirReplyMultiError,
// or nil if none found.
func (m *UpdateDirReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDirReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDirReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDirReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDirReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDirReplyMultiError(errors)
	}

	return nil
}

// UpdateDirReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateDirReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateDirReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDirReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDirReplyMultiError) AllErrors() []error { return m }

// UpdateDirReplyValidationError is the validation error returned by
// UpdateDirReply.Validate if the designated constraints aren't met.
type UpdateDirReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDirReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDirReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDirReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDirReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDirReplyValidationError) ErrorName() string { return "UpdateDirReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDirReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDirReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDirReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDirReplyValidationError{}

// Validate checks the field values on DeleteDirRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDirRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDirRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDirRequestMultiError, or nil if none found.
func (m *DeleteDirRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDirRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteDirRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDirRequestMultiError(errors)
	}

	return nil
}

// DeleteDirRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDirRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDirRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDirRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDirRequestMultiError) AllErrors() []error { return m }

// DeleteDirRequestValidationError is the validation error returned by
// DeleteDirRequest.Validate if the designated constraints aren't met.
type DeleteDirRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDirRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDirRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDirRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDirRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDirRequestValidationError) ErrorName() string { return "DeleteDirRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDirRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDirRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDirRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDirRequestValidationError{}

// Validate checks the field values on DeleteDirReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteDirReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDirReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteDirReplyMultiError,
// or nil if none found.
func (m *DeleteDirReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDirReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteDirReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteDirReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteDirReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteDirReplyMultiError(errors)
	}

	return nil
}

// DeleteDirReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteDirReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteDirReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDirReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDirReplyMultiError) AllErrors() []error { return m }

// DeleteDirReplyValidationError is the validation error returned by
// DeleteDirReply.Validate if the designated constraints aren't met.
type DeleteDirReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDirReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDirReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDirReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDirReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDirReplyValidationError) ErrorName() string { return "DeleteDirReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDirReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDirReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDirReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDirReplyValidationError{}

// Validate checks the field values on GetDirRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDirRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDirRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDirRequestMultiError, or
// nil if none found.
func (m *GetDirRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDirRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetDirRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDirRequestMultiError(errors)
	}

	return nil
}

// GetDirRequestMultiError is an error wrapping multiple validation errors
// returned by GetDirRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDirRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDirRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDirRequestMultiError) AllErrors() []error { return m }

// GetDirRequestValidationError is the validation error returned by
// GetDirRequest.Validate if the designated constraints aren't met.
type GetDirRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDirRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDirRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDirRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDirRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDirRequestValidationError) ErrorName() string { return "GetDirRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDirRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDirRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDirRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDirRequestValidationError{}

// Validate checks the field values on GetDirReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDirReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDirReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDirReplyMultiError, or
// nil if none found.
func (m *GetDirReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDirReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDir()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDirReplyValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDirReplyValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDir()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDirReplyValidationError{
				field:  "Dir",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDirReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDirReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDirReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDirReplyMultiError(errors)
	}

	return nil
}

// GetDirReplyMultiError is an error wrapping multiple validation errors
// returned by GetDirReply.ValidateAll() if the designated constraints aren't met.
type GetDirReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDirReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDirReplyMultiError) AllErrors() []error { return m }

// GetDirReplyValidationError is the validation error returned by
// GetDirReply.Validate if the designated constraints aren't met.
type GetDirReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDirReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDirReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDirReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDirReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDirReplyValidationError) ErrorName() string { return "GetDirReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDirReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDirReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDirReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDirReplyValidationError{}

// Validate checks the field values on ListDirRequestParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDirRequestParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDirRequestParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDirRequestParamsMultiError, or nil if none found.
func (m *ListDirRequestParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDirRequestParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if len(errors) > 0 {
		return ListDirRequestParamsMultiError(errors)
	}

	return nil
}

// ListDirRequestParamsMultiError is an error wrapping multiple validation
// errors returned by ListDirRequestParams.ValidateAll() if the designated
// constraints aren't met.
type ListDirRequestParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDirRequestParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDirRequestParamsMultiError) AllErrors() []error { return m }

// ListDirRequestParamsValidationError is the validation error returned by
// ListDirRequestParams.Validate if the designated constraints aren't met.
type ListDirRequestParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDirRequestParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDirRequestParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDirRequestParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDirRequestParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDirRequestParamsValidationError) ErrorName() string {
	return "ListDirRequestParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ListDirRequestParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDirRequestParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDirRequestParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDirRequestParamsValidationError{}

// Validate checks the field values on ListDirRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDirRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDirRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDirRequestMultiError,
// or nil if none found.
func (m *ListDirRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDirRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDirRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDirRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDirRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDirRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDirRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDirRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListDirRequestMultiError(errors)
	}

	return nil
}

// ListDirRequestMultiError is an error wrapping multiple validation errors
// returned by ListDirRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDirRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDirRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDirRequestMultiError) AllErrors() []error { return m }

// ListDirRequestValidationError is the validation error returned by
// ListDirRequest.Validate if the designated constraints aren't met.
type ListDirRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDirRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDirRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDirRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDirRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDirRequestValidationError) ErrorName() string { return "ListDirRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDirRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDirRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDirRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDirRequestValidationError{}

// Validate checks the field values on ListDirReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDirReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDirReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDirReplyMultiError, or
// nil if none found.
func (m *ListDirReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDirReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDirReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDirReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDirReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDirReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDirReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDirReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDirReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDirReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDirReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListDirReplyMultiError(errors)
	}

	return nil
}

// ListDirReplyMultiError is an error wrapping multiple validation errors
// returned by ListDirReply.ValidateAll() if the designated constraints aren't met.
type ListDirReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDirReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDirReplyMultiError) AllErrors() []error { return m }

// ListDirReplyValidationError is the validation error returned by
// ListDirReply.Validate if the designated constraints aren't met.
type ListDirReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDirReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDirReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDirReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDirReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDirReplyValidationError) ErrorName() string { return "ListDirReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListDirReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDirReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDirReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDirReplyValidationError{}
