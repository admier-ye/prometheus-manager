syntax = "proto3";

package api.prom.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "base.proto";
import "prom/node.proto";

option go_package = "prometheus-manager/api/prom/v1;v1";
option java_multiple_files = true;
option java_package = "api.prom.v1";

service AlarmPage {
  // CreateAlarmPage creates a new alarm page.
  rpc CreateAlarmPage (CreateAlarmPageRequest) returns (CreateAlarmPageReply) {
    option (google.api.http) = {
      post: "/prom/v1/alarm-page"
      body: "*"
    };
  }
  // UpdateAlarmPage updates an existing alarm page by id.
  rpc UpdateAlarmPage (UpdateAlarmPageRequest) returns (UpdateAlarmPageReply) {
    option (google.api.http) = {
      put: "/prom/v1/alarm-page/{id}"
      body: "*"
    };
  }
  // UpdateAlarmPagesStatus updates an existing alarm page status by ids.
  rpc UpdateAlarmPagesStatus (UpdateAlarmPagesStatusRequest) returns (UpdateAlarmPagesStatusReply) {
    option (google.api.http) = {
      put: "/prom/v1/alarm-pages/status"
      body: "*"
    };
  }
  // DeleteAlarmPage deletes an existing alarm page by id.
  rpc DeleteAlarmPage (DeleteAlarmPageRequest) returns (DeleteAlarmPageReply) {
    option (google.api.http) = {
      delete: "/prom/v1/alarm-page/{id}"
    };
  }
  // GetAlarmPage gets an existing alarm page by id.
  rpc GetAlarmPage (GetAlarmPageRequest) returns (GetAlarmPageReply) {
    option (google.api.http) = {
      post: "/prom/v1/alarm-page/{id}"
      body: "*"
    };
  }
  // ListAlarmPage gets an existing alarm page by query and alarm page.
  rpc ListAlarmPage (ListAlarmPageRequest) returns (ListAlarmPageReply) {
    option (google.api.http) = {
      post: "/prom/v1/alarm-pages"
      body: "*"
    };
  }

  // ListSimpleAlarmPage gets an existing alarm page by query and alarm page.
  rpc ListSimpleAlarmPage (ListSimpleAlarmPageRequest) returns (ListSimpleAlarmPageReply) {
    option (google.api.http) = {
      post: "/prom/v1/alarm-pages/simple"
      body: "*"
    };
  }
}

message CreateAlarmPageRequest {
  AlarmPageItem alarm_page = 1 [(validate.rules).message.required = true];
}
message CreateAlarmPageReply {
  Response response = 1;
}

message UpdateAlarmPageRequest {
  AlarmPageItem alarm_page = 1 [(validate.rules).message.required = true];
  int32 id = 2 [(validate.rules).int32.gt = 0];
}
message UpdateAlarmPageReply {
  Response response = 1;
}

message UpdateAlarmPagesStatusRequest {
  repeated int32 ids = 1 [(validate.rules).repeated = {
    min_items: 1
    items: {
      int32: {
        gt: 0
      }
    }
  }];
  Status status = 2 [(validate.rules).enum = {defined_only: true}];
}
message UpdateAlarmPagesStatusReply {
  Response response = 1;
}

message DeleteAlarmPageRequest {
  int32 id = 1 [(validate.rules).int32.gt = 0];
}
message DeleteAlarmPageReply {
  Response response = 1;
}

message GetAlarmPageRequest {
  int32 id = 1 [(validate.rules).int32.gt = 0];
  ListQuery query = 2;
  StrategyItem strategy = 3;
}
message GetAlarmPageReply {
  AlarmPageItem alarm_page = 1;
  Response response = 2;
  ListQueryResult result = 3;
}

message ListAlarmPageRequest {
  ListQuery query = 1 [(validate.rules).message.required = true];
  AlarmPageItem alarm_page = 2;
}
message ListAlarmPageReply {
  Response response = 1;
  ListQueryResult result = 2;
  repeated AlarmPageItem alarm_pages = 3;
}

message ListSimpleAlarmPageRequest {
  PageRequest page = 1 [(validate.rules) = {message: {required: true}}];
  string keyword = 2 [(validate.rules) = {string: {max_len: 32}}];
}
message ListSimpleAlarmPageReply {
  PageReply page = 1;
  repeated AlarmPageItem alarmPages = 2;
  Response response = 3;
}