// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prom/v1/file.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFileRequestMultiError, or nil if none found.
func (m *CreateFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFile() == nil {
		err := CreateFileRequestValidationError{
			field:  "File",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFileRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFileRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFileRequestValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFileRequestMultiError(errors)
	}

	return nil
}

// CreateFileRequestMultiError is an error wrapping multiple validation errors
// returned by CreateFileRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFileRequestMultiError) AllErrors() []error { return m }

// CreateFileRequestValidationError is the validation error returned by
// CreateFileRequest.Validate if the designated constraints aren't met.
type CreateFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFileRequestValidationError) ErrorName() string {
	return "CreateFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFileRequestValidationError{}

// Validate checks the field values on CreateFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFileReplyMultiError, or nil if none found.
func (m *CreateFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFileReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFileReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFileReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFileReplyMultiError(errors)
	}

	return nil
}

// CreateFileReplyMultiError is an error wrapping multiple validation errors
// returned by CreateFileReply.ValidateAll() if the designated constraints
// aren't met.
type CreateFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFileReplyMultiError) AllErrors() []error { return m }

// CreateFileReplyValidationError is the validation error returned by
// CreateFileReply.Validate if the designated constraints aren't met.
type CreateFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFileReplyValidationError) ErrorName() string { return "CreateFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFileReplyValidationError{}

// Validate checks the field values on UpdateFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFileRequestMultiError, or nil if none found.
func (m *UpdateFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateFileRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFile() == nil {
		err := UpdateFileRequestValidationError{
			field:  "File",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFileRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFileRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFileRequestValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFileRequestMultiError(errors)
	}

	return nil
}

// UpdateFileRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateFileRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFileRequestMultiError) AllErrors() []error { return m }

// UpdateFileRequestValidationError is the validation error returned by
// UpdateFileRequest.Validate if the designated constraints aren't met.
type UpdateFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFileRequestValidationError) ErrorName() string {
	return "UpdateFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFileRequestValidationError{}

// Validate checks the field values on UpdateFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFileReplyMultiError, or nil if none found.
func (m *UpdateFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFileReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFileReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFileReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFileReplyMultiError(errors)
	}

	return nil
}

// UpdateFileReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateFileReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFileReplyMultiError) AllErrors() []error { return m }

// UpdateFileReplyValidationError is the validation error returned by
// UpdateFileReply.Validate if the designated constraints aren't met.
type UpdateFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFileReplyValidationError) ErrorName() string { return "UpdateFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFileReplyValidationError{}

// Validate checks the field values on DeleteFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileRequestMultiError, or nil if none found.
func (m *DeleteFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteFileRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteFileRequestMultiError(errors)
	}

	return nil
}

// DeleteFileRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFileRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileRequestMultiError) AllErrors() []error { return m }

// DeleteFileRequestValidationError is the validation error returned by
// DeleteFileRequest.Validate if the designated constraints aren't met.
type DeleteFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileRequestValidationError) ErrorName() string {
	return "DeleteFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileRequestValidationError{}

// Validate checks the field values on DeleteFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileReplyMultiError, or nil if none found.
func (m *DeleteFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteFileReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteFileReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteFileReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteFileReplyMultiError(errors)
	}

	return nil
}

// DeleteFileReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteFileReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileReplyMultiError) AllErrors() []error { return m }

// DeleteFileReplyValidationError is the validation error returned by
// DeleteFileReply.Validate if the designated constraints aren't met.
type DeleteFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileReplyValidationError) ErrorName() string { return "DeleteFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileReplyValidationError{}

// Validate checks the field values on GetFileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileRequestMultiError,
// or nil if none found.
func (m *GetFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetFileRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFileRequestMultiError(errors)
	}

	return nil
}

// GetFileRequestMultiError is an error wrapping multiple validation errors
// returned by GetFileRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileRequestMultiError) AllErrors() []error { return m }

// GetFileRequestValidationError is the validation error returned by
// GetFileRequest.Validate if the designated constraints aren't met.
type GetFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileRequestValidationError) ErrorName() string { return "GetFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileRequestValidationError{}

// Validate checks the field values on GetFileReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileReplyMultiError, or
// nil if none found.
func (m *GetFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileReplyValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileReplyValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileReplyValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFileReplyMultiError(errors)
	}

	return nil
}

// GetFileReplyMultiError is an error wrapping multiple validation errors
// returned by GetFileReply.ValidateAll() if the designated constraints aren't met.
type GetFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileReplyMultiError) AllErrors() []error { return m }

// GetFileReplyValidationError is the validation error returned by
// GetFileReply.Validate if the designated constraints aren't met.
type GetFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileReplyValidationError) ErrorName() string { return "GetFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileReplyValidationError{}

// Validate checks the field values on ListFileRequestParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFileRequestParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFileRequestParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFileRequestParamsMultiError, or nil if none found.
func (m *ListFileRequestParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFileRequestParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetKeyword()); l < 0 || l > 64 {
		err := ListFileRequestParamsValidationError{
			field:  "Keyword",
			reason: "value length must be between 0 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListFileRequestParamsMultiError(errors)
	}

	return nil
}

// ListFileRequestParamsMultiError is an error wrapping multiple validation
// errors returned by ListFileRequestParams.ValidateAll() if the designated
// constraints aren't met.
type ListFileRequestParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFileRequestParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFileRequestParamsMultiError) AllErrors() []error { return m }

// ListFileRequestParamsValidationError is the validation error returned by
// ListFileRequestParams.Validate if the designated constraints aren't met.
type ListFileRequestParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileRequestParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileRequestParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileRequestParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileRequestParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileRequestParamsValidationError) ErrorName() string {
	return "ListFileRequestParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ListFileRequestParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileRequestParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileRequestParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileRequestParamsValidationError{}

// Validate checks the field values on ListFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFileRequestMultiError, or nil if none found.
func (m *ListFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFileRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFileRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFileRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFileRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFileRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFileRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListFileRequestMultiError(errors)
	}

	return nil
}

// ListFileRequestMultiError is an error wrapping multiple validation errors
// returned by ListFileRequest.ValidateAll() if the designated constraints
// aren't met.
type ListFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFileRequestMultiError) AllErrors() []error { return m }

// ListFileRequestValidationError is the validation error returned by
// ListFileRequest.Validate if the designated constraints aren't met.
type ListFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileRequestValidationError) ErrorName() string { return "ListFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileRequestValidationError{}

// Validate checks the field values on ListFileReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListFileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListFileReplyMultiError, or
// nil if none found.
func (m *ListFileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFileReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFileReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFileReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFileReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFileReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFileReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFileReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFileReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFileReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFileReplyMultiError(errors)
	}

	return nil
}

// ListFileReplyMultiError is an error wrapping multiple validation errors
// returned by ListFileReply.ValidateAll() if the designated constraints
// aren't met.
type ListFileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFileReplyMultiError) AllErrors() []error { return m }

// ListFileReplyValidationError is the validation error returned by
// ListFileReply.Validate if the designated constraints aren't met.
type ListFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileReplyValidationError) ErrorName() string { return "ListFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileReplyValidationError{}
