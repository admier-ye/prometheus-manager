// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prom/v1/alarm_page.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	prom "prometheus-manager/api/prom"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = prom.Status(0)
)

// Validate checks the field values on CreateAlarmPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlarmPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlarmPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlarmPageRequestMultiError, or nil if none found.
func (m *CreateAlarmPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlarmPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAlarmPage() == nil {
		err := CreateAlarmPageRequestValidationError{
			field:  "AlarmPage",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAlarmPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAlarmPageRequestValidationError{
					field:  "AlarmPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAlarmPageRequestValidationError{
					field:  "AlarmPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlarmPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAlarmPageRequestValidationError{
				field:  "AlarmPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAlarmPageRequestMultiError(errors)
	}

	return nil
}

// CreateAlarmPageRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAlarmPageRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAlarmPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlarmPageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlarmPageRequestMultiError) AllErrors() []error { return m }

// CreateAlarmPageRequestValidationError is the validation error returned by
// CreateAlarmPageRequest.Validate if the designated constraints aren't met.
type CreateAlarmPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlarmPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlarmPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlarmPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlarmPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlarmPageRequestValidationError) ErrorName() string {
	return "CreateAlarmPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlarmPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlarmPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlarmPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlarmPageRequestValidationError{}

// Validate checks the field values on CreateAlarmPageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlarmPageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlarmPageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlarmPageReplyMultiError, or nil if none found.
func (m *CreateAlarmPageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlarmPageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAlarmPageReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAlarmPageReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAlarmPageReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAlarmPageReplyMultiError(errors)
	}

	return nil
}

// CreateAlarmPageReplyMultiError is an error wrapping multiple validation
// errors returned by CreateAlarmPageReply.ValidateAll() if the designated
// constraints aren't met.
type CreateAlarmPageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlarmPageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlarmPageReplyMultiError) AllErrors() []error { return m }

// CreateAlarmPageReplyValidationError is the validation error returned by
// CreateAlarmPageReply.Validate if the designated constraints aren't met.
type CreateAlarmPageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlarmPageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlarmPageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlarmPageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlarmPageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlarmPageReplyValidationError) ErrorName() string {
	return "CreateAlarmPageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlarmPageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlarmPageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlarmPageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlarmPageReplyValidationError{}

// Validate checks the field values on UpdateAlarmPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlarmPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlarmPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlarmPageRequestMultiError, or nil if none found.
func (m *UpdateAlarmPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlarmPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAlarmPage() == nil {
		err := UpdateAlarmPageRequestValidationError{
			field:  "AlarmPage",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAlarmPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAlarmPageRequestValidationError{
					field:  "AlarmPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAlarmPageRequestValidationError{
					field:  "AlarmPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlarmPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAlarmPageRequestValidationError{
				field:  "AlarmPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetId() <= 0 {
		err := UpdateAlarmPageRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateAlarmPageRequestMultiError(errors)
	}

	return nil
}

// UpdateAlarmPageRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAlarmPageRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAlarmPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlarmPageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlarmPageRequestMultiError) AllErrors() []error { return m }

// UpdateAlarmPageRequestValidationError is the validation error returned by
// UpdateAlarmPageRequest.Validate if the designated constraints aren't met.
type UpdateAlarmPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlarmPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlarmPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlarmPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlarmPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlarmPageRequestValidationError) ErrorName() string {
	return "UpdateAlarmPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlarmPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlarmPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlarmPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlarmPageRequestValidationError{}

// Validate checks the field values on UpdateAlarmPageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlarmPageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlarmPageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlarmPageReplyMultiError, or nil if none found.
func (m *UpdateAlarmPageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlarmPageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAlarmPageReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAlarmPageReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAlarmPageReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAlarmPageReplyMultiError(errors)
	}

	return nil
}

// UpdateAlarmPageReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateAlarmPageReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateAlarmPageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlarmPageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlarmPageReplyMultiError) AllErrors() []error { return m }

// UpdateAlarmPageReplyValidationError is the validation error returned by
// UpdateAlarmPageReply.Validate if the designated constraints aren't met.
type UpdateAlarmPageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlarmPageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlarmPageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlarmPageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlarmPageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlarmPageReplyValidationError) ErrorName() string {
	return "UpdateAlarmPageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlarmPageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlarmPageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlarmPageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlarmPageReplyValidationError{}

// Validate checks the field values on UpdateAlarmPagesStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlarmPagesStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlarmPagesStatusRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAlarmPagesStatusRequestMultiError, or nil if none found.
func (m *UpdateAlarmPagesStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlarmPagesStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := UpdateAlarmPagesStatusRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if item <= 0 {
			err := UpdateAlarmPagesStatusRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if _, ok := prom.Status_name[int32(m.GetStatus())]; !ok {
		err := UpdateAlarmPagesStatusRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateAlarmPagesStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateAlarmPagesStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAlarmPagesStatusRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateAlarmPagesStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlarmPagesStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlarmPagesStatusRequestMultiError) AllErrors() []error { return m }

// UpdateAlarmPagesStatusRequestValidationError is the validation error
// returned by UpdateAlarmPagesStatusRequest.Validate if the designated
// constraints aren't met.
type UpdateAlarmPagesStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlarmPagesStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlarmPagesStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlarmPagesStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlarmPagesStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlarmPagesStatusRequestValidationError) ErrorName() string {
	return "UpdateAlarmPagesStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlarmPagesStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlarmPagesStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlarmPagesStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlarmPagesStatusRequestValidationError{}

// Validate checks the field values on UpdateAlarmPagesStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlarmPagesStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlarmPagesStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlarmPagesStatusReplyMultiError, or nil if none found.
func (m *UpdateAlarmPagesStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlarmPagesStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAlarmPagesStatusReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAlarmPagesStatusReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAlarmPagesStatusReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAlarmPagesStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateAlarmPagesStatusReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateAlarmPagesStatusReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateAlarmPagesStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlarmPagesStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlarmPagesStatusReplyMultiError) AllErrors() []error { return m }

// UpdateAlarmPagesStatusReplyValidationError is the validation error returned
// by UpdateAlarmPagesStatusReply.Validate if the designated constraints
// aren't met.
type UpdateAlarmPagesStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlarmPagesStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlarmPagesStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlarmPagesStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlarmPagesStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlarmPagesStatusReplyValidationError) ErrorName() string {
	return "UpdateAlarmPagesStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlarmPagesStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlarmPagesStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlarmPagesStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlarmPagesStatusReplyValidationError{}

// Validate checks the field values on DeleteAlarmPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAlarmPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAlarmPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAlarmPageRequestMultiError, or nil if none found.
func (m *DeleteAlarmPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAlarmPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAlarmPageRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAlarmPageRequestMultiError(errors)
	}

	return nil
}

// DeleteAlarmPageRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAlarmPageRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAlarmPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAlarmPageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAlarmPageRequestMultiError) AllErrors() []error { return m }

// DeleteAlarmPageRequestValidationError is the validation error returned by
// DeleteAlarmPageRequest.Validate if the designated constraints aren't met.
type DeleteAlarmPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAlarmPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAlarmPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAlarmPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAlarmPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAlarmPageRequestValidationError) ErrorName() string {
	return "DeleteAlarmPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAlarmPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAlarmPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAlarmPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAlarmPageRequestValidationError{}

// Validate checks the field values on DeleteAlarmPageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAlarmPageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAlarmPageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAlarmPageReplyMultiError, or nil if none found.
func (m *DeleteAlarmPageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAlarmPageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAlarmPageReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAlarmPageReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAlarmPageReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteAlarmPageReplyMultiError(errors)
	}

	return nil
}

// DeleteAlarmPageReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteAlarmPageReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteAlarmPageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAlarmPageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAlarmPageReplyMultiError) AllErrors() []error { return m }

// DeleteAlarmPageReplyValidationError is the validation error returned by
// DeleteAlarmPageReply.Validate if the designated constraints aren't met.
type DeleteAlarmPageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAlarmPageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAlarmPageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAlarmPageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAlarmPageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAlarmPageReplyValidationError) ErrorName() string {
	return "DeleteAlarmPageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAlarmPageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAlarmPageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAlarmPageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAlarmPageReplyValidationError{}

// Validate checks the field values on GetAlarmPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlarmPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlarmPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlarmPageRequestMultiError, or nil if none found.
func (m *GetAlarmPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlarmPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetAlarmPageRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlarmPageRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlarmPageRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlarmPageRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlarmPageRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlarmPageRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlarmPageRequestValidationError{
				field:  "Strategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlarmPageRequestMultiError(errors)
	}

	return nil
}

// GetAlarmPageRequestMultiError is an error wrapping multiple validation
// errors returned by GetAlarmPageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAlarmPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlarmPageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlarmPageRequestMultiError) AllErrors() []error { return m }

// GetAlarmPageRequestValidationError is the validation error returned by
// GetAlarmPageRequest.Validate if the designated constraints aren't met.
type GetAlarmPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlarmPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlarmPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlarmPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlarmPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlarmPageRequestValidationError) ErrorName() string {
	return "GetAlarmPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlarmPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlarmPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlarmPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlarmPageRequestValidationError{}

// Validate checks the field values on GetAlarmPageReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAlarmPageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlarmPageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlarmPageReplyMultiError, or nil if none found.
func (m *GetAlarmPageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlarmPageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAlarmPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlarmPageReplyValidationError{
					field:  "AlarmPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlarmPageReplyValidationError{
					field:  "AlarmPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlarmPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlarmPageReplyValidationError{
				field:  "AlarmPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlarmPageReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlarmPageReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlarmPageReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlarmPageReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlarmPageReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlarmPageReplyValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlarmPageReplyMultiError(errors)
	}

	return nil
}

// GetAlarmPageReplyMultiError is an error wrapping multiple validation errors
// returned by GetAlarmPageReply.ValidateAll() if the designated constraints
// aren't met.
type GetAlarmPageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlarmPageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlarmPageReplyMultiError) AllErrors() []error { return m }

// GetAlarmPageReplyValidationError is the validation error returned by
// GetAlarmPageReply.Validate if the designated constraints aren't met.
type GetAlarmPageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlarmPageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlarmPageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlarmPageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlarmPageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlarmPageReplyValidationError) ErrorName() string {
	return "GetAlarmPageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlarmPageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlarmPageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlarmPageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlarmPageReplyValidationError{}

// Validate checks the field values on ListAlarmPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAlarmPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAlarmPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAlarmPageRequestMultiError, or nil if none found.
func (m *ListAlarmPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAlarmPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetQuery() == nil {
		err := ListAlarmPageRequestValidationError{
			field:  "Query",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAlarmPageRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAlarmPageRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAlarmPageRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAlarmPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAlarmPageRequestValidationError{
					field:  "AlarmPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAlarmPageRequestValidationError{
					field:  "AlarmPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlarmPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAlarmPageRequestValidationError{
				field:  "AlarmPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAlarmPageRequestMultiError(errors)
	}

	return nil
}

// ListAlarmPageRequestMultiError is an error wrapping multiple validation
// errors returned by ListAlarmPageRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAlarmPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAlarmPageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAlarmPageRequestMultiError) AllErrors() []error { return m }

// ListAlarmPageRequestValidationError is the validation error returned by
// ListAlarmPageRequest.Validate if the designated constraints aren't met.
type ListAlarmPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlarmPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlarmPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlarmPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlarmPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlarmPageRequestValidationError) ErrorName() string {
	return "ListAlarmPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlarmPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlarmPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlarmPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlarmPageRequestValidationError{}

// Validate checks the field values on ListAlarmPageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAlarmPageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAlarmPageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAlarmPageReplyMultiError, or nil if none found.
func (m *ListAlarmPageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAlarmPageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAlarmPageReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAlarmPageReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAlarmPageReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAlarmPageReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAlarmPageReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAlarmPageReplyValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAlarmPages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAlarmPageReplyValidationError{
						field:  fmt.Sprintf("AlarmPages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAlarmPageReplyValidationError{
						field:  fmt.Sprintf("AlarmPages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAlarmPageReplyValidationError{
					field:  fmt.Sprintf("AlarmPages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAlarmPageReplyMultiError(errors)
	}

	return nil
}

// ListAlarmPageReplyMultiError is an error wrapping multiple validation errors
// returned by ListAlarmPageReply.ValidateAll() if the designated constraints
// aren't met.
type ListAlarmPageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAlarmPageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAlarmPageReplyMultiError) AllErrors() []error { return m }

// ListAlarmPageReplyValidationError is the validation error returned by
// ListAlarmPageReply.Validate if the designated constraints aren't met.
type ListAlarmPageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlarmPageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlarmPageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlarmPageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlarmPageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlarmPageReplyValidationError) ErrorName() string {
	return "ListAlarmPageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlarmPageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlarmPageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlarmPageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlarmPageReplyValidationError{}
