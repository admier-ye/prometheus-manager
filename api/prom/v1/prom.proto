syntax = "proto3";

package api.prom.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "base.proto";
import "prom/node.proto";

option go_package = "prometheus-manager/api/prom/v1;v1";
option java_multiple_files = true;
option java_package = "api.prom.v1";

service Prom {
  /* ----------------------Group 规则组--------------------------*/
  // CreateGroup 创建规则组
  rpc CreateGroup (CreateGroupRequest) returns (CreateGroupReply) {
    option (google.api.http) = {
      post: "/prom/v1/group"
      body: "*"
    };
  }
  // UpdateGroup 更新规则组, 传入id更新指定的规则组
  rpc UpdateGroup (UpdateGroupRequest) returns (UpdateGroupReply) {
    option (google.api.http) = {
      put: "/prom/v1/group/{id}"
      body: "*"
    };
  }
  // UpdateGroupStatus 批量更新规则组状态
  rpc UpdateGroupsStatus (UpdateGroupsStatusRequest) returns (UpdateGroupsStatusReply) {
    option (google.api.http) = {
      put: "/prom/v1/groups/status"
      body: "*"
    };
  }
  // DeleteGroup 删除规则组, 传入id删除指定的规则组
  rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupReply) {
    option (google.api.http) = {
      delete: "/prom/v1/group/{id}"
    };
  }
  // GetGroup 获取规则组, 传入id获取指定的规则组
  rpc GetGroup (GetGroupRequest) returns (GetGroupReply) {
    option (google.api.http) = {
      get: "/prom/v1/group/{id}"
    };
  }
  // ListGroup 获取规则组列表
  rpc ListGroup (ListGroupRequest) returns (ListGroupReply) {
    option (google.api.http) = {
      post: "/prom/v1/groups"
      body: "*"
    };
  }

  // ListSimpleGroup 获取规则组简单列表
  rpc ListSimpleGroup(ListSimpleGroupRequest) returns(ListSimpleGroupReply) {
    option (google.api.http) = {
      post: "/prom/v1/groups/simple"
      body: "*"
    };
  }

  /* ----------------------Group 规则组 END--------------------------*/

  /* --------------------------------规则策略-------------------------------*/
  // CreateStrategy 创建规则策略
  rpc CreateStrategy (CreateStrategyRequest) returns (CreateStrategyReply) {
    option (google.api.http) = {
      post: "/prom/v1/strategy"
      body: "*"
    };
  }
  // UpdateStrategy 更新规则策略, 传入id更新指定的规则策略
  rpc UpdateStrategy (UpdateStrategyRequest) returns (UpdateStrategyReply) {
    option (google.api.http) = {
      put: "/prom/v1/strategy/{id}"
      body: "*"
    };
  }
  // UpdateStrategiesStatus 批量更新规则策略状态
  rpc UpdateStrategiesStatus (UpdateStrategiesStatusRequest) returns (UpdateStrategiesStatusReply) {
    option (google.api.http) = {
      put: "/prom/v1/strategies/status"
      body: "*"
    };
  }
  // DeleteStrategy 删除规则策略, 传入id删除指定的规则策略
  rpc DeleteStrategy (DeleteStrategyRequest) returns (DeleteStrategyReply) {
    option (google.api.http) = {
      delete: "/prom/v1/strategy/{id}"
    };
  }
  // GetStrategy 获取规则策略, 传入id获取指定的规则策略
  rpc GetStrategy (GetStrategyRequest) returns (GetStrategyReply) {
    option (google.api.http) = {
      get: "/prom/v1/strategy/{id}"
    };
  }
  // ListStrategy 获取规则策略列表
  rpc ListStrategy (ListStrategyRequest) returns (ListStrategyReply) {
    option (google.api.http) = {
      post: "/prom/v1/strategies"
      body: "*"
    };
  }
  /* --------------------------------规则策略END-------------------------------*/
}

message CreateGroupRequest {
  GroupItem group = 1 [(validate.rules).message = {
    required: true,
  }];
}
message CreateGroupReply {
  Response response = 1;
}

message UpdateGroupRequest {
  GroupItem group = 1 [(validate.rules).message = {
    required: true,
  }];
  int32 id = 2 [(validate.rules).int32 = {
    gt: 0,
  }];
}
message UpdateGroupReply {
  Response response = 1;
}

message UpdateGroupsStatusRequest {
  Status status = 1 [(validate.rules).enum.defined_only = true];
  repeated int32 ids = 2 [(validate.rules).repeated = {
    items: {
      int32: {
        gt: 0,
      }
    },
    min_items: 1,
  }];
}
message UpdateGroupsStatusReply {
  Response response = 1;
}

message DeleteGroupRequest {
  int32 id = 1 [(validate.rules).int32 = {
    gt: 0,
  }];
}
message DeleteGroupReply {
  Response response = 1;
}

message GetGroupRequest {
  int32 id = 1 [(validate.rules).int32 = {
    gt: 0,
  }];
}
message GetGroupReply {
  Response response = 1;
  GroupItem group = 2;
}

message ListGroupRequest {
  ListQuery query = 1  [(validate.rules).message = {
    required: true,
  }];
  GroupItem group = 2;
}
message ListGroupReply {
  Response response = 1;
  ListQueryResult result = 2;
  repeated GroupItem groups = 3;
}

message CreateStrategyRequest {
  StrategyItem strategy = 1 [(validate.rules).message = {
    required: true,
  }];
}
message CreateStrategyReply {
  Response response = 1;
}

message UpdateStrategyRequest {
  StrategyItem strategy = 1 [(validate.rules).message = {
    required: true,
  }];
  int32 id = 2 [(validate.rules).int32 = {
    gt: 0,
  }];
}
message UpdateStrategyReply {
  Response response = 1;
}

message UpdateStrategiesStatusRequest {
  Status status = 1 [(validate.rules).enum.defined_only = true];
  repeated int32 ids = 2 [(validate.rules).repeated = {
    items: {
      int32: {
        gt: 0,
      }
    },
    min_items: 1,
  }];
}
message UpdateStrategiesStatusReply {
  Response response = 1;
}

message DeleteStrategyRequest {
  int32 id = 1 [(validate.rules).int32 = {
    gt: 0,
  }];
}
message DeleteStrategyReply {
  Response response = 1;
}

message GetStrategyRequest {
  int32 id = 1 [(validate.rules).int32 = {
    gt: 0,
  }];
}
message GetStrategyReply {
  Response response = 1;
  StrategyItem strategy = 2;
}

message ListStrategyRequest {
  ListQuery query = 1  [(validate.rules).message = {
    required: true,
  }];
  StrategyItem strategy = 2;
}
message ListStrategyReply {
  Response response = 1;
  ListQueryResult result = 2;
  repeated StrategyItem strategies = 3;
}

message ListSimpleGroupRequest {
  PageRequest page = 1 [(validate.rules) = {message: {required: true}}];
  string keyword = 2;
}
message ListSimpleGroupReply {
  PageReply page = 1;
  repeated SimpleItem groups = 2;
  Response response = 3;
}

