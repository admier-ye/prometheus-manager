// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: prom/v1/prom.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PromClient is the client API for Prom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromClient interface {
	// CreateGroup 创建规则组
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupReply, error)
	// UpdateGroup 更新规则组, 传入id更新指定的规则组
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupReply, error)
	// UpdateGroupStatus 批量更新规则组状态
	UpdateGroupsStatus(ctx context.Context, in *UpdateGroupsStatusRequest, opts ...grpc.CallOption) (*UpdateGroupsStatusReply, error)
	// DeleteGroup 删除规则组, 传入id删除指定的规则组
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupReply, error)
	// GetGroup 获取规则组, 传入id获取指定的规则组
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error)
	// ListGroup 获取规则组列表
	ListGroup(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*ListGroupReply, error)
	// ListSimpleGroup 获取规则组简单列表
	ListSimpleGroup(ctx context.Context, in *ListSimpleGroupRequest, opts ...grpc.CallOption) (*ListSimpleGroupReply, error)
	// CreateStrategy 创建规则策略
	CreateStrategy(ctx context.Context, in *CreateStrategyRequest, opts ...grpc.CallOption) (*CreateStrategyReply, error)
	// UpdateStrategy 更新规则策略, 传入id更新指定的规则策略
	UpdateStrategy(ctx context.Context, in *UpdateStrategyRequest, opts ...grpc.CallOption) (*UpdateStrategyReply, error)
	// UpdateStrategiesStatus 批量更新规则策略状态
	UpdateStrategiesStatus(ctx context.Context, in *UpdateStrategiesStatusRequest, opts ...grpc.CallOption) (*UpdateStrategiesStatusReply, error)
	// DeleteStrategy 删除规则策略, 传入id删除指定的规则策略
	DeleteStrategy(ctx context.Context, in *DeleteStrategyRequest, opts ...grpc.CallOption) (*DeleteStrategyReply, error)
	// GetStrategy 获取规则策略, 传入id获取指定的规则策略
	GetStrategy(ctx context.Context, in *GetStrategyRequest, opts ...grpc.CallOption) (*GetStrategyReply, error)
	// ListStrategy 获取规则策略列表
	ListStrategy(ctx context.Context, in *ListStrategyRequest, opts ...grpc.CallOption) (*ListStrategyReply, error)
}

type promClient struct {
	cc grpc.ClientConnInterface
}

func NewPromClient(cc grpc.ClientConnInterface) PromClient {
	return &promClient{cc}
}

func (c *promClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupReply, error) {
	out := new(CreateGroupReply)
	err := c.cc.Invoke(ctx, "/api.prom.v1.Prom/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupReply, error) {
	out := new(UpdateGroupReply)
	err := c.cc.Invoke(ctx, "/api.prom.v1.Prom/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promClient) UpdateGroupsStatus(ctx context.Context, in *UpdateGroupsStatusRequest, opts ...grpc.CallOption) (*UpdateGroupsStatusReply, error) {
	out := new(UpdateGroupsStatusReply)
	err := c.cc.Invoke(ctx, "/api.prom.v1.Prom/UpdateGroupsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupReply, error) {
	out := new(DeleteGroupReply)
	err := c.cc.Invoke(ctx, "/api.prom.v1.Prom/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error) {
	out := new(GetGroupReply)
	err := c.cc.Invoke(ctx, "/api.prom.v1.Prom/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promClient) ListGroup(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*ListGroupReply, error) {
	out := new(ListGroupReply)
	err := c.cc.Invoke(ctx, "/api.prom.v1.Prom/ListGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promClient) ListSimpleGroup(ctx context.Context, in *ListSimpleGroupRequest, opts ...grpc.CallOption) (*ListSimpleGroupReply, error) {
	out := new(ListSimpleGroupReply)
	err := c.cc.Invoke(ctx, "/api.prom.v1.Prom/ListSimpleGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promClient) CreateStrategy(ctx context.Context, in *CreateStrategyRequest, opts ...grpc.CallOption) (*CreateStrategyReply, error) {
	out := new(CreateStrategyReply)
	err := c.cc.Invoke(ctx, "/api.prom.v1.Prom/CreateStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promClient) UpdateStrategy(ctx context.Context, in *UpdateStrategyRequest, opts ...grpc.CallOption) (*UpdateStrategyReply, error) {
	out := new(UpdateStrategyReply)
	err := c.cc.Invoke(ctx, "/api.prom.v1.Prom/UpdateStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promClient) UpdateStrategiesStatus(ctx context.Context, in *UpdateStrategiesStatusRequest, opts ...grpc.CallOption) (*UpdateStrategiesStatusReply, error) {
	out := new(UpdateStrategiesStatusReply)
	err := c.cc.Invoke(ctx, "/api.prom.v1.Prom/UpdateStrategiesStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promClient) DeleteStrategy(ctx context.Context, in *DeleteStrategyRequest, opts ...grpc.CallOption) (*DeleteStrategyReply, error) {
	out := new(DeleteStrategyReply)
	err := c.cc.Invoke(ctx, "/api.prom.v1.Prom/DeleteStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promClient) GetStrategy(ctx context.Context, in *GetStrategyRequest, opts ...grpc.CallOption) (*GetStrategyReply, error) {
	out := new(GetStrategyReply)
	err := c.cc.Invoke(ctx, "/api.prom.v1.Prom/GetStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promClient) ListStrategy(ctx context.Context, in *ListStrategyRequest, opts ...grpc.CallOption) (*ListStrategyReply, error) {
	out := new(ListStrategyReply)
	err := c.cc.Invoke(ctx, "/api.prom.v1.Prom/ListStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromServer is the server API for Prom service.
// All implementations must embed UnimplementedPromServer
// for forward compatibility
type PromServer interface {
	// CreateGroup 创建规则组
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupReply, error)
	// UpdateGroup 更新规则组, 传入id更新指定的规则组
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupReply, error)
	// UpdateGroupStatus 批量更新规则组状态
	UpdateGroupsStatus(context.Context, *UpdateGroupsStatusRequest) (*UpdateGroupsStatusReply, error)
	// DeleteGroup 删除规则组, 传入id删除指定的规则组
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupReply, error)
	// GetGroup 获取规则组, 传入id获取指定的规则组
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error)
	// ListGroup 获取规则组列表
	ListGroup(context.Context, *ListGroupRequest) (*ListGroupReply, error)
	// ListSimpleGroup 获取规则组简单列表
	ListSimpleGroup(context.Context, *ListSimpleGroupRequest) (*ListSimpleGroupReply, error)
	// CreateStrategy 创建规则策略
	CreateStrategy(context.Context, *CreateStrategyRequest) (*CreateStrategyReply, error)
	// UpdateStrategy 更新规则策略, 传入id更新指定的规则策略
	UpdateStrategy(context.Context, *UpdateStrategyRequest) (*UpdateStrategyReply, error)
	// UpdateStrategiesStatus 批量更新规则策略状态
	UpdateStrategiesStatus(context.Context, *UpdateStrategiesStatusRequest) (*UpdateStrategiesStatusReply, error)
	// DeleteStrategy 删除规则策略, 传入id删除指定的规则策略
	DeleteStrategy(context.Context, *DeleteStrategyRequest) (*DeleteStrategyReply, error)
	// GetStrategy 获取规则策略, 传入id获取指定的规则策略
	GetStrategy(context.Context, *GetStrategyRequest) (*GetStrategyReply, error)
	// ListStrategy 获取规则策略列表
	ListStrategy(context.Context, *ListStrategyRequest) (*ListStrategyReply, error)
	mustEmbedUnimplementedPromServer()
}

// UnimplementedPromServer must be embedded to have forward compatible implementations.
type UnimplementedPromServer struct {
}

func (UnimplementedPromServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedPromServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedPromServer) UpdateGroupsStatus(context.Context, *UpdateGroupsStatusRequest) (*UpdateGroupsStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupsStatus not implemented")
}
func (UnimplementedPromServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedPromServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedPromServer) ListGroup(context.Context, *ListGroupRequest) (*ListGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (UnimplementedPromServer) ListSimpleGroup(context.Context, *ListSimpleGroupRequest) (*ListSimpleGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSimpleGroup not implemented")
}
func (UnimplementedPromServer) CreateStrategy(context.Context, *CreateStrategyRequest) (*CreateStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStrategy not implemented")
}
func (UnimplementedPromServer) UpdateStrategy(context.Context, *UpdateStrategyRequest) (*UpdateStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStrategy not implemented")
}
func (UnimplementedPromServer) UpdateStrategiesStatus(context.Context, *UpdateStrategiesStatusRequest) (*UpdateStrategiesStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStrategiesStatus not implemented")
}
func (UnimplementedPromServer) DeleteStrategy(context.Context, *DeleteStrategyRequest) (*DeleteStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStrategy not implemented")
}
func (UnimplementedPromServer) GetStrategy(context.Context, *GetStrategyRequest) (*GetStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategy not implemented")
}
func (UnimplementedPromServer) ListStrategy(context.Context, *ListStrategyRequest) (*ListStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStrategy not implemented")
}
func (UnimplementedPromServer) mustEmbedUnimplementedPromServer() {}

// UnsafePromServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromServer will
// result in compilation errors.
type UnsafePromServer interface {
	mustEmbedUnimplementedPromServer()
}

func RegisterPromServer(s grpc.ServiceRegistrar, srv PromServer) {
	s.RegisterService(&Prom_ServiceDesc, srv)
}

func _Prom_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.v1.Prom/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prom_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.v1.Prom/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prom_UpdateGroupsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServer).UpdateGroupsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.v1.Prom/UpdateGroupsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServer).UpdateGroupsStatus(ctx, req.(*UpdateGroupsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prom_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.v1.Prom/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prom_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.v1.Prom/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prom_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.v1.Prom/ListGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServer).ListGroup(ctx, req.(*ListGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prom_ListSimpleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSimpleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServer).ListSimpleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.v1.Prom/ListSimpleGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServer).ListSimpleGroup(ctx, req.(*ListSimpleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prom_CreateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServer).CreateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.v1.Prom/CreateStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServer).CreateStrategy(ctx, req.(*CreateStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prom_UpdateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServer).UpdateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.v1.Prom/UpdateStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServer).UpdateStrategy(ctx, req.(*UpdateStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prom_UpdateStrategiesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStrategiesStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServer).UpdateStrategiesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.v1.Prom/UpdateStrategiesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServer).UpdateStrategiesStatus(ctx, req.(*UpdateStrategiesStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prom_DeleteStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServer).DeleteStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.v1.Prom/DeleteStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServer).DeleteStrategy(ctx, req.(*DeleteStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prom_GetStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServer).GetStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.v1.Prom/GetStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServer).GetStrategy(ctx, req.(*GetStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prom_ListStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServer).ListStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.prom.v1.Prom/ListStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServer).ListStrategy(ctx, req.(*ListStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Prom_ServiceDesc is the grpc.ServiceDesc for Prom service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prom_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.prom.v1.Prom",
	HandlerType: (*PromServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _Prom_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Prom_UpdateGroup_Handler,
		},
		{
			MethodName: "UpdateGroupsStatus",
			Handler:    _Prom_UpdateGroupsStatus_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Prom_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _Prom_GetGroup_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _Prom_ListGroup_Handler,
		},
		{
			MethodName: "ListSimpleGroup",
			Handler:    _Prom_ListSimpleGroup_Handler,
		},
		{
			MethodName: "CreateStrategy",
			Handler:    _Prom_CreateStrategy_Handler,
		},
		{
			MethodName: "UpdateStrategy",
			Handler:    _Prom_UpdateStrategy_Handler,
		},
		{
			MethodName: "UpdateStrategiesStatus",
			Handler:    _Prom_UpdateStrategiesStatus_Handler,
		},
		{
			MethodName: "DeleteStrategy",
			Handler:    _Prom_DeleteStrategy_Handler,
		},
		{
			MethodName: "GetStrategy",
			Handler:    _Prom_GetStrategy_Handler,
		},
		{
			MethodName: "ListStrategy",
			Handler:    _Prom_ListStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prom/v1/prom.proto",
}
