// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.4
// source: prom/v1/node.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNodeCreateNode = "/api.prom.v1.Node/CreateNode"
const OperationNodeDeleteNode = "/api.prom.v1.Node/DeleteNode"
const OperationNodeGetNode = "/api.prom.v1.Node/GetNode"
const OperationNodeListNode = "/api.prom.v1.Node/ListNode"
const OperationNodeUpdateNode = "/api.prom.v1.Node/UpdateNode"

type NodeHTTPServer interface {
	CreateNode(context.Context, *CreateNodeRequest) (*CreateNodeReply, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*DeleteNodeReply, error)
	GetNode(context.Context, *GetNodeRequest) (*GetNodeReply, error)
	ListNode(context.Context, *ListNodeRequest) (*ListNodeReply, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeReply, error)
}

func RegisterNodeHTTPServer(s *http.Server, srv NodeHTTPServer) {
	r := s.Route("/")
	r.POST("/prom/v1/node/add", _Node_CreateNode0_HTTP_Handler(srv))
	r.PUT("/prom/v1/node/edit/{id}", _Node_UpdateNode0_HTTP_Handler(srv))
	r.DELETE("/prom/v1/node/delete/{id}", _Node_DeleteNode0_HTTP_Handler(srv))
	r.GET("/prom/v1/node/detail/{id}", _Node_GetNode0_HTTP_Handler(srv))
	r.POST("/prom/v1/node/list", _Node_ListNode0_HTTP_Handler(srv))
}

func _Node_CreateNode0_HTTP_Handler(srv NodeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateNodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeCreateNode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNode(ctx, req.(*CreateNodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNodeReply)
		return ctx.Result(200, reply)
	}
}

func _Node_UpdateNode0_HTTP_Handler(srv NodeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeUpdateNode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateNode(ctx, req.(*UpdateNodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateNodeReply)
		return ctx.Result(200, reply)
	}
}

func _Node_DeleteNode0_HTTP_Handler(srv NodeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNodeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeDeleteNode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteNode(ctx, req.(*DeleteNodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteNodeReply)
		return ctx.Result(200, reply)
	}
}

func _Node_GetNode0_HTTP_Handler(srv NodeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNodeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeGetNode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNode(ctx, req.(*GetNodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNodeReply)
		return ctx.Result(200, reply)
	}
}

func _Node_ListNode0_HTTP_Handler(srv NodeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListNodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeListNode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListNode(ctx, req.(*ListNodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListNodeReply)
		return ctx.Result(200, reply)
	}
}

type NodeHTTPClient interface {
	CreateNode(ctx context.Context, req *CreateNodeRequest, opts ...http.CallOption) (rsp *CreateNodeReply, err error)
	DeleteNode(ctx context.Context, req *DeleteNodeRequest, opts ...http.CallOption) (rsp *DeleteNodeReply, err error)
	GetNode(ctx context.Context, req *GetNodeRequest, opts ...http.CallOption) (rsp *GetNodeReply, err error)
	ListNode(ctx context.Context, req *ListNodeRequest, opts ...http.CallOption) (rsp *ListNodeReply, err error)
	UpdateNode(ctx context.Context, req *UpdateNodeRequest, opts ...http.CallOption) (rsp *UpdateNodeReply, err error)
}

type NodeHTTPClientImpl struct {
	cc *http.Client
}

func NewNodeHTTPClient(client *http.Client) NodeHTTPClient {
	return &NodeHTTPClientImpl{client}
}

func (c *NodeHTTPClientImpl) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...http.CallOption) (*CreateNodeReply, error) {
	var out CreateNodeReply
	pattern := "/prom/v1/node/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNodeCreateNode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NodeHTTPClientImpl) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...http.CallOption) (*DeleteNodeReply, error) {
	var out DeleteNodeReply
	pattern := "/prom/v1/node/delete/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNodeDeleteNode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NodeHTTPClientImpl) GetNode(ctx context.Context, in *GetNodeRequest, opts ...http.CallOption) (*GetNodeReply, error) {
	var out GetNodeReply
	pattern := "/prom/v1/node/detail/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNodeGetNode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NodeHTTPClientImpl) ListNode(ctx context.Context, in *ListNodeRequest, opts ...http.CallOption) (*ListNodeReply, error) {
	var out ListNodeReply
	pattern := "/prom/v1/node/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNodeListNode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NodeHTTPClientImpl) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...http.CallOption) (*UpdateNodeReply, error) {
	var out UpdateNodeReply
	pattern := "/prom/v1/node/edit/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNodeUpdateNode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
