// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prom/v1/dict.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	prom "prometheus-manager/api/prom"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = prom.Status(0)
)

// Validate checks the field values on CreateDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictRequestMultiError, or nil if none found.
func (m *CreateDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDict() == nil {
		err := CreateDictRequestValidationError{
			field:  "Dict",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDict()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDictRequestValidationError{
					field:  "Dict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDictRequestValidationError{
					field:  "Dict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDict()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDictRequestValidationError{
				field:  "Dict",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDictRequestMultiError(errors)
	}

	return nil
}

// CreateDictRequestMultiError is an error wrapping multiple validation errors
// returned by CreateDictRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictRequestMultiError) AllErrors() []error { return m }

// CreateDictRequestValidationError is the validation error returned by
// CreateDictRequest.Validate if the designated constraints aren't met.
type CreateDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictRequestValidationError) ErrorName() string {
	return "CreateDictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictRequestValidationError{}

// Validate checks the field values on CreateDictReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDictReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictReplyMultiError, or nil if none found.
func (m *CreateDictReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDictReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDictReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDictReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDictReplyMultiError(errors)
	}

	return nil
}

// CreateDictReplyMultiError is an error wrapping multiple validation errors
// returned by CreateDictReply.ValidateAll() if the designated constraints
// aren't met.
type CreateDictReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictReplyMultiError) AllErrors() []error { return m }

// CreateDictReplyValidationError is the validation error returned by
// CreateDictReply.Validate if the designated constraints aren't met.
type CreateDictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictReplyValidationError) ErrorName() string { return "CreateDictReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateDictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictReplyValidationError{}

// Validate checks the field values on UpdateDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictRequestMultiError, or nil if none found.
func (m *UpdateDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDict() == nil {
		err := UpdateDictRequestValidationError{
			field:  "Dict",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDict()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictRequestValidationError{
					field:  "Dict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictRequestValidationError{
					field:  "Dict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDict()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictRequestValidationError{
				field:  "Dict",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetId() <= 0 {
		err := UpdateDictRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDictRequestMultiError(errors)
	}

	return nil
}

// UpdateDictRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateDictRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictRequestMultiError) AllErrors() []error { return m }

// UpdateDictRequestValidationError is the validation error returned by
// UpdateDictRequest.Validate if the designated constraints aren't met.
type UpdateDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictRequestValidationError) ErrorName() string {
	return "UpdateDictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictRequestValidationError{}

// Validate checks the field values on UpdateDictReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictReplyMultiError, or nil if none found.
func (m *UpdateDictReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDictReplyMultiError(errors)
	}

	return nil
}

// UpdateDictReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateDictReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateDictReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictReplyMultiError) AllErrors() []error { return m }

// UpdateDictReplyValidationError is the validation error returned by
// UpdateDictReply.Validate if the designated constraints aren't met.
type UpdateDictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictReplyValidationError) ErrorName() string { return "UpdateDictReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictReplyValidationError{}

// Validate checks the field values on UpdateDictsStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictsStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictsStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictsStatusRequestMultiError, or nil if none found.
func (m *UpdateDictsStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictsStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := UpdateDictsStatusRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if item <= 0 {
			err := UpdateDictsStatusRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if _, ok := prom.Status_name[int32(m.GetStatus())]; !ok {
		err := UpdateDictsStatusRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDictsStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateDictsStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDictsStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictsStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictsStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictsStatusRequestMultiError) AllErrors() []error { return m }

// UpdateDictsStatusRequestValidationError is the validation error returned by
// UpdateDictsStatusRequest.Validate if the designated constraints aren't met.
type UpdateDictsStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictsStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictsStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictsStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictsStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictsStatusRequestValidationError) ErrorName() string {
	return "UpdateDictsStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictsStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictsStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictsStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictsStatusRequestValidationError{}

// Validate checks the field values on UpdateDictsStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictsStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictsStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictsStatusReplyMultiError, or nil if none found.
func (m *UpdateDictsStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictsStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictsStatusReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictsStatusReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictsStatusReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDictsStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateDictsStatusReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateDictsStatusReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictsStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictsStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictsStatusReplyMultiError) AllErrors() []error { return m }

// UpdateDictsStatusReplyValidationError is the validation error returned by
// UpdateDictsStatusReply.Validate if the designated constraints aren't met.
type UpdateDictsStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictsStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictsStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictsStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictsStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictsStatusReplyValidationError) ErrorName() string {
	return "UpdateDictsStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictsStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictsStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictsStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictsStatusReplyValidationError{}

// Validate checks the field values on DeleteDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictRequestMultiError, or nil if none found.
func (m *DeleteDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteDictRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDictRequestMultiError(errors)
	}

	return nil
}

// DeleteDictRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDictRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictRequestMultiError) AllErrors() []error { return m }

// DeleteDictRequestValidationError is the validation error returned by
// DeleteDictRequest.Validate if the designated constraints aren't met.
type DeleteDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictRequestValidationError) ErrorName() string {
	return "DeleteDictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictRequestValidationError{}

// Validate checks the field values on DeleteDictReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictReplyMultiError, or nil if none found.
func (m *DeleteDictReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteDictReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteDictReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteDictReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteDictReplyMultiError(errors)
	}

	return nil
}

// DeleteDictReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteDictReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteDictReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictReplyMultiError) AllErrors() []error { return m }

// DeleteDictReplyValidationError is the validation error returned by
// DeleteDictReply.Validate if the designated constraints aren't met.
type DeleteDictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictReplyValidationError) ErrorName() string { return "DeleteDictReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictReplyValidationError{}

// Validate checks the field values on GetDictRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDictRequestMultiError,
// or nil if none found.
func (m *GetDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetDictRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDictRequestMultiError(errors)
	}

	return nil
}

// GetDictRequestMultiError is an error wrapping multiple validation errors
// returned by GetDictRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictRequestMultiError) AllErrors() []error { return m }

// GetDictRequestValidationError is the validation error returned by
// GetDictRequest.Validate if the designated constraints aren't met.
type GetDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictRequestValidationError) ErrorName() string { return "GetDictRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictRequestValidationError{}

// Validate checks the field values on GetDictReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDictReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDictReplyMultiError, or
// nil if none found.
func (m *GetDictReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDict()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDictReplyValidationError{
					field:  "Dict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDictReplyValidationError{
					field:  "Dict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDict()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDictReplyValidationError{
				field:  "Dict",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDictReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDictReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDictReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDictReplyMultiError(errors)
	}

	return nil
}

// GetDictReplyMultiError is an error wrapping multiple validation errors
// returned by GetDictReply.ValidateAll() if the designated constraints aren't met.
type GetDictReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictReplyMultiError) AllErrors() []error { return m }

// GetDictReplyValidationError is the validation error returned by
// GetDictReply.Validate if the designated constraints aren't met.
type GetDictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictReplyValidationError) ErrorName() string { return "GetDictReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictReplyValidationError{}

// Validate checks the field values on ListDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictRequestMultiError, or nil if none found.
func (m *ListDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetQuery() == nil {
		err := ListDictRequestValidationError{
			field:  "Query",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDictRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDictRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDictRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDict()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDictRequestValidationError{
					field:  "Dict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDictRequestValidationError{
					field:  "Dict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDict()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDictRequestValidationError{
				field:  "Dict",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListDictRequestMultiError(errors)
	}

	return nil
}

// ListDictRequestMultiError is an error wrapping multiple validation errors
// returned by ListDictRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictRequestMultiError) AllErrors() []error { return m }

// ListDictRequestValidationError is the validation error returned by
// ListDictRequest.Validate if the designated constraints aren't met.
type ListDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictRequestValidationError) ErrorName() string { return "ListDictRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictRequestValidationError{}

// Validate checks the field values on ListDictReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDictReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDictReplyMultiError, or
// nil if none found.
func (m *ListDictReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDictReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDictReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDictReplyValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDictReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDictReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDictReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDicts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictReplyValidationError{
						field:  fmt.Sprintf("Dicts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictReplyValidationError{
						field:  fmt.Sprintf("Dicts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictReplyValidationError{
					field:  fmt.Sprintf("Dicts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDictReplyMultiError(errors)
	}

	return nil
}

// ListDictReplyMultiError is an error wrapping multiple validation errors
// returned by ListDictReply.ValidateAll() if the designated constraints
// aren't met.
type ListDictReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictReplyMultiError) AllErrors() []error { return m }

// ListDictReplyValidationError is the validation error returned by
// ListDictReply.Validate if the designated constraints aren't met.
type ListDictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictReplyValidationError) ErrorName() string { return "ListDictReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListDictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictReplyValidationError{}

// Validate checks the field values on DatasourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DatasourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DatasourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DatasourcesRequestMultiError, or nil if none found.
func (m *DatasourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DatasourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DatasourcesRequestMultiError(errors)
	}

	return nil
}

// DatasourcesRequestMultiError is an error wrapping multiple validation errors
// returned by DatasourcesRequest.ValidateAll() if the designated constraints
// aren't met.
type DatasourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DatasourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DatasourcesRequestMultiError) AllErrors() []error { return m }

// DatasourcesRequestValidationError is the validation error returned by
// DatasourcesRequest.Validate if the designated constraints aren't met.
type DatasourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatasourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatasourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatasourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatasourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatasourcesRequestValidationError) ErrorName() string {
	return "DatasourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DatasourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatasourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatasourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatasourcesRequestValidationError{}

// Validate checks the field values on DatasourcesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DatasourcesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DatasourcesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DatasourcesReplyMultiError, or nil if none found.
func (m *DatasourcesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DatasourcesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DatasourcesReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DatasourcesReplyValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DatasourcesReplyValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDatasources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DatasourcesReplyValidationError{
						field:  fmt.Sprintf("Datasources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DatasourcesReplyValidationError{
						field:  fmt.Sprintf("Datasources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DatasourcesReplyValidationError{
					field:  fmt.Sprintf("Datasources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DatasourcesReplyMultiError(errors)
	}

	return nil
}

// DatasourcesReplyMultiError is an error wrapping multiple validation errors
// returned by DatasourcesReply.ValidateAll() if the designated constraints
// aren't met.
type DatasourcesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DatasourcesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DatasourcesReplyMultiError) AllErrors() []error { return m }

// DatasourcesReplyValidationError is the validation error returned by
// DatasourcesReply.Validate if the designated constraints aren't met.
type DatasourcesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatasourcesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatasourcesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatasourcesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatasourcesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatasourcesReplyValidationError) ErrorName() string { return "DatasourcesReplyValidationError" }

// Error satisfies the builtin error interface
func (e DatasourcesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatasourcesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatasourcesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatasourcesReplyValidationError{}
