// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: prom/node.proto

package prom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NodeItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeItemMultiError, or nil
// if none found.
func (m *NodeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetEnName()); l < 1 || l > 64 {
		err := NodeItemValidationError{
			field:  "EnName",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCnName()); l < 1 || l > 64 {
		err := NodeItemValidationError{
			field:  "CnName",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDatasource()); l < 1 || l > 1024 {
		err := NodeItemValidationError{
			field:  "Datasource",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRemark()); l < 0 || l > 255 {
		err := NodeItemValidationError{
			field:  "Remark",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Id

	if len(errors) > 0 {
		return NodeItemMultiError(errors)
	}

	return nil
}

// NodeItemMultiError is an error wrapping multiple validation errors returned
// by NodeItem.ValidateAll() if the designated constraints aren't met.
type NodeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeItemMultiError) AllErrors() []error { return m }

// NodeItemValidationError is the validation error returned by
// NodeItem.Validate if the designated constraints aren't met.
type NodeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeItemValidationError) ErrorName() string { return "NodeItemValidationError" }

// Error satisfies the builtin error interface
func (e NodeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeItemValidationError{}

// Validate checks the field values on DirItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DirItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DirItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DirItemMultiError, or nil if none found.
func (m *DirItem) ValidateAll() error {
	return m.validate(true)
}

func (m *DirItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNodeId() != 0 {

		if val := m.GetNodeId(); val <= 0 || val >= 4294967295 {
			err := DirItemValidationError{
				field:  "NodeId",
				reason: "value must be inside range (0, 4294967295)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 1024 {
		err := DirItemValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Id

	if len(errors) > 0 {
		return DirItemMultiError(errors)
	}

	return nil
}

// DirItemMultiError is an error wrapping multiple validation errors returned
// by DirItem.ValidateAll() if the designated constraints aren't met.
type DirItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DirItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DirItemMultiError) AllErrors() []error { return m }

// DirItemValidationError is the validation error returned by DirItem.Validate
// if the designated constraints aren't met.
type DirItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DirItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DirItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DirItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DirItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DirItemValidationError) ErrorName() string { return "DirItemValidationError" }

// Error satisfies the builtin error interface
func (e DirItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDirItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DirItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DirItemValidationError{}

// Validate checks the field values on FileItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileItemMultiError, or nil
// if none found.
func (m *FileItem) ValidateAll() error {
	return m.validate(true)
}

func (m *FileItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetFilename()); l < 1 || l > 1024 {
		err := FileItemValidationError{
			field:  "Filename",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_FileItem_Filename_Pattern.MatchString(m.GetFilename()) {
		err := FileItemValidationError{
			field:  "Filename",
			reason: "value does not match regex pattern \"^.*\\\\.(yml|yaml)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDirId() != 0 {

		if val := m.GetDirId(); val <= 0 || val >= 4294967295 {
			err := FileItemValidationError{
				field:  "DirId",
				reason: "value must be inside range (0, 4294967295)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Id

	if len(errors) > 0 {
		return FileItemMultiError(errors)
	}

	return nil
}

// FileItemMultiError is an error wrapping multiple validation errors returned
// by FileItem.ValidateAll() if the designated constraints aren't met.
type FileItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileItemMultiError) AllErrors() []error { return m }

// FileItemValidationError is the validation error returned by
// FileItem.Validate if the designated constraints aren't met.
type FileItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileItemValidationError) ErrorName() string { return "FileItemValidationError" }

// Error satisfies the builtin error interface
func (e FileItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileItemValidationError{}

var _FileItem_Filename_Pattern = regexp.MustCompile("^.*\\.(yml|yaml)$")

// Validate checks the field values on GroupItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupItemMultiError, or nil
// if none found.
func (m *GroupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := GroupItemValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRemark()); l < 0 || l > 255 {
		err := GroupItemValidationError{
			field:  "Remark",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFileId() != 0 {

		if val := m.GetFileId(); val <= 0 || val >= 4294967295 {
			err := GroupItemValidationError{
				field:  "FileId",
				reason: "value must be inside range (0, 4294967295)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetCreatedAt() != 0 {

		if val := m.GetCreatedAt(); val <= 0 || val >= 9223372036854775807 {
			err := GroupItemValidationError{
				field:  "CreatedAt",
				reason: "value must be inside range (0, 9223372036854775807)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for UpdatedAt

	// no validation rules for Id

	if len(errors) > 0 {
		return GroupItemMultiError(errors)
	}

	return nil
}

// GroupItemMultiError is an error wrapping multiple validation errors returned
// by GroupItem.ValidateAll() if the designated constraints aren't met.
type GroupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupItemMultiError) AllErrors() []error { return m }

// GroupItemValidationError is the validation error returned by
// GroupItem.Validate if the designated constraints aren't met.
type GroupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupItemValidationError) ErrorName() string { return "GroupItemValidationError" }

// Error satisfies the builtin error interface
func (e GroupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupItemValidationError{}

// Validate checks the field values on RuleItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuleItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuleItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuleItemMultiError, or nil
// if none found.
func (m *RuleItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RuleItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() != 0 {

		if val := m.GetGroupId(); val <= 0 || val >= 4294967295 {
			err := RuleItemValidationError{
				field:  "GroupId",
				reason: "value must be inside range (0, 4294967295)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetAlert()); l < 1 || l > 64 {
		err := RuleItemValidationError{
			field:  "Alert",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExpr()); l < 1 || l > 4096 {
		err := RuleItemValidationError{
			field:  "Expr",
			reason: "value length must be between 1 and 4096 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFor()); l < 1 || l > 64 {
		err := RuleItemValidationError{
			field:  "For",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RuleItem_For_Pattern.MatchString(m.GetFor()) {
		err := RuleItemValidationError{
			field:  "For",
			reason: "value does not match regex pattern \"^\\\\d+(s|m|h)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetLabels()))
		i := 0
		for key := range m.GetLabels() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLabels()[key]
			_ = val

			if l := utf8.RuneCountInString(key); l < 1 || l > 64 {
				err := RuleItemValidationError{
					field:  fmt.Sprintf("Labels[%v]", key),
					reason: "value length must be between 1 and 64 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if l := utf8.RuneCountInString(val); l < 1 || l > 64 {
				err := RuleItemValidationError{
					field:  fmt.Sprintf("Labels[%v]", key),
					reason: "value length must be between 1 and 64 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetAnnotations()))
		i := 0
		for key := range m.GetAnnotations() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAnnotations()[key]
			_ = val

			if l := utf8.RuneCountInString(key); l < 1 || l > 64 {
				err := RuleItemValidationError{
					field:  fmt.Sprintf("Annotations[%v]", key),
					reason: "value length must be between 1 and 64 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if l := utf8.RuneCountInString(val); l < 1 || l > 64 {
				err := RuleItemValidationError{
					field:  fmt.Sprintf("Annotations[%v]", key),
					reason: "value length must be between 1 and 64 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Id

	if len(errors) > 0 {
		return RuleItemMultiError(errors)
	}

	return nil
}

// RuleItemMultiError is an error wrapping multiple validation errors returned
// by RuleItem.ValidateAll() if the designated constraints aren't met.
type RuleItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleItemMultiError) AllErrors() []error { return m }

// RuleItemValidationError is the validation error returned by
// RuleItem.Validate if the designated constraints aren't met.
type RuleItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleItemValidationError) ErrorName() string { return "RuleItemValidationError" }

// Error satisfies the builtin error interface
func (e RuleItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleItemValidationError{}

var _RuleItem_For_Pattern = regexp.MustCompile("^\\d+(s|m|h)$")

// Validate checks the field values on ComboRuleItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ComboRuleItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComboRuleItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComboRuleItemMultiError, or
// nil if none found.
func (m *ComboRuleItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ComboRuleItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAlert()); l < 1 || l > 64 {
		err := ComboRuleItemValidationError{
			field:  "Alert",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExpr()); l < 1 || l > 4096 {
		err := ComboRuleItemValidationError{
			field:  "Expr",
			reason: "value length must be between 1 and 4096 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFor()); l < 1 || l > 64 {
		err := ComboRuleItemValidationError{
			field:  "For",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ComboRuleItem_For_Pattern.MatchString(m.GetFor()) {
		err := ComboRuleItemValidationError{
			field:  "For",
			reason: "value does not match regex pattern \"^\\\\d+(s|m|h)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetLabels()))
		i := 0
		for key := range m.GetLabels() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLabels()[key]
			_ = val

			if l := utf8.RuneCountInString(key); l < 1 || l > 64 {
				err := ComboRuleItemValidationError{
					field:  fmt.Sprintf("Labels[%v]", key),
					reason: "value length must be between 1 and 64 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if l := utf8.RuneCountInString(val); l < 1 || l > 64 {
				err := ComboRuleItemValidationError{
					field:  fmt.Sprintf("Labels[%v]", key),
					reason: "value length must be between 1 and 64 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetAnnotations()))
		i := 0
		for key := range m.GetAnnotations() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAnnotations()[key]
			_ = val

			if l := utf8.RuneCountInString(key); l < 1 || l > 64 {
				err := ComboRuleItemValidationError{
					field:  fmt.Sprintf("Annotations[%v]", key),
					reason: "value length must be between 1 and 64 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if l := utf8.RuneCountInString(val); l < 1 || l > 64 {
				err := ComboRuleItemValidationError{
					field:  fmt.Sprintf("Annotations[%v]", key),
					reason: "value length must be between 1 and 64 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Id

	if len(errors) > 0 {
		return ComboRuleItemMultiError(errors)
	}

	return nil
}

// ComboRuleItemMultiError is an error wrapping multiple validation errors
// returned by ComboRuleItem.ValidateAll() if the designated constraints
// aren't met.
type ComboRuleItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComboRuleItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComboRuleItemMultiError) AllErrors() []error { return m }

// ComboRuleItemValidationError is the validation error returned by
// ComboRuleItem.Validate if the designated constraints aren't met.
type ComboRuleItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComboRuleItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComboRuleItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComboRuleItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComboRuleItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComboRuleItemValidationError) ErrorName() string { return "ComboRuleItemValidationError" }

// Error satisfies the builtin error interface
func (e ComboRuleItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComboRuleItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComboRuleItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComboRuleItemValidationError{}

var _ComboRuleItem_For_Pattern = regexp.MustCompile("^\\d+(s|m|h)$")

// Validate checks the field values on ComboItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ComboItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComboItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComboItemMultiError, or nil
// if none found.
func (m *ComboItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ComboItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := ComboItemValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRemark()); l < 0 || l > 2048 {
		err := ComboItemValidationError{
			field:  "Remark",
			reason: "value length must be between 0 and 2048 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ComboItemValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ComboItemValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ComboItemValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Id

	if len(errors) > 0 {
		return ComboItemMultiError(errors)
	}

	return nil
}

// ComboItemMultiError is an error wrapping multiple validation errors returned
// by ComboItem.ValidateAll() if the designated constraints aren't met.
type ComboItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComboItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComboItemMultiError) AllErrors() []error { return m }

// ComboItemValidationError is the validation error returned by
// ComboItem.Validate if the designated constraints aren't met.
type ComboItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComboItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComboItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComboItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComboItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComboItemValidationError) ErrorName() string { return "ComboItemValidationError" }

// Error satisfies the builtin error interface
func (e ComboItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComboItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComboItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComboItemValidationError{}
