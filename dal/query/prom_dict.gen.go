// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"prometheus-manager/dal/model"
)

func newPromDict(db *gorm.DB, opts ...gen.DOOption) promDict {
	_promDict := promDict{}

	_promDict.promDictDo.UseDB(db, opts...)
	_promDict.promDictDo.UseModel(&model.PromDict{})

	tableName := _promDict.promDictDo.TableName()
	_promDict.ALL = field.NewAsterisk(tableName)
	_promDict.ID = field.NewInt32(tableName, "id")
	_promDict.Name = field.NewString(tableName, "name")
	_promDict.Remark = field.NewString(tableName, "remark")
	_promDict.CreatedAt = field.NewTime(tableName, "created_at")
	_promDict.UpdatedAt = field.NewTime(tableName, "updated_at")
	_promDict.DeletedAt = field.NewField(tableName, "deleted_at")
	_promDict.Category = field.NewInt32(tableName, "category")
	_promDict.Color = field.NewString(tableName, "color")

	_promDict.fillFieldMap()

	return _promDict
}

type promDict struct {
	promDictDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String // 字典名称
	Remark    field.String // 字典备注
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间
	Category  field.Int32  // 字典类型
	Color     field.String // 字典tag颜色

	fieldMap map[string]field.Expr
}

func (p promDict) Table(newTableName string) *promDict {
	p.promDictDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promDict) As(alias string) *promDict {
	p.promDictDo.DO = *(p.promDictDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promDict) updateTableName(table string) *promDict {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.Name = field.NewString(table, "name")
	p.Remark = field.NewString(table, "remark")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Category = field.NewInt32(table, "category")
	p.Color = field.NewString(table, "color")

	p.fillFieldMap()

	return p
}

func (p *promDict) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promDict) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["remark"] = p.Remark
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["category"] = p.Category
	p.fieldMap["color"] = p.Color
}

func (p promDict) clone(db *gorm.DB) promDict {
	p.promDictDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promDict) replaceDB(db *gorm.DB) promDict {
	p.promDictDo.ReplaceDB(db)
	return p
}

type promDictDo struct{ gen.DO }

type IPromDictDo interface {
	gen.SubQuery
	Debug() IPromDictDo
	WithContext(ctx context.Context) IPromDictDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromDictDo
	WriteDB() IPromDictDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromDictDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromDictDo
	Not(conds ...gen.Condition) IPromDictDo
	Or(conds ...gen.Condition) IPromDictDo
	Select(conds ...field.Expr) IPromDictDo
	Where(conds ...gen.Condition) IPromDictDo
	Order(conds ...field.Expr) IPromDictDo
	Distinct(cols ...field.Expr) IPromDictDo
	Omit(cols ...field.Expr) IPromDictDo
	Join(table schema.Tabler, on ...field.Expr) IPromDictDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromDictDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPromDictDo
	Group(cols ...field.Expr) IPromDictDo
	Having(conds ...gen.Condition) IPromDictDo
	Limit(limit int) IPromDictDo
	Offset(offset int) IPromDictDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromDictDo
	Unscoped() IPromDictDo
	Create(values ...*model.PromDict) error
	CreateInBatches(values []*model.PromDict, batchSize int) error
	Save(values ...*model.PromDict) error
	First() (*model.PromDict, error)
	Take() (*model.PromDict, error)
	Last() (*model.PromDict, error)
	Find() ([]*model.PromDict, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromDict, err error)
	FindInBatches(result *[]*model.PromDict, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PromDict) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromDictDo
	Assign(attrs ...field.AssignExpr) IPromDictDo
	Joins(fields ...field.RelationField) IPromDictDo
	Preload(fields ...field.RelationField) IPromDictDo
	FirstOrInit() (*model.PromDict, error)
	FirstOrCreate() (*model.PromDict, error)
	FindByPage(offset int, limit int) (result []*model.PromDict, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromDictDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SaFindById(ctx context.Context, id int32) (result *model.PromDict, err error)
}

// select * from @@table where id = @id
func (p promDictDo) SaFindById(ctx context.Context, id int32) (result *model.PromDict, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("select * from prom_dict where id = ? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p promDictDo) Debug() IPromDictDo {
	return p.withDO(p.DO.Debug())
}

func (p promDictDo) WithContext(ctx context.Context) IPromDictDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promDictDo) ReadDB() IPromDictDo {
	return p.Clauses(dbresolver.Read)
}

func (p promDictDo) WriteDB() IPromDictDo {
	return p.Clauses(dbresolver.Write)
}

func (p promDictDo) Session(config *gorm.Session) IPromDictDo {
	return p.withDO(p.DO.Session(config))
}

func (p promDictDo) Clauses(conds ...clause.Expression) IPromDictDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promDictDo) Returning(value interface{}, columns ...string) IPromDictDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promDictDo) Not(conds ...gen.Condition) IPromDictDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promDictDo) Or(conds ...gen.Condition) IPromDictDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promDictDo) Select(conds ...field.Expr) IPromDictDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promDictDo) Where(conds ...gen.Condition) IPromDictDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promDictDo) Order(conds ...field.Expr) IPromDictDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promDictDo) Distinct(cols ...field.Expr) IPromDictDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promDictDo) Omit(cols ...field.Expr) IPromDictDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promDictDo) Join(table schema.Tabler, on ...field.Expr) IPromDictDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promDictDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPromDictDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promDictDo) RightJoin(table schema.Tabler, on ...field.Expr) IPromDictDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promDictDo) Group(cols ...field.Expr) IPromDictDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promDictDo) Having(conds ...gen.Condition) IPromDictDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promDictDo) Limit(limit int) IPromDictDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promDictDo) Offset(offset int) IPromDictDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promDictDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromDictDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promDictDo) Unscoped() IPromDictDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promDictDo) Create(values ...*model.PromDict) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promDictDo) CreateInBatches(values []*model.PromDict, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promDictDo) Save(values ...*model.PromDict) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promDictDo) First() (*model.PromDict, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromDict), nil
	}
}

func (p promDictDo) Take() (*model.PromDict, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromDict), nil
	}
}

func (p promDictDo) Last() (*model.PromDict, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromDict), nil
	}
}

func (p promDictDo) Find() ([]*model.PromDict, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromDict), err
}

func (p promDictDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromDict, err error) {
	buf := make([]*model.PromDict, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promDictDo) FindInBatches(result *[]*model.PromDict, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promDictDo) Attrs(attrs ...field.AssignExpr) IPromDictDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promDictDo) Assign(attrs ...field.AssignExpr) IPromDictDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promDictDo) Joins(fields ...field.RelationField) IPromDictDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promDictDo) Preload(fields ...field.RelationField) IPromDictDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promDictDo) FirstOrInit() (*model.PromDict, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromDict), nil
	}
}

func (p promDictDo) FirstOrCreate() (*model.PromDict, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromDict), nil
	}
}

func (p promDictDo) FindByPage(offset int, limit int) (result []*model.PromDict, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promDictDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promDictDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promDictDo) Delete(models ...*model.PromDict) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promDictDo) withDO(do gen.Dao) *promDictDo {
	p.DO = *do.(*gen.DO)
	return p
}
