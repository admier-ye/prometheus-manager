// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"prometheus-manager/dal/model"
)

func newStrategyGroup(db *gorm.DB, opts ...gen.DOOption) strategyGroup {
	_strategyGroup := strategyGroup{}

	_strategyGroup.strategyGroupDo.UseDB(db, opts...)
	_strategyGroup.strategyGroupDo.UseModel(&model.StrategyGroup{})

	tableName := _strategyGroup.strategyGroupDo.TableName()
	_strategyGroup.ALL = field.NewAsterisk(tableName)
	_strategyGroup.ID = field.NewInt32(tableName, "id")
	_strategyGroup.Name = field.NewString(tableName, "name")
	_strategyGroup.Remark = field.NewString(tableName, "remark")

	_strategyGroup.fillFieldMap()

	return _strategyGroup
}

type strategyGroup struct {
	strategyGroupDo

	ALL    field.Asterisk
	ID     field.Int32
	Name   field.String // 策略组名称
	Remark field.String // 说明

	fieldMap map[string]field.Expr
}

func (s strategyGroup) Table(newTableName string) *strategyGroup {
	s.strategyGroupDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s strategyGroup) As(alias string) *strategyGroup {
	s.strategyGroupDo.DO = *(s.strategyGroupDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *strategyGroup) updateTableName(table string) *strategyGroup {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.Remark = field.NewString(table, "remark")

	s.fillFieldMap()

	return s
}

func (s *strategyGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *strategyGroup) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["remark"] = s.Remark
}

func (s strategyGroup) clone(db *gorm.DB) strategyGroup {
	s.strategyGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s strategyGroup) replaceDB(db *gorm.DB) strategyGroup {
	s.strategyGroupDo.ReplaceDB(db)
	return s
}

type strategyGroupDo struct{ gen.DO }

type IStrategyGroupDo interface {
	gen.SubQuery
	Debug() IStrategyGroupDo
	WithContext(ctx context.Context) IStrategyGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStrategyGroupDo
	WriteDB() IStrategyGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStrategyGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStrategyGroupDo
	Not(conds ...gen.Condition) IStrategyGroupDo
	Or(conds ...gen.Condition) IStrategyGroupDo
	Select(conds ...field.Expr) IStrategyGroupDo
	Where(conds ...gen.Condition) IStrategyGroupDo
	Order(conds ...field.Expr) IStrategyGroupDo
	Distinct(cols ...field.Expr) IStrategyGroupDo
	Omit(cols ...field.Expr) IStrategyGroupDo
	Join(table schema.Tabler, on ...field.Expr) IStrategyGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStrategyGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStrategyGroupDo
	Group(cols ...field.Expr) IStrategyGroupDo
	Having(conds ...gen.Condition) IStrategyGroupDo
	Limit(limit int) IStrategyGroupDo
	Offset(offset int) IStrategyGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStrategyGroupDo
	Unscoped() IStrategyGroupDo
	Create(values ...*model.StrategyGroup) error
	CreateInBatches(values []*model.StrategyGroup, batchSize int) error
	Save(values ...*model.StrategyGroup) error
	First() (*model.StrategyGroup, error)
	Take() (*model.StrategyGroup, error)
	Last() (*model.StrategyGroup, error)
	Find() ([]*model.StrategyGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StrategyGroup, err error)
	FindInBatches(result *[]*model.StrategyGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StrategyGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStrategyGroupDo
	Assign(attrs ...field.AssignExpr) IStrategyGroupDo
	Joins(fields ...field.RelationField) IStrategyGroupDo
	Preload(fields ...field.RelationField) IStrategyGroupDo
	FirstOrInit() (*model.StrategyGroup, error)
	FirstOrCreate() (*model.StrategyGroup, error)
	FindByPage(offset int, limit int) (result []*model.StrategyGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStrategyGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	WhereID(ctx context.Context, id uint) (result *model.StrategyGroup, err error)
}

// select * from @@table where id = @id
func (s strategyGroupDo) WhereID(ctx context.Context, id uint) (result *model.StrategyGroup, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("select * from strategy_groups where id = ? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s strategyGroupDo) Debug() IStrategyGroupDo {
	return s.withDO(s.DO.Debug())
}

func (s strategyGroupDo) WithContext(ctx context.Context) IStrategyGroupDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s strategyGroupDo) ReadDB() IStrategyGroupDo {
	return s.Clauses(dbresolver.Read)
}

func (s strategyGroupDo) WriteDB() IStrategyGroupDo {
	return s.Clauses(dbresolver.Write)
}

func (s strategyGroupDo) Session(config *gorm.Session) IStrategyGroupDo {
	return s.withDO(s.DO.Session(config))
}

func (s strategyGroupDo) Clauses(conds ...clause.Expression) IStrategyGroupDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s strategyGroupDo) Returning(value interface{}, columns ...string) IStrategyGroupDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s strategyGroupDo) Not(conds ...gen.Condition) IStrategyGroupDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s strategyGroupDo) Or(conds ...gen.Condition) IStrategyGroupDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s strategyGroupDo) Select(conds ...field.Expr) IStrategyGroupDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s strategyGroupDo) Where(conds ...gen.Condition) IStrategyGroupDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s strategyGroupDo) Order(conds ...field.Expr) IStrategyGroupDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s strategyGroupDo) Distinct(cols ...field.Expr) IStrategyGroupDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s strategyGroupDo) Omit(cols ...field.Expr) IStrategyGroupDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s strategyGroupDo) Join(table schema.Tabler, on ...field.Expr) IStrategyGroupDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s strategyGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStrategyGroupDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s strategyGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IStrategyGroupDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s strategyGroupDo) Group(cols ...field.Expr) IStrategyGroupDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s strategyGroupDo) Having(conds ...gen.Condition) IStrategyGroupDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s strategyGroupDo) Limit(limit int) IStrategyGroupDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s strategyGroupDo) Offset(offset int) IStrategyGroupDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s strategyGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStrategyGroupDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s strategyGroupDo) Unscoped() IStrategyGroupDo {
	return s.withDO(s.DO.Unscoped())
}

func (s strategyGroupDo) Create(values ...*model.StrategyGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s strategyGroupDo) CreateInBatches(values []*model.StrategyGroup, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s strategyGroupDo) Save(values ...*model.StrategyGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s strategyGroupDo) First() (*model.StrategyGroup, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StrategyGroup), nil
	}
}

func (s strategyGroupDo) Take() (*model.StrategyGroup, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StrategyGroup), nil
	}
}

func (s strategyGroupDo) Last() (*model.StrategyGroup, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StrategyGroup), nil
	}
}

func (s strategyGroupDo) Find() ([]*model.StrategyGroup, error) {
	result, err := s.DO.Find()
	return result.([]*model.StrategyGroup), err
}

func (s strategyGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StrategyGroup, err error) {
	buf := make([]*model.StrategyGroup, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s strategyGroupDo) FindInBatches(result *[]*model.StrategyGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s strategyGroupDo) Attrs(attrs ...field.AssignExpr) IStrategyGroupDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s strategyGroupDo) Assign(attrs ...field.AssignExpr) IStrategyGroupDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s strategyGroupDo) Joins(fields ...field.RelationField) IStrategyGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s strategyGroupDo) Preload(fields ...field.RelationField) IStrategyGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s strategyGroupDo) FirstOrInit() (*model.StrategyGroup, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StrategyGroup), nil
	}
}

func (s strategyGroupDo) FirstOrCreate() (*model.StrategyGroup, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StrategyGroup), nil
	}
}

func (s strategyGroupDo) FindByPage(offset int, limit int) (result []*model.StrategyGroup, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s strategyGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s strategyGroupDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s strategyGroupDo) Delete(models ...*model.StrategyGroup) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *strategyGroupDo) withDO(do gen.Dao) *strategyGroupDo {
	s.DO = *do.(*gen.DO)
	return s
}
