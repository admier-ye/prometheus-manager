// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"prometheus-manager/dal/model"
)

func newPromNodeDirFile(db *gorm.DB, opts ...gen.DOOption) promNodeDirFile {
	_promNodeDirFile := promNodeDirFile{}

	_promNodeDirFile.promNodeDirFileDo.UseDB(db, opts...)
	_promNodeDirFile.promNodeDirFileDo.UseModel(&model.PromNodeDirFile{})

	tableName := _promNodeDirFile.promNodeDirFileDo.TableName()
	_promNodeDirFile.ALL = field.NewAsterisk(tableName)
	_promNodeDirFile.ID = field.NewInt32(tableName, "id")
	_promNodeDirFile.Filename = field.NewString(tableName, "filename")
	_promNodeDirFile.CreatedAt = field.NewTime(tableName, "created_at")
	_promNodeDirFile.UpdatedAt = field.NewTime(tableName, "updated_at")
	_promNodeDirFile.DeletedAt = field.NewField(tableName, "deleted_at")
	_promNodeDirFile.DirID = field.NewInt32(tableName, "dir_id")

	_promNodeDirFile.fillFieldMap()

	return _promNodeDirFile
}

type promNodeDirFile struct {
	promNodeDirFileDo

	ALL       field.Asterisk
	ID        field.Int32
	Filename  field.String // yaml file
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	DirID     field.Int32 // 目录 ID

	fieldMap map[string]field.Expr
}

func (p promNodeDirFile) Table(newTableName string) *promNodeDirFile {
	p.promNodeDirFileDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promNodeDirFile) As(alias string) *promNodeDirFile {
	p.promNodeDirFileDo.DO = *(p.promNodeDirFileDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promNodeDirFile) updateTableName(table string) *promNodeDirFile {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.Filename = field.NewString(table, "filename")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.DirID = field.NewInt32(table, "dir_id")

	p.fillFieldMap()

	return p
}

func (p *promNodeDirFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promNodeDirFile) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["filename"] = p.Filename
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["dir_id"] = p.DirID
}

func (p promNodeDirFile) clone(db *gorm.DB) promNodeDirFile {
	p.promNodeDirFileDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promNodeDirFile) replaceDB(db *gorm.DB) promNodeDirFile {
	p.promNodeDirFileDo.ReplaceDB(db)
	return p
}

type promNodeDirFileDo struct{ gen.DO }

type IPromNodeDirFileDo interface {
	gen.SubQuery
	Debug() IPromNodeDirFileDo
	WithContext(ctx context.Context) IPromNodeDirFileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromNodeDirFileDo
	WriteDB() IPromNodeDirFileDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromNodeDirFileDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromNodeDirFileDo
	Not(conds ...gen.Condition) IPromNodeDirFileDo
	Or(conds ...gen.Condition) IPromNodeDirFileDo
	Select(conds ...field.Expr) IPromNodeDirFileDo
	Where(conds ...gen.Condition) IPromNodeDirFileDo
	Order(conds ...field.Expr) IPromNodeDirFileDo
	Distinct(cols ...field.Expr) IPromNodeDirFileDo
	Omit(cols ...field.Expr) IPromNodeDirFileDo
	Join(table schema.Tabler, on ...field.Expr) IPromNodeDirFileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromNodeDirFileDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPromNodeDirFileDo
	Group(cols ...field.Expr) IPromNodeDirFileDo
	Having(conds ...gen.Condition) IPromNodeDirFileDo
	Limit(limit int) IPromNodeDirFileDo
	Offset(offset int) IPromNodeDirFileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromNodeDirFileDo
	Unscoped() IPromNodeDirFileDo
	Create(values ...*model.PromNodeDirFile) error
	CreateInBatches(values []*model.PromNodeDirFile, batchSize int) error
	Save(values ...*model.PromNodeDirFile) error
	First() (*model.PromNodeDirFile, error)
	Take() (*model.PromNodeDirFile, error)
	Last() (*model.PromNodeDirFile, error)
	Find() ([]*model.PromNodeDirFile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromNodeDirFile, err error)
	FindInBatches(result *[]*model.PromNodeDirFile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PromNodeDirFile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromNodeDirFileDo
	Assign(attrs ...field.AssignExpr) IPromNodeDirFileDo
	Joins(fields ...field.RelationField) IPromNodeDirFileDo
	Preload(fields ...field.RelationField) IPromNodeDirFileDo
	FirstOrInit() (*model.PromNodeDirFile, error)
	FirstOrCreate() (*model.PromNodeDirFile, error)
	FindByPage(offset int, limit int) (result []*model.PromNodeDirFile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromNodeDirFileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindById(ctx context.Context, id int32) (result *model.PromNodeDirFile, err error)
}

// select * from @@table where id = @id
func (p promNodeDirFileDo) FindById(ctx context.Context, id int32) (result *model.PromNodeDirFile, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("select * from prom_node_dir_files where id = ? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p promNodeDirFileDo) Debug() IPromNodeDirFileDo {
	return p.withDO(p.DO.Debug())
}

func (p promNodeDirFileDo) WithContext(ctx context.Context) IPromNodeDirFileDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promNodeDirFileDo) ReadDB() IPromNodeDirFileDo {
	return p.Clauses(dbresolver.Read)
}

func (p promNodeDirFileDo) WriteDB() IPromNodeDirFileDo {
	return p.Clauses(dbresolver.Write)
}

func (p promNodeDirFileDo) Session(config *gorm.Session) IPromNodeDirFileDo {
	return p.withDO(p.DO.Session(config))
}

func (p promNodeDirFileDo) Clauses(conds ...clause.Expression) IPromNodeDirFileDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promNodeDirFileDo) Returning(value interface{}, columns ...string) IPromNodeDirFileDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promNodeDirFileDo) Not(conds ...gen.Condition) IPromNodeDirFileDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promNodeDirFileDo) Or(conds ...gen.Condition) IPromNodeDirFileDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promNodeDirFileDo) Select(conds ...field.Expr) IPromNodeDirFileDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promNodeDirFileDo) Where(conds ...gen.Condition) IPromNodeDirFileDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promNodeDirFileDo) Order(conds ...field.Expr) IPromNodeDirFileDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promNodeDirFileDo) Distinct(cols ...field.Expr) IPromNodeDirFileDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promNodeDirFileDo) Omit(cols ...field.Expr) IPromNodeDirFileDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promNodeDirFileDo) Join(table schema.Tabler, on ...field.Expr) IPromNodeDirFileDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promNodeDirFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPromNodeDirFileDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promNodeDirFileDo) RightJoin(table schema.Tabler, on ...field.Expr) IPromNodeDirFileDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promNodeDirFileDo) Group(cols ...field.Expr) IPromNodeDirFileDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promNodeDirFileDo) Having(conds ...gen.Condition) IPromNodeDirFileDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promNodeDirFileDo) Limit(limit int) IPromNodeDirFileDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promNodeDirFileDo) Offset(offset int) IPromNodeDirFileDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promNodeDirFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromNodeDirFileDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promNodeDirFileDo) Unscoped() IPromNodeDirFileDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promNodeDirFileDo) Create(values ...*model.PromNodeDirFile) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promNodeDirFileDo) CreateInBatches(values []*model.PromNodeDirFile, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promNodeDirFileDo) Save(values ...*model.PromNodeDirFile) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promNodeDirFileDo) First() (*model.PromNodeDirFile, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromNodeDirFile), nil
	}
}

func (p promNodeDirFileDo) Take() (*model.PromNodeDirFile, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromNodeDirFile), nil
	}
}

func (p promNodeDirFileDo) Last() (*model.PromNodeDirFile, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromNodeDirFile), nil
	}
}

func (p promNodeDirFileDo) Find() ([]*model.PromNodeDirFile, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromNodeDirFile), err
}

func (p promNodeDirFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromNodeDirFile, err error) {
	buf := make([]*model.PromNodeDirFile, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promNodeDirFileDo) FindInBatches(result *[]*model.PromNodeDirFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promNodeDirFileDo) Attrs(attrs ...field.AssignExpr) IPromNodeDirFileDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promNodeDirFileDo) Assign(attrs ...field.AssignExpr) IPromNodeDirFileDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promNodeDirFileDo) Joins(fields ...field.RelationField) IPromNodeDirFileDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promNodeDirFileDo) Preload(fields ...field.RelationField) IPromNodeDirFileDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promNodeDirFileDo) FirstOrInit() (*model.PromNodeDirFile, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromNodeDirFile), nil
	}
}

func (p promNodeDirFileDo) FirstOrCreate() (*model.PromNodeDirFile, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromNodeDirFile), nil
	}
}

func (p promNodeDirFileDo) FindByPage(offset int, limit int) (result []*model.PromNodeDirFile, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promNodeDirFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promNodeDirFileDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promNodeDirFileDo) Delete(models ...*model.PromNodeDirFile) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promNodeDirFileDo) withDO(do gen.Dao) *promNodeDirFileDo {
	p.DO = *do.(*gen.DO)
	return p
}
