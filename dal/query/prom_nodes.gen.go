// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"prometheus-manager/dal/model"
)

func newPromNode(db *gorm.DB, opts ...gen.DOOption) promNode {
	_promNode := promNode{}

	_promNode.promNodeDo.UseDB(db, opts...)
	_promNode.promNodeDo.UseModel(&model.PromNode{})

	tableName := _promNode.promNodeDo.TableName()
	_promNode.ALL = field.NewAsterisk(tableName)
	_promNode.ID = field.NewInt32(tableName, "id")
	_promNode.CreatedAt = field.NewTime(tableName, "created_at")
	_promNode.UpdatedAt = field.NewTime(tableName, "updated_at")
	_promNode.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_promNode.EnName = field.NewString(tableName, "en_name")
	_promNode.ChName = field.NewString(tableName, "ch_name")
	_promNode.Datasource = field.NewString(tableName, "datasource")
	_promNode.Remark = field.NewString(tableName, "remark")

	_promNode.fillFieldMap()

	return _promNode
}

type promNode struct {
	promNodeDo

	ALL        field.Asterisk
	ID         field.Int32
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Int64
	EnName     field.String // 节点英文名称
	ChName     field.String // 节点中文名称
	Datasource field.String // prom数据源地址
	Remark     field.String // 备注

	fieldMap map[string]field.Expr
}

func (p promNode) Table(newTableName string) *promNode {
	p.promNodeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promNode) As(alias string) *promNode {
	p.promNodeDo.DO = *(p.promNodeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promNode) updateTableName(table string) *promNode {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewInt64(table, "deleted_at")
	p.EnName = field.NewString(table, "en_name")
	p.ChName = field.NewString(table, "ch_name")
	p.Datasource = field.NewString(table, "datasource")
	p.Remark = field.NewString(table, "remark")

	p.fillFieldMap()

	return p
}

func (p *promNode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promNode) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["en_name"] = p.EnName
	p.fieldMap["ch_name"] = p.ChName
	p.fieldMap["datasource"] = p.Datasource
	p.fieldMap["remark"] = p.Remark
}

func (p promNode) clone(db *gorm.DB) promNode {
	p.promNodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promNode) replaceDB(db *gorm.DB) promNode {
	p.promNodeDo.ReplaceDB(db)
	return p
}

type promNodeDo struct{ gen.DO }

type IPromNodeDo interface {
	gen.SubQuery
	Debug() IPromNodeDo
	WithContext(ctx context.Context) IPromNodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromNodeDo
	WriteDB() IPromNodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromNodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromNodeDo
	Not(conds ...gen.Condition) IPromNodeDo
	Or(conds ...gen.Condition) IPromNodeDo
	Select(conds ...field.Expr) IPromNodeDo
	Where(conds ...gen.Condition) IPromNodeDo
	Order(conds ...field.Expr) IPromNodeDo
	Distinct(cols ...field.Expr) IPromNodeDo
	Omit(cols ...field.Expr) IPromNodeDo
	Join(table schema.Tabler, on ...field.Expr) IPromNodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromNodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPromNodeDo
	Group(cols ...field.Expr) IPromNodeDo
	Having(conds ...gen.Condition) IPromNodeDo
	Limit(limit int) IPromNodeDo
	Offset(offset int) IPromNodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromNodeDo
	Unscoped() IPromNodeDo
	Create(values ...*model.PromNode) error
	CreateInBatches(values []*model.PromNode, batchSize int) error
	Save(values ...*model.PromNode) error
	First() (*model.PromNode, error)
	Take() (*model.PromNode, error)
	Last() (*model.PromNode, error)
	Find() ([]*model.PromNode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromNode, err error)
	FindInBatches(result *[]*model.PromNode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PromNode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromNodeDo
	Assign(attrs ...field.AssignExpr) IPromNodeDo
	Joins(fields ...field.RelationField) IPromNodeDo
	Preload(fields ...field.RelationField) IPromNodeDo
	FirstOrInit() (*model.PromNode, error)
	FirstOrCreate() (*model.PromNode, error)
	FindByPage(offset int, limit int) (result []*model.PromNode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromNodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindById(ctx context.Context, id int32) (result *model.PromNode, err error)
}

// select * from @@table where id = @id
func (p promNodeDo) FindById(ctx context.Context, id int32) (result *model.PromNode, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("select * from prom_nodes where id = ? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p promNodeDo) Debug() IPromNodeDo {
	return p.withDO(p.DO.Debug())
}

func (p promNodeDo) WithContext(ctx context.Context) IPromNodeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promNodeDo) ReadDB() IPromNodeDo {
	return p.Clauses(dbresolver.Read)
}

func (p promNodeDo) WriteDB() IPromNodeDo {
	return p.Clauses(dbresolver.Write)
}

func (p promNodeDo) Session(config *gorm.Session) IPromNodeDo {
	return p.withDO(p.DO.Session(config))
}

func (p promNodeDo) Clauses(conds ...clause.Expression) IPromNodeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promNodeDo) Returning(value interface{}, columns ...string) IPromNodeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promNodeDo) Not(conds ...gen.Condition) IPromNodeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promNodeDo) Or(conds ...gen.Condition) IPromNodeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promNodeDo) Select(conds ...field.Expr) IPromNodeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promNodeDo) Where(conds ...gen.Condition) IPromNodeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promNodeDo) Order(conds ...field.Expr) IPromNodeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promNodeDo) Distinct(cols ...field.Expr) IPromNodeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promNodeDo) Omit(cols ...field.Expr) IPromNodeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promNodeDo) Join(table schema.Tabler, on ...field.Expr) IPromNodeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promNodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPromNodeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promNodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IPromNodeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promNodeDo) Group(cols ...field.Expr) IPromNodeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promNodeDo) Having(conds ...gen.Condition) IPromNodeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promNodeDo) Limit(limit int) IPromNodeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promNodeDo) Offset(offset int) IPromNodeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promNodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromNodeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promNodeDo) Unscoped() IPromNodeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promNodeDo) Create(values ...*model.PromNode) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promNodeDo) CreateInBatches(values []*model.PromNode, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promNodeDo) Save(values ...*model.PromNode) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promNodeDo) First() (*model.PromNode, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromNode), nil
	}
}

func (p promNodeDo) Take() (*model.PromNode, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromNode), nil
	}
}

func (p promNodeDo) Last() (*model.PromNode, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromNode), nil
	}
}

func (p promNodeDo) Find() ([]*model.PromNode, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromNode), err
}

func (p promNodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromNode, err error) {
	buf := make([]*model.PromNode, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promNodeDo) FindInBatches(result *[]*model.PromNode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promNodeDo) Attrs(attrs ...field.AssignExpr) IPromNodeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promNodeDo) Assign(attrs ...field.AssignExpr) IPromNodeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promNodeDo) Joins(fields ...field.RelationField) IPromNodeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promNodeDo) Preload(fields ...field.RelationField) IPromNodeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promNodeDo) FirstOrInit() (*model.PromNode, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromNode), nil
	}
}

func (p promNodeDo) FirstOrCreate() (*model.PromNode, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromNode), nil
	}
}

func (p promNodeDo) FindByPage(offset int, limit int) (result []*model.PromNode, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promNodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promNodeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promNodeDo) Delete(models ...*model.PromNode) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promNodeDo) withDO(do gen.Dao) *promNodeDo {
	p.DO = *do.(*gen.DO)
	return p
}
