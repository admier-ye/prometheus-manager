// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"prometheus-manager/dal/model"
)

func newPromStrategy(db *gorm.DB, opts ...gen.DOOption) promStrategy {
	_promStrategy := promStrategy{}

	_promStrategy.promStrategyDo.UseDB(db, opts...)
	_promStrategy.promStrategyDo.UseModel(&model.PromStrategy{})

	tableName := _promStrategy.promStrategyDo.TableName()
	_promStrategy.ALL = field.NewAsterisk(tableName)
	_promStrategy.ID = field.NewInt32(tableName, "id")
	_promStrategy.GroupID = field.NewInt32(tableName, "group_id")
	_promStrategy.Alert = field.NewString(tableName, "alert")
	_promStrategy.Expr = field.NewString(tableName, "expr")
	_promStrategy.For = field.NewString(tableName, "for")
	_promStrategy.Labels = field.NewString(tableName, "labels")
	_promStrategy.Annotations = field.NewString(tableName, "annotations")
	_promStrategy.AlertLevelID = field.NewInt32(tableName, "alert_level_id")
	_promStrategy.Status = field.NewInt32(tableName, "status")
	_promStrategy.CreatedAt = field.NewTime(tableName, "created_at")
	_promStrategy.UpdatedAt = field.NewTime(tableName, "updated_at")
	_promStrategy.DeletedAt = field.NewField(tableName, "deleted_at")
	_promStrategy.AlarmPages = promStrategyHasManyAlarmPages{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AlarmPages", "model.PromAlarmPage"),
		PromStrategies: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("AlarmPages.PromStrategies", "model.PromStrategy"),
		},
	}

	_promStrategy.Categories = promStrategyHasManyCategories{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Categories", "model.PromDict"),
	}

	_promStrategy.AlertLevel = promStrategyBelongsToAlertLevel{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AlertLevel", "model.PromDict"),
	}

	_promStrategy.fillFieldMap()

	return _promStrategy
}

type promStrategy struct {
	promStrategyDo

	ALL          field.Asterisk
	ID           field.Int32
	GroupID      field.Int32  // 所属规则组ID
	Alert        field.String // 规则名称
	Expr         field.String // prom ql
	For          field.String // 持续时间
	Labels       field.String // 标签
	Annotations  field.String // 告警文案
	AlertLevelID field.Int32  // 告警等级dict ID
	Status       field.Int32  // 启用状态: 1启用;2禁用
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间
	DeletedAt    field.Field  // 删除时间
	AlarmPages   promStrategyHasManyAlarmPages

	Categories promStrategyHasManyCategories

	AlertLevel promStrategyBelongsToAlertLevel

	fieldMap map[string]field.Expr
}

func (p promStrategy) Table(newTableName string) *promStrategy {
	p.promStrategyDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promStrategy) As(alias string) *promStrategy {
	p.promStrategyDo.DO = *(p.promStrategyDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promStrategy) updateTableName(table string) *promStrategy {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.GroupID = field.NewInt32(table, "group_id")
	p.Alert = field.NewString(table, "alert")
	p.Expr = field.NewString(table, "expr")
	p.For = field.NewString(table, "for")
	p.Labels = field.NewString(table, "labels")
	p.Annotations = field.NewString(table, "annotations")
	p.AlertLevelID = field.NewInt32(table, "alert_level_id")
	p.Status = field.NewInt32(table, "status")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *promStrategy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promStrategy) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 15)
	p.fieldMap["id"] = p.ID
	p.fieldMap["group_id"] = p.GroupID
	p.fieldMap["alert"] = p.Alert
	p.fieldMap["expr"] = p.Expr
	p.fieldMap["for"] = p.For
	p.fieldMap["labels"] = p.Labels
	p.fieldMap["annotations"] = p.Annotations
	p.fieldMap["alert_level_id"] = p.AlertLevelID
	p.fieldMap["status"] = p.Status
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt

}

func (p promStrategy) clone(db *gorm.DB) promStrategy {
	p.promStrategyDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promStrategy) replaceDB(db *gorm.DB) promStrategy {
	p.promStrategyDo.ReplaceDB(db)
	return p
}

type promStrategyHasManyAlarmPages struct {
	db *gorm.DB

	field.RelationField

	PromStrategies struct {
		field.RelationField
	}
}

func (a promStrategyHasManyAlarmPages) Where(conds ...field.Expr) *promStrategyHasManyAlarmPages {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a promStrategyHasManyAlarmPages) WithContext(ctx context.Context) *promStrategyHasManyAlarmPages {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a promStrategyHasManyAlarmPages) Session(session *gorm.Session) *promStrategyHasManyAlarmPages {
	a.db = a.db.Session(session)
	return &a
}

func (a promStrategyHasManyAlarmPages) Model(m *model.PromStrategy) *promStrategyHasManyAlarmPagesTx {
	return &promStrategyHasManyAlarmPagesTx{a.db.Model(m).Association(a.Name())}
}

type promStrategyHasManyAlarmPagesTx struct{ tx *gorm.Association }

func (a promStrategyHasManyAlarmPagesTx) Find() (result []*model.PromAlarmPage, err error) {
	return result, a.tx.Find(&result)
}

func (a promStrategyHasManyAlarmPagesTx) Append(values ...*model.PromAlarmPage) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a promStrategyHasManyAlarmPagesTx) Replace(values ...*model.PromAlarmPage) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a promStrategyHasManyAlarmPagesTx) Delete(values ...*model.PromAlarmPage) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a promStrategyHasManyAlarmPagesTx) Clear() error {
	return a.tx.Clear()
}

func (a promStrategyHasManyAlarmPagesTx) Count() int64 {
	return a.tx.Count()
}

type promStrategyHasManyCategories struct {
	db *gorm.DB

	field.RelationField
}

func (a promStrategyHasManyCategories) Where(conds ...field.Expr) *promStrategyHasManyCategories {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a promStrategyHasManyCategories) WithContext(ctx context.Context) *promStrategyHasManyCategories {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a promStrategyHasManyCategories) Session(session *gorm.Session) *promStrategyHasManyCategories {
	a.db = a.db.Session(session)
	return &a
}

func (a promStrategyHasManyCategories) Model(m *model.PromStrategy) *promStrategyHasManyCategoriesTx {
	return &promStrategyHasManyCategoriesTx{a.db.Model(m).Association(a.Name())}
}

type promStrategyHasManyCategoriesTx struct{ tx *gorm.Association }

func (a promStrategyHasManyCategoriesTx) Find() (result []*model.PromDict, err error) {
	return result, a.tx.Find(&result)
}

func (a promStrategyHasManyCategoriesTx) Append(values ...*model.PromDict) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a promStrategyHasManyCategoriesTx) Replace(values ...*model.PromDict) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a promStrategyHasManyCategoriesTx) Delete(values ...*model.PromDict) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a promStrategyHasManyCategoriesTx) Clear() error {
	return a.tx.Clear()
}

func (a promStrategyHasManyCategoriesTx) Count() int64 {
	return a.tx.Count()
}

type promStrategyBelongsToAlertLevel struct {
	db *gorm.DB

	field.RelationField
}

func (a promStrategyBelongsToAlertLevel) Where(conds ...field.Expr) *promStrategyBelongsToAlertLevel {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a promStrategyBelongsToAlertLevel) WithContext(ctx context.Context) *promStrategyBelongsToAlertLevel {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a promStrategyBelongsToAlertLevel) Session(session *gorm.Session) *promStrategyBelongsToAlertLevel {
	a.db = a.db.Session(session)
	return &a
}

func (a promStrategyBelongsToAlertLevel) Model(m *model.PromStrategy) *promStrategyBelongsToAlertLevelTx {
	return &promStrategyBelongsToAlertLevelTx{a.db.Model(m).Association(a.Name())}
}

type promStrategyBelongsToAlertLevelTx struct{ tx *gorm.Association }

func (a promStrategyBelongsToAlertLevelTx) Find() (result *model.PromDict, err error) {
	return result, a.tx.Find(&result)
}

func (a promStrategyBelongsToAlertLevelTx) Append(values ...*model.PromDict) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a promStrategyBelongsToAlertLevelTx) Replace(values ...*model.PromDict) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a promStrategyBelongsToAlertLevelTx) Delete(values ...*model.PromDict) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a promStrategyBelongsToAlertLevelTx) Clear() error {
	return a.tx.Clear()
}

func (a promStrategyBelongsToAlertLevelTx) Count() int64 {
	return a.tx.Count()
}

type promStrategyDo struct{ gen.DO }

type IPromStrategyDo interface {
	gen.SubQuery
	Debug() IPromStrategyDo
	WithContext(ctx context.Context) IPromStrategyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromStrategyDo
	WriteDB() IPromStrategyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromStrategyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromStrategyDo
	Not(conds ...gen.Condition) IPromStrategyDo
	Or(conds ...gen.Condition) IPromStrategyDo
	Select(conds ...field.Expr) IPromStrategyDo
	Where(conds ...gen.Condition) IPromStrategyDo
	Order(conds ...field.Expr) IPromStrategyDo
	Distinct(cols ...field.Expr) IPromStrategyDo
	Omit(cols ...field.Expr) IPromStrategyDo
	Join(table schema.Tabler, on ...field.Expr) IPromStrategyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromStrategyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPromStrategyDo
	Group(cols ...field.Expr) IPromStrategyDo
	Having(conds ...gen.Condition) IPromStrategyDo
	Limit(limit int) IPromStrategyDo
	Offset(offset int) IPromStrategyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromStrategyDo
	Unscoped() IPromStrategyDo
	Create(values ...*model.PromStrategy) error
	CreateInBatches(values []*model.PromStrategy, batchSize int) error
	Save(values ...*model.PromStrategy) error
	First() (*model.PromStrategy, error)
	Take() (*model.PromStrategy, error)
	Last() (*model.PromStrategy, error)
	Find() ([]*model.PromStrategy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromStrategy, err error)
	FindInBatches(result *[]*model.PromStrategy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PromStrategy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromStrategyDo
	Assign(attrs ...field.AssignExpr) IPromStrategyDo
	Joins(fields ...field.RelationField) IPromStrategyDo
	Preload(fields ...field.RelationField) IPromStrategyDo
	FirstOrInit() (*model.PromStrategy, error)
	FirstOrCreate() (*model.PromStrategy, error)
	FindByPage(offset int, limit int) (result []*model.PromStrategy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromStrategyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SaFindById(ctx context.Context, id int32) (result *model.PromStrategy, err error)
}

// select * from @@table where id = @id
func (p promStrategyDo) SaFindById(ctx context.Context, id int32) (result *model.PromStrategy, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("select * from prom_strategies where id = ? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p promStrategyDo) Debug() IPromStrategyDo {
	return p.withDO(p.DO.Debug())
}

func (p promStrategyDo) WithContext(ctx context.Context) IPromStrategyDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promStrategyDo) ReadDB() IPromStrategyDo {
	return p.Clauses(dbresolver.Read)
}

func (p promStrategyDo) WriteDB() IPromStrategyDo {
	return p.Clauses(dbresolver.Write)
}

func (p promStrategyDo) Session(config *gorm.Session) IPromStrategyDo {
	return p.withDO(p.DO.Session(config))
}

func (p promStrategyDo) Clauses(conds ...clause.Expression) IPromStrategyDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promStrategyDo) Returning(value interface{}, columns ...string) IPromStrategyDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promStrategyDo) Not(conds ...gen.Condition) IPromStrategyDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promStrategyDo) Or(conds ...gen.Condition) IPromStrategyDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promStrategyDo) Select(conds ...field.Expr) IPromStrategyDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promStrategyDo) Where(conds ...gen.Condition) IPromStrategyDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promStrategyDo) Order(conds ...field.Expr) IPromStrategyDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promStrategyDo) Distinct(cols ...field.Expr) IPromStrategyDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promStrategyDo) Omit(cols ...field.Expr) IPromStrategyDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promStrategyDo) Join(table schema.Tabler, on ...field.Expr) IPromStrategyDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promStrategyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPromStrategyDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promStrategyDo) RightJoin(table schema.Tabler, on ...field.Expr) IPromStrategyDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promStrategyDo) Group(cols ...field.Expr) IPromStrategyDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promStrategyDo) Having(conds ...gen.Condition) IPromStrategyDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promStrategyDo) Limit(limit int) IPromStrategyDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promStrategyDo) Offset(offset int) IPromStrategyDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promStrategyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromStrategyDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promStrategyDo) Unscoped() IPromStrategyDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promStrategyDo) Create(values ...*model.PromStrategy) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promStrategyDo) CreateInBatches(values []*model.PromStrategy, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promStrategyDo) Save(values ...*model.PromStrategy) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promStrategyDo) First() (*model.PromStrategy, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromStrategy), nil
	}
}

func (p promStrategyDo) Take() (*model.PromStrategy, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromStrategy), nil
	}
}

func (p promStrategyDo) Last() (*model.PromStrategy, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromStrategy), nil
	}
}

func (p promStrategyDo) Find() ([]*model.PromStrategy, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromStrategy), err
}

func (p promStrategyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromStrategy, err error) {
	buf := make([]*model.PromStrategy, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promStrategyDo) FindInBatches(result *[]*model.PromStrategy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promStrategyDo) Attrs(attrs ...field.AssignExpr) IPromStrategyDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promStrategyDo) Assign(attrs ...field.AssignExpr) IPromStrategyDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promStrategyDo) Joins(fields ...field.RelationField) IPromStrategyDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promStrategyDo) Preload(fields ...field.RelationField) IPromStrategyDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promStrategyDo) FirstOrInit() (*model.PromStrategy, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromStrategy), nil
	}
}

func (p promStrategyDo) FirstOrCreate() (*model.PromStrategy, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromStrategy), nil
	}
}

func (p promStrategyDo) FindByPage(offset int, limit int) (result []*model.PromStrategy, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promStrategyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promStrategyDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promStrategyDo) Delete(models ...*model.PromStrategy) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promStrategyDo) withDO(do gen.Dao) *promStrategyDo {
	p.DO = *do.(*gen.DO)
	return p
}
